// Generated by rstantools.  Do not edit by hand.

/*
    minorbsem is free software: you can redistribute it and/or modify
    it under the terms of the GNU General Public License as published by
    the Free Software Foundation, either version 3 of the License, or
    (at your option) any later version.

    minorbsem is distributed in the hope that it will be useful,
    but WITHOUT ANY WARRANTY; without even the implied warranty of
    MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
    GNU General Public License for more details.

    You should have received a copy of the GNU General Public License
    along with minorbsem.  If not, see <http://www.gnu.org/licenses/>.
*/
#ifndef MODELS_HPP
#define MODELS_HPP
#define STAN__SERVICES__COMMAND_HPP
#ifndef USE_STANC3
#define USE_STANC3
#endif
#include <rstan/rstaninc.hpp>
// Code generated by %%NAME%% %%VERSION%%
#include <stan/model/model_header.hpp>
namespace model_meta_cfa_resid_rs_namespace {
inline void validate_positive_index(const char* var_name, const char* expr,
                                    int val) {
  if (val < 1) {
    std::stringstream msg;
    msg << "Found dimension size less than one in simplex declaration"
        << "; variable=" << var_name << "; dimension size expression=" << expr
        << "; expression value=" << val;
    std::string msg_str(msg.str());
    throw std::invalid_argument(msg_str.c_str());
  }
}
inline void validate_unit_vector_index(const char* var_name, const char* expr,
                                       int val) {
  if (val <= 1) {
    std::stringstream msg;
    if (val == 1) {
      msg << "Found dimension size one in unit vector declaration."
          << " One-dimensional unit vector is discrete"
          << " but the target distribution must be continuous."
          << " variable=" << var_name << "; dimension size expression=" << expr;
    } else {
      msg << "Found dimension size less than one in unit vector declaration"
          << "; variable=" << var_name << "; dimension size expression=" << expr
          << "; expression value=" << val;
    }
    std::string msg_str(msg.str());
    throw std::invalid_argument(msg_str.c_str());
  }
}
using std::istream;
using std::string;
using std::stringstream;
using std::vector;
using std::pow;
using stan::io::dump;
using stan::math::lgamma;
using stan::model::model_base_crtp;
using stan::model::rvalue;
using stan::model::cons_list;
using stan::model::index_uni;
using stan::model::index_max;
using stan::model::index_min;
using stan::model::index_min_max;
using stan::model::index_multi;
using stan::model::index_omni;
using stan::model::nil_index_list;
using namespace stan::math;
using stan::math::pow; 
stan::math::profile_map profiles__;
static int current_statement__= 0;
static const std::vector<string> locations_array__ = {" (found before start of program)",
                                                      " (in 'meta_cfa_resid_rs', line 90, column 2 to column 39)",
                                                      " (in 'meta_cfa_resid_rs', line 91, column 2 to column 41)",
                                                      " (in 'meta_cfa_resid_rs', line 92, column 2 to column 24)",
                                                      " (in 'meta_cfa_resid_rs', line 93, column 2 to column 22)",
                                                      " (in 'meta_cfa_resid_rs', line 94, column 2 to column 33)",
                                                      " (in 'meta_cfa_resid_rs', line 95, column 2 to column 32)",
                                                      " (in 'meta_cfa_resid_rs', line 96, column 2 to column 45)",
                                                      " (in 'meta_cfa_resid_rs', line 97, column 2 to column 47)",
                                                      " (in 'meta_cfa_resid_rs', line 98, column 2 to column 37)",
                                                      " (in 'meta_cfa_resid_rs', line 99, column 2 to column 58)",
                                                      " (in 'meta_cfa_resid_rs', line 100, column 2 to column 58)",
                                                      " (in 'meta_cfa_resid_rs', line 101, column 2 to column 26)",
                                                      " (in 'meta_cfa_resid_rs', line 102, column 2 to column 22)",
                                                      " (in 'meta_cfa_resid_rs', line 103, column 2 to column 50)",
                                                      " (in 'meta_cfa_resid_rs', line 104, column 2 to column 43)",
                                                      " (in 'meta_cfa_resid_rs', line 236, column 2 to column 26)",
                                                      " (in 'meta_cfa_resid_rs', line 237, column 2 to column 50)",
                                                      " (in 'meta_cfa_resid_rs', line 238, column 2 to column 85)",
                                                      " (in 'meta_cfa_resid_rs', line 239, column 2 to column 39)",
                                                      " (in 'meta_cfa_resid_rs', line 240, column 2 to column 43)",
                                                      " (in 'meta_cfa_resid_rs', line 241, column 2 to column 22)",
                                                      " (in 'meta_cfa_resid_rs', line 242, column 2 to column 49)",
                                                      " (in 'meta_cfa_resid_rs', line 243, column 2 to column 47)",
                                                      " (in 'meta_cfa_resid_rs', line 244, column 2 to column 18)",
                                                      " (in 'meta_cfa_resid_rs', line 245, column 2 to column 29)",
                                                      " (in 'meta_cfa_resid_rs', line 246, column 2 to column 23)",
                                                      " (in 'meta_cfa_resid_rs', line 250, column 4 to column 18)",
                                                      " (in 'meta_cfa_resid_rs', line 249, column 9 to line 251, column 3)",
                                                      " (in 'meta_cfa_resid_rs', line 248, column 4 to column 27)",
                                                      " (in 'meta_cfa_resid_rs', line 247, column 21 to line 249, column 3)",
                                                      " (in 'meta_cfa_resid_rs', line 247, column 2 to line 251, column 3)",
                                                      " (in 'meta_cfa_resid_rs', line 257, column 4 to line 259, column 6)",
                                                      " (in 'meta_cfa_resid_rs', line 256, column 26 to line 260, column 3)",
                                                      " (in 'meta_cfa_resid_rs', line 256, column 9 to line 260, column 3)",
                                                      " (in 'meta_cfa_resid_rs', line 255, column 4 to column 29)",
                                                      " (in 'meta_cfa_resid_rs', line 254, column 26 to line 256, column 3)",
                                                      " (in 'meta_cfa_resid_rs', line 254, column 9 to line 260, column 3)",
                                                      " (in 'meta_cfa_resid_rs', line 253, column 4 to column 24)",
                                                      " (in 'meta_cfa_resid_rs', line 252, column 19 to line 254, column 3)",
                                                      " (in 'meta_cfa_resid_rs', line 252, column 2 to line 260, column 3)",
                                                      " (in 'meta_cfa_resid_rs', line 262, column 11 to column 13)",
                                                      " (in 'meta_cfa_resid_rs', line 262, column 4 to column 54)",
                                                      " (in 'meta_cfa_resid_rs', line 263, column 11 to column 13)",
                                                      " (in 'meta_cfa_resid_rs', line 263, column 4 to column 34)",
                                                      " (in 'meta_cfa_resid_rs', line 264, column 4 to column 22)",
                                                      " (in 'meta_cfa_resid_rs', line 265, column 4 to column 28)",
                                                      " (in 'meta_cfa_resid_rs', line 266, column 4 to column 26)",
                                                      " (in 'meta_cfa_resid_rs', line 268, column 6 to column 60)",
                                                      " (in 'meta_cfa_resid_rs', line 267, column 20 to line 269, column 5)",
                                                      " (in 'meta_cfa_resid_rs', line 267, column 4 to line 269, column 5)",
                                                      " (in 'meta_cfa_resid_rs', line 270, column 4 to column 33)",
                                                      " (in 'meta_cfa_resid_rs', line 271, column 4 to column 37)",
                                                      " (in 'meta_cfa_resid_rs', line 261, column 17 to line 272, column 3)",
                                                      " (in 'meta_cfa_resid_rs', line 261, column 2 to line 272, column 3)",
                                                      " (in 'meta_cfa_resid_rs', line 274, column 4 to column 16)",
                                                      " (in 'meta_cfa_resid_rs', line 277, column 8 to column 17)",
                                                      " (in 'meta_cfa_resid_rs', line 278, column 8 to column 49)",
                                                      " (in 'meta_cfa_resid_rs', line 279, column 8 to column 34)",
                                                      " (in 'meta_cfa_resid_rs', line 276, column 27 to line 280, column 7)",
                                                      " (in 'meta_cfa_resid_rs', line 276, column 6 to line 280, column 7)",
                                                      " (in 'meta_cfa_resid_rs', line 275, column 20 to line 281, column 5)",
                                                      " (in 'meta_cfa_resid_rs', line 275, column 4 to line 281, column 5)",
                                                      " (in 'meta_cfa_resid_rs', line 273, column 19 to line 282, column 3)",
                                                      " (in 'meta_cfa_resid_rs', line 273, column 2 to line 282, column 3)",
                                                      " (in 'meta_cfa_resid_rs', line 284, column 4 to column 16)",
                                                      " (in 'meta_cfa_resid_rs', line 285, column 4 to column 24)",
                                                      " (in 'meta_cfa_resid_rs', line 292, column 10 to column 27)",
                                                      " (in 'meta_cfa_resid_rs', line 293, column 10 to column 85)",
                                                      " (in 'meta_cfa_resid_rs', line 291, column 39 to line 294, column 9)",
                                                      " (in 'meta_cfa_resid_rs', line 291, column 15 to line 294, column 9)",
                                                      " (in 'meta_cfa_resid_rs', line 289, column 10 to column 19)",
                                                      " (in 'meta_cfa_resid_rs', line 290, column 10 to column 41)",
                                                      " (in 'meta_cfa_resid_rs', line 288, column 40 to line 291, column 9)",
                                                      " (in 'meta_cfa_resid_rs', line 288, column 8 to line 294, column 9)",
                                                      " (in 'meta_cfa_resid_rs', line 287, column 22 to line 295, column 7)",
                                                      " (in 'meta_cfa_resid_rs', line 287, column 6 to line 295, column 7)",
                                                      " (in 'meta_cfa_resid_rs', line 286, column 20 to line 296, column 5)",
                                                      " (in 'meta_cfa_resid_rs', line 286, column 4 to line 296, column 5)",
                                                      " (in 'meta_cfa_resid_rs', line 283, column 2 to line 297, column 3)",
                                                      " (in 'meta_cfa_resid_rs', line 300, column 6 to column 28)",
                                                      " (in 'meta_cfa_resid_rs', line 302, column 8 to column 29)",
                                                      " (in 'meta_cfa_resid_rs', line 303, column 8 to column 29)",
                                                      " (in 'meta_cfa_resid_rs', line 301, column 25 to line 304, column 7)",
                                                      " (in 'meta_cfa_resid_rs', line 301, column 6 to line 304, column 7)",
                                                      " (in 'meta_cfa_resid_rs', line 305, column 6 to line 312, column 7)",
                                                      " (in 'meta_cfa_resid_rs', line 308, column 38 to column 57)",
                                                      " (in 'meta_cfa_resid_rs', line 308, column 12 to column 57)",
                                                      " (in 'meta_cfa_resid_rs', line 309, column 38 to column 57)",
                                                      " (in 'meta_cfa_resid_rs', line 309, column 12 to column 57)",
                                                      " (in 'meta_cfa_resid_rs', line 307, column 27 to line 310, column 11)",
                                                      " (in 'meta_cfa_resid_rs', line 307, column 10 to line 310, column 11)",
                                                      " (in 'meta_cfa_resid_rs', line 306, column 20 to line 311, column 9)",
                                                      " (in 'meta_cfa_resid_rs', line 306, column 8 to line 311, column 9)",
                                                      " (in 'meta_cfa_resid_rs', line 299, column 37 to line 313, column 5)",
                                                      " (in 'meta_cfa_resid_rs', line 299, column 4 to line 313, column 5)",
                                                      " (in 'meta_cfa_resid_rs', line 298, column 18 to line 314, column 3)",
                                                      " (in 'meta_cfa_resid_rs', line 298, column 2 to line 314, column 3)",
                                                      " (in 'meta_cfa_resid_rs', line 316, column 4 to column 60)",
                                                      " (in 'meta_cfa_resid_rs', line 315, column 19 to line 317, column 3)",
                                                      " (in 'meta_cfa_resid_rs', line 315, column 2 to line 317, column 3)",
                                                      " (in 'meta_cfa_resid_rs', line 107, column 9 to column 11)",
                                                      " (in 'meta_cfa_resid_rs', line 107, column 2 to column 39)",
                                                      " (in 'meta_cfa_resid_rs', line 109, column 4 to column 52)",
                                                      " (in 'meta_cfa_resid_rs', line 108, column 17 to line 110, column 3)",
                                                      " (in 'meta_cfa_resid_rs', line 108, column 2 to line 110, column 3)",
                                                      " (in 'meta_cfa_resid_rs', line 111, column 2 to column 27)",
                                                      " (in 'meta_cfa_resid_rs', line 123, column 4 to column 32)",
                                                      " (in 'meta_cfa_resid_rs', line 124, column 4 to line 125, column 29)",
                                                      " (in 'meta_cfa_resid_rs', line 121, column 26 to line 126, column 3)",
                                                      " (in 'meta_cfa_resid_rs', line 121, column 9 to line 126, column 3)",
                                                      " (in 'meta_cfa_resid_rs', line 120, column 4 to column 28)",
                                                      " (in 'meta_cfa_resid_rs', line 118, column 26 to line 121, column 3)",
                                                      " (in 'meta_cfa_resid_rs', line 118, column 9 to line 126, column 3)",
                                                      " (in 'meta_cfa_resid_rs', line 117, column 4 to column 38)",
                                                      " (in 'meta_cfa_resid_rs', line 115, column 26 to line 118, column 3)",
                                                      " (in 'meta_cfa_resid_rs', line 115, column 9 to line 126, column 3)",
                                                      " (in 'meta_cfa_resid_rs', line 114, column 4 to column 26)",
                                                      " (in 'meta_cfa_resid_rs', line 112, column 19 to line 115, column 3)",
                                                      " (in 'meta_cfa_resid_rs', line 112, column 2 to line 126, column 3)",
                                                      " (in 'meta_cfa_resid_rs', line 128, column 4 to column 42)",
                                                      " (in 'meta_cfa_resid_rs', line 129, column 4 to column 43)",
                                                      " (in 'meta_cfa_resid_rs', line 130, column 4 to line 131, column 50)",
                                                      " (in 'meta_cfa_resid_rs', line 127, column 26 to line 132, column 3)",
                                                      " (in 'meta_cfa_resid_rs', line 127, column 2 to line 132, column 3)",
                                                      " (in 'meta_cfa_resid_rs', line 133, column 2 to column 39)",
                                                      " (in 'meta_cfa_resid_rs', line 134, column 2 to column 43)",
                                                      " (in 'meta_cfa_resid_rs', line 135, column 2 to column 36)",
                                                      " (in 'meta_cfa_resid_rs', line 136, column 2 to column 48)",
                                                      " (in 'meta_cfa_resid_rs', line 137, column 2 to column 36)",
                                                      " (in 'meta_cfa_resid_rs', line 138, column 2 to column 38)",
                                                      " (in 'meta_cfa_resid_rs', line 139, column 2 to column 39)",
                                                      " (in 'meta_cfa_resid_rs', line 140, column 2 to column 28)",
                                                      " (in 'meta_cfa_resid_rs', line 142, column 11 to column 13)",
                                                      " (in 'meta_cfa_resid_rs', line 142, column 15 to column 17)",
                                                      " (in 'meta_cfa_resid_rs', line 142, column 4 to column 28)",
                                                      " (in 'meta_cfa_resid_rs', line 143, column 4 to column 23)",
                                                      " (in 'meta_cfa_resid_rs', line 144, column 4 to column 23)",
                                                      " (in 'meta_cfa_resid_rs', line 145, column 4 to column 18)",
                                                      " (in 'meta_cfa_resid_rs', line 146, column 11 to column 13)",
                                                      " (in 'meta_cfa_resid_rs', line 146, column 15 to column 17)",
                                                      " (in 'meta_cfa_resid_rs', line 146, column 4 to column 25)",
                                                      " (in 'meta_cfa_resid_rs', line 147, column 11 to column 13)",
                                                      " (in 'meta_cfa_resid_rs', line 147, column 4 to column 25)",
                                                      " (in 'meta_cfa_resid_rs', line 149, column 13 to column 15)",
                                                      " (in 'meta_cfa_resid_rs', line 149, column 6 to column 43)",
                                                      " (in 'meta_cfa_resid_rs', line 150, column 13 to column 20)",
                                                      " (in 'meta_cfa_resid_rs', line 150, column 22 to column 29)",
                                                      " (in 'meta_cfa_resid_rs', line 150, column 6 to column 89)",
                                                      " (in 'meta_cfa_resid_rs', line 151, column 13 to column 16)",
                                                      " (in 'meta_cfa_resid_rs', line 151, column 6 to column 47)",
                                                      " (in 'meta_cfa_resid_rs', line 152, column 13 to column 15)",
                                                      " (in 'meta_cfa_resid_rs', line 152, column 17 to column 19)",
                                                      " (in 'meta_cfa_resid_rs', line 152, column 6 to column 54)",
                                                      " (in 'meta_cfa_resid_rs', line 153, column 13 to column 15)",
                                                      " (in 'meta_cfa_resid_rs', line 153, column 17 to column 19)",
                                                      " (in 'meta_cfa_resid_rs', line 153, column 6 to column 35)",
                                                      " (in 'meta_cfa_resid_rs', line 154, column 13 to column 15)",
                                                      " (in 'meta_cfa_resid_rs', line 154, column 17 to column 20)",
                                                      " (in 'meta_cfa_resid_rs', line 154, column 6 to column 63)",
                                                      " (in 'meta_cfa_resid_rs', line 155, column 13 to column 15)",
                                                      " (in 'meta_cfa_resid_rs', line 155, column 17 to column 19)",
                                                      " (in 'meta_cfa_resid_rs', line 155, column 6 to column 39)",
                                                      " (in 'meta_cfa_resid_rs', line 156, column 13 to column 15)",
                                                      " (in 'meta_cfa_resid_rs', line 156, column 6 to column 31)",
                                                      " (in 'meta_cfa_resid_rs', line 158, column 8 to column 20)",
                                                      " (in 'meta_cfa_resid_rs', line 159, column 8 to column 28)",
                                                      " (in 'meta_cfa_resid_rs', line 166, column 14 to column 31)",
                                                      " (in 'meta_cfa_resid_rs', line 167, column 14 to column 89)",
                                                      " (in 'meta_cfa_resid_rs', line 165, column 43 to line 168, column 13)",
                                                      " (in 'meta_cfa_resid_rs', line 165, column 19 to line 168, column 13)",
                                                      " (in 'meta_cfa_resid_rs', line 163, column 14 to column 23)",
                                                      " (in 'meta_cfa_resid_rs', line 164, column 14 to column 45)",
                                                      " (in 'meta_cfa_resid_rs', line 162, column 44 to line 165, column 13)",
                                                      " (in 'meta_cfa_resid_rs', line 162, column 12 to line 168, column 13)",
                                                      " (in 'meta_cfa_resid_rs', line 161, column 26 to line 169, column 11)",
                                                      " (in 'meta_cfa_resid_rs', line 161, column 10 to line 169, column 11)",
                                                      " (in 'meta_cfa_resid_rs', line 160, column 24 to line 170, column 9)",
                                                      " (in 'meta_cfa_resid_rs', line 160, column 8 to line 170, column 9)",
                                                      " (in 'meta_cfa_resid_rs', line 157, column 6 to line 171, column 7)",
                                                      " (in 'meta_cfa_resid_rs', line 173, column 11 to column 48)",
                                                      " (in 'meta_cfa_resid_rs', line 172, column 25 to column 75)",
                                                      " (in 'meta_cfa_resid_rs', line 172, column 6 to line 173, column 48)",
                                                      " (in 'meta_cfa_resid_rs', line 175, column 8 to line 176, column 54)",
                                                      " (in 'meta_cfa_resid_rs', line 177, column 8 to line 178, column 54)",
                                                      " (in 'meta_cfa_resid_rs', line 174, column 23 to line 179, column 7)",
                                                      " (in 'meta_cfa_resid_rs', line 174, column 6 to line 179, column 7)",
                                                      " (in 'meta_cfa_resid_rs', line 180, column 6 to column 54)",
                                                      " (in 'meta_cfa_resid_rs', line 181, column 6 to column 60)",
                                                      " (in 'meta_cfa_resid_rs', line 182, column 6 to column 73)",
                                                      " (in 'meta_cfa_resid_rs', line 183, column 6 to column 34)",
                                                      " (in 'meta_cfa_resid_rs', line 185, column 8 to column 20)",
                                                      " (in 'meta_cfa_resid_rs', line 188, column 12 to column 21)",
                                                      " (in 'meta_cfa_resid_rs', line 189, column 12 to column 90)",
                                                      " (in 'meta_cfa_resid_rs', line 190, column 12 to column 38)",
                                                      " (in 'meta_cfa_resid_rs', line 187, column 31 to line 191, column 11)",
                                                      " (in 'meta_cfa_resid_rs', line 187, column 10 to line 191, column 11)",
                                                      " (in 'meta_cfa_resid_rs', line 186, column 24 to line 192, column 9)",
                                                      " (in 'meta_cfa_resid_rs', line 186, column 8 to line 192, column 9)",
                                                      " (in 'meta_cfa_resid_rs', line 184, column 23 to line 193, column 7)",
                                                      " (in 'meta_cfa_resid_rs', line 184, column 6 to line 193, column 7)",
                                                      " (in 'meta_cfa_resid_rs', line 148, column 4 to line 194, column 5)",
                                                      " (in 'meta_cfa_resid_rs', line 196, column 15 to column 34)",
                                                      " (in 'meta_cfa_resid_rs', line 196, column 6 to column 36)",
                                                      " (in 'meta_cfa_resid_rs', line 197, column 6 to column 20)",
                                                      " (in 'meta_cfa_resid_rs', line 200, column 10 to column 25)",
                                                      " (in 'meta_cfa_resid_rs', line 201, column 10 to column 30)",
                                                      " (in 'meta_cfa_resid_rs', line 199, column 34 to line 202, column 9)",
                                                      " (in 'meta_cfa_resid_rs', line 199, column 8 to line 202, column 9)",
                                                      " (in 'meta_cfa_resid_rs', line 198, column 22 to line 203, column 7)",
                                                      " (in 'meta_cfa_resid_rs', line 198, column 6 to line 203, column 7)",
                                                      " (in 'meta_cfa_resid_rs', line 204, column 6 to column 22)",
                                                      " (in 'meta_cfa_resid_rs', line 210, column 16 to column 32)",
                                                      " (in 'meta_cfa_resid_rs', line 211, column 16 to line 212, column 62)",
                                                      " (in 'meta_cfa_resid_rs', line 213, column 16 to column 48)",
                                                      " (in 'meta_cfa_resid_rs', line 209, column 41 to line 214, column 15)",
                                                      " (in 'meta_cfa_resid_rs', line 209, column 14 to line 214, column 15)",
                                                      " (in 'meta_cfa_resid_rs', line 208, column 38 to line 215, column 13)",
                                                      " (in 'meta_cfa_resid_rs', line 208, column 12 to line 215, column 13)",
                                                      " (in 'meta_cfa_resid_rs', line 207, column 31 to line 216, column 11)",
                                                      " (in 'meta_cfa_resid_rs', line 207, column 10 to line 216, column 11)",
                                                      " (in 'meta_cfa_resid_rs', line 206, column 34 to line 217, column 9)",
                                                      " (in 'meta_cfa_resid_rs', line 206, column 8 to line 217, column 9)",
                                                      " (in 'meta_cfa_resid_rs', line 205, column 22 to line 218, column 7)",
                                                      " (in 'meta_cfa_resid_rs', line 205, column 6 to line 218, column 7)",
                                                      " (in 'meta_cfa_resid_rs', line 221, column 10 to column 26)",
                                                      " (in 'meta_cfa_resid_rs', line 222, column 10 to column 53)",
                                                      " (in 'meta_cfa_resid_rs', line 220, column 33 to line 223, column 9)",
                                                      " (in 'meta_cfa_resid_rs', line 220, column 8 to line 223, column 9)",
                                                      " (in 'meta_cfa_resid_rs', line 219, column 22 to line 224, column 7)",
                                                      " (in 'meta_cfa_resid_rs', line 219, column 6 to line 224, column 7)",
                                                      " (in 'meta_cfa_resid_rs', line 229, column 8 to line 230, column 73)",
                                                      " (in 'meta_cfa_resid_rs', line 228, column 28 to line 231, column 7)",
                                                      " (in 'meta_cfa_resid_rs', line 228, column 13 to line 231, column 7)",
                                                      " (in 'meta_cfa_resid_rs', line 226, column 8 to line 227, column 81)",
                                                      " (in 'meta_cfa_resid_rs', line 225, column 21 to line 228, column 7)",
                                                      " (in 'meta_cfa_resid_rs', line 225, column 6 to line 231, column 7)",
                                                      " (in 'meta_cfa_resid_rs', line 195, column 20 to line 232, column 5)",
                                                      " (in 'meta_cfa_resid_rs', line 195, column 4 to line 232, column 5)",
                                                      " (in 'meta_cfa_resid_rs', line 141, column 2 to line 233, column 3)",
                                                      " (in 'meta_cfa_resid_rs', line 36, column 2 to column 20)",
                                                      " (in 'meta_cfa_resid_rs', line 37, column 20 to column 22)",
                                                      " (in 'meta_cfa_resid_rs', line 37, column 2 to column 24)",
                                                      " (in 'meta_cfa_resid_rs', line 38, column 2 to column 20)",
                                                      " (in 'meta_cfa_resid_rs', line 39, column 19 to column 21)",
                                                      " (in 'meta_cfa_resid_rs', line 39, column 9 to column 11)",
                                                      " (in 'meta_cfa_resid_rs', line 39, column 13 to column 15)",
                                                      " (in 'meta_cfa_resid_rs', line 39, column 2 to column 23)",
                                                      " (in 'meta_cfa_resid_rs', line 40, column 2 to column 20)",
                                                      " (in 'meta_cfa_resid_rs', line 41, column 2 to column 21)",
                                                      " (in 'meta_cfa_resid_rs', line 42, column 16 to column 19)",
                                                      " (in 'meta_cfa_resid_rs', line 42, column 2 to column 24)",
                                                      " (in 'meta_cfa_resid_rs', line 43, column 9 to column 11)",
                                                      " (in 'meta_cfa_resid_rs', line 43, column 13 to column 15)",
                                                      " (in 'meta_cfa_resid_rs', line 43, column 2 to column 33)",
                                                      " (in 'meta_cfa_resid_rs', line 44, column 14 to column 16)",
                                                      " (in 'meta_cfa_resid_rs', line 44, column 2 to column 18)",
                                                      " (in 'meta_cfa_resid_rs', line 45, column 2 to column 37)",
                                                      " (in 'meta_cfa_resid_rs', line 46, column 2 to column 30)",
                                                      " (in 'meta_cfa_resid_rs', line 47, column 2 to column 25)",
                                                      " (in 'meta_cfa_resid_rs', line 48, column 2 to column 25)",
                                                      " (in 'meta_cfa_resid_rs', line 49, column 2 to column 25)",
                                                      " (in 'meta_cfa_resid_rs', line 50, column 2 to column 37)",
                                                      " (in 'meta_cfa_resid_rs', line 51, column 2 to column 42)",
                                                      " (in 'meta_cfa_resid_rs', line 52, column 2 to column 12)",
                                                      " (in 'meta_cfa_resid_rs', line 53, column 2 to column 17)",
                                                      " (in 'meta_cfa_resid_rs', line 54, column 16 to column 18)",
                                                      " (in 'meta_cfa_resid_rs', line 54, column 20 to column 22)",
                                                      " (in 'meta_cfa_resid_rs', line 54, column 2 to column 24)",
                                                      " (in 'meta_cfa_resid_rs', line 55, column 15 to column 17)",
                                                      " (in 'meta_cfa_resid_rs', line 55, column 19 to column 21)",
                                                      " (in 'meta_cfa_resid_rs', line 55, column 2 to column 23)",
                                                      " (in 'meta_cfa_resid_rs', line 56, column 2 to column 8)",
                                                      " (in 'meta_cfa_resid_rs', line 57, column 9 to column 11)",
                                                      " (in 'meta_cfa_resid_rs', line 57, column 13 to column 14)",
                                                      " (in 'meta_cfa_resid_rs', line 57, column 2 to column 18)",
                                                      " (in 'meta_cfa_resid_rs', line 58, column 2 to column 26)",
                                                      " (in 'meta_cfa_resid_rs', line 59, column 2 to column 26)",
                                                      " (in 'meta_cfa_resid_rs', line 60, column 2 to column 33)",
                                                      " (in 'meta_cfa_resid_rs', line 63, column 2 to column 28)",
                                                      " (in 'meta_cfa_resid_rs', line 64, column 2 to column 40)",
                                                      " (in 'meta_cfa_resid_rs', line 65, column 2 to column 24)",
                                                      " (in 'meta_cfa_resid_rs', line 66, column 2 to column 39)",
                                                      " (in 'meta_cfa_resid_rs', line 67, column 2 to column 35)",
                                                      " (in 'meta_cfa_resid_rs', line 68, column 2 to column 16)",
                                                      " (in 'meta_cfa_resid_rs', line 69, column 2 to column 18)",
                                                      " (in 'meta_cfa_resid_rs', line 70, column 2 to column 20)",
                                                      " (in 'meta_cfa_resid_rs', line 71, column 2 to column 17)",
                                                      " (in 'meta_cfa_resid_rs', line 73, column 4 to column 15)",
                                                      " (in 'meta_cfa_resid_rs', line 72, column 20 to line 74, column 3)",
                                                      " (in 'meta_cfa_resid_rs', line 72, column 2 to line 74, column 3)",
                                                      " (in 'meta_cfa_resid_rs', line 76, column 4 to column 14)",
                                                      " (in 'meta_cfa_resid_rs', line 75, column 21 to line 77, column 3)",
                                                      " (in 'meta_cfa_resid_rs', line 75, column 2 to line 77, column 3)",
                                                      " (in 'meta_cfa_resid_rs', line 78, column 19 to column 31)",
                                                      " (in 'meta_cfa_resid_rs', line 78, column 2 to column 31)",
                                                      " (in 'meta_cfa_resid_rs', line 79, column 16 to column 27)",
                                                      " (in 'meta_cfa_resid_rs', line 79, column 2 to column 27)",
                                                      " (in 'meta_cfa_resid_rs', line 82, column 38 to column 46)",
                                                      " (in 'meta_cfa_resid_rs', line 82, column 6 to column 46)",
                                                      " (in 'meta_cfa_resid_rs', line 81, column 20 to line 83, column 5)",
                                                      " (in 'meta_cfa_resid_rs', line 81, column 4 to line 83, column 5)",
                                                      " (in 'meta_cfa_resid_rs', line 80, column 18 to line 84, column 3)",
                                                      " (in 'meta_cfa_resid_rs', line 80, column 2 to line 84, column 3)",
                                                      " (in 'meta_cfa_resid_rs', line 86, column 4 to column 29)",
                                                      " (in 'meta_cfa_resid_rs', line 85, column 26 to line 87, column 3)",
                                                      " (in 'meta_cfa_resid_rs', line 85, column 2 to line 87, column 3)",
                                                      " (in 'meta_cfa_resid_rs', line 90, column 22 to column 27)",
                                                      " (in 'meta_cfa_resid_rs', line 91, column 22 to column 29)",
                                                      " (in 'meta_cfa_resid_rs', line 92, column 9 to column 15)",
                                                      " (in 'meta_cfa_resid_rs', line 93, column 9 to column 11)",
                                                      " (in 'meta_cfa_resid_rs', line 95, column 20 to column 22)",
                                                      " (in 'meta_cfa_resid_rs', line 96, column 23 to column 30)",
                                                      " (in 'meta_cfa_resid_rs', line 97, column 31 to column 34)",
                                                      " (in 'meta_cfa_resid_rs', line 98, column 9 to column 18)",
                                                      " (in 'meta_cfa_resid_rs', line 99, column 20 to column 33)",
                                                      " (in 'meta_cfa_resid_rs', line 100, column 22 to column 35)",
                                                      " (in 'meta_cfa_resid_rs', line 101, column 9 to column 15)",
                                                      " (in 'meta_cfa_resid_rs', line 102, column 9 to column 10)",
                                                      " (in 'meta_cfa_resid_rs', line 103, column 31 to column 36)",
                                                      " (in 'meta_cfa_resid_rs', line 104, column 20 to column 30)",
                                                      " (in 'meta_cfa_resid_rs', line 237, column 9 to column 11)",
                                                      " (in 'meta_cfa_resid_rs', line 237, column 13 to column 15)",
                                                      " (in 'meta_cfa_resid_rs', line 238, column 9 to column 16)",
                                                      " (in 'meta_cfa_resid_rs', line 238, column 18 to column 25)",
                                                      " (in 'meta_cfa_resid_rs', line 239, column 9 to column 11)",
                                                      " (in 'meta_cfa_resid_rs', line 240, column 9 to column 12)",
                                                      " (in 'meta_cfa_resid_rs', line 241, column 9 to column 12)",
                                                      " (in 'meta_cfa_resid_rs', line 242, column 9 to column 11)",
                                                      " (in 'meta_cfa_resid_rs', line 242, column 13 to column 15)",
                                                      " (in 'meta_cfa_resid_rs', line 243, column 9 to column 14)",
                                                      " (in 'meta_cfa_resid_rs', line 246, column 9 to column 10)",
                                                      " (in 'meta_cfa_resid_rs', line 9, column 6 to column 16)",
                                                      " (in 'meta_cfa_resid_rs', line 7, column 6 to column 15)",
                                                      " (in 'meta_cfa_resid_rs', line 6, column 4 to line 9, column 16)",
                                                      " (in 'meta_cfa_resid_rs', line 5, column 19 to line 10, column 3)",
                                                      " (in 'meta_cfa_resid_rs', line 14, column 4 to line 16, column 7)",
                                                      " (in 'meta_cfa_resid_rs', line 11, column 60 to line 17, column 3)",
                                                      " (in 'meta_cfa_resid_rs', line 19, column 4 to line 21, column 6)",
                                                      " (in 'meta_cfa_resid_rs', line 18, column 26 to line 22, column 3)",
                                                      " (in 'meta_cfa_resid_rs', line 24, column 4 to column 58)",
                                                      " (in 'meta_cfa_resid_rs', line 23, column 28 to line 25, column 3)",
                                                      " (in 'meta_cfa_resid_rs', line 27, column 4 to column 20)",
                                                      " (in 'meta_cfa_resid_rs', line 28, column 4 to column 53)",
                                                      " (in 'meta_cfa_resid_rs', line 29, column 4 to line 30, column 60)",
                                                      " (in 'meta_cfa_resid_rs', line 31, column 4 to column 33)",
                                                      " (in 'meta_cfa_resid_rs', line 32, column 4 to column 15)",
                                                      " (in 'meta_cfa_resid_rs', line 26, column 71 to line 33, column 3)"};
template <typename T0__>
int
sign(const T0__& x, std::ostream* pstream__) {
  using local_scalar_t__ = stan::promote_args_t<T0__>;
  const static bool propto__ = true;
  (void) propto__;
  local_scalar_t__ DUMMY_VAR__(std::numeric_limits<double>::quiet_NaN());
  (void) DUMMY_VAR__;  // suppress unused var warning
  
  try {
    current_statement__ = 334;
    if (logical_gt(x, 0)) {
      current_statement__ = 333;
      return 1;
    } else {
      current_statement__ = 332;
      return -1;
    }
  } catch (const std::exception& e) {
    stan::lang::rethrow_located(e, locations_array__[current_statement__]);
      // Next line prevents compiler griping about no return
      throw std::runtime_error("*** IF YOU SEE THIS, PLEASE REPORT A BUG ***"); 
  }
  
}
struct sign_functor__ {
template <typename T0__>
int
operator()(const T0__& x, std::ostream* pstream__)  const 
{
return sign(x, pstream__);
}
};
template <bool propto__, typename T0__, typename T1__>
stan::promote_args_t<stan::value_type_t<T0__>,
T1__>
generalized_double_pareto_lpdf(const T0__& x_arg__, const T1__& alpha,
                               std::ostream* pstream__) {
  using local_scalar_t__ = stan::promote_args_t<stan::value_type_t<T0__>,
          T1__>;
  const auto& x = to_ref(x_arg__);
  local_scalar_t__ DUMMY_VAR__(std::numeric_limits<double>::quiet_NaN());
  (void) DUMMY_VAR__;  // suppress unused var warning
  
  try {
    current_statement__ = 336;
    return sum(
             multiply(-(alpha + 1.0),
               stan::math::log(add(1.0, divide(stan::math::fabs(x), alpha)))));
  } catch (const std::exception& e) {
    stan::lang::rethrow_located(e, locations_array__[current_statement__]);
      // Next line prevents compiler griping about no return
      throw std::runtime_error("*** IF YOU SEE THIS, PLEASE REPORT A BUG ***"); 
  }
  
}
struct generalized_double_pareto_lpdf_functor__ {
template <bool propto__, typename T0__, typename T1__>
stan::promote_args_t<stan::value_type_t<T0__>,
T1__>
operator()(const T0__& x, const T1__& alpha, std::ostream* pstream__)  const 
{
return generalized_double_pareto_lpdf<propto__>(x, alpha, pstream__);
}
};
template <typename T1__>
stan::promote_args_t<T1__>
eff(const int& p, const T1__& x, std::ostream* pstream__) {
  using local_scalar_t__ = stan::promote_args_t<T1__>;
  const static bool propto__ = true;
  (void) propto__;
  local_scalar_t__ DUMMY_VAR__(std::numeric_limits<double>::quiet_NaN());
  (void) DUMMY_VAR__;  // suppress unused var warning
  
  try {
    current_statement__ = 338;
    return (((2 * lmgamma(p, (x / 2))) -
              ((x * p) * stan::math::log((x / 2)))) + (x * p));
  } catch (const std::exception& e) {
    stan::lang::rethrow_located(e, locations_array__[current_statement__]);
      // Next line prevents compiler griping about no return
      throw std::runtime_error("*** IF YOU SEE THIS, PLEASE REPORT A BUG ***"); 
  }
  
}
struct eff_functor__ {
template <typename T1__>
stan::promote_args_t<T1__>
operator()(const int& p, const T1__& x, std::ostream* pstream__)  const 
{
return eff(p, x, pstream__);
}
};
template <typename T0__>
stan::promote_args_t<stan::value_type_t<T0__>>
ln_det_spd(const T0__& S_arg__, std::ostream* pstream__) {
  using local_scalar_t__ = stan::promote_args_t<stan::value_type_t<T0__>>;
  const auto& S = to_ref(S_arg__);
  const static bool propto__ = true;
  (void) propto__;
  local_scalar_t__ DUMMY_VAR__(std::numeric_limits<double>::quiet_NaN());
  (void) DUMMY_VAR__;  // suppress unused var warning
  
  try {
    current_statement__ = 340;
    return (2 * sum(stan::math::log(diagonal(cholesky_decompose(S)))));
  } catch (const std::exception& e) {
    stan::lang::rethrow_located(e, locations_array__[current_statement__]);
      // Next line prevents compiler griping about no return
      throw std::runtime_error("*** IF YOU SEE THIS, PLEASE REPORT A BUG ***"); 
  }
  
}
struct ln_det_spd_functor__ {
template <typename T0__>
stan::promote_args_t<stan::value_type_t<T0__>>
operator()(const T0__& S, std::ostream* pstream__)  const 
{
return ln_det_spd(S, pstream__);
}
};
template <bool propto__, typename T0__, typename T1__, typename T2__,
typename T3__>
stan::promote_args_t<stan::value_type_t<T0__>, stan::value_type_t<T1__>,
T2__,
T3__>
gen_matrix_beta_ii_lpdf(const T0__& S_arg__, const T1__& Omega_arg__,
                        const T2__& n, const T3__& m, std::ostream* pstream__) {
  using local_scalar_t__ = stan::promote_args_t<stan::value_type_t<T0__>,
          stan::value_type_t<T1__>,
          T2__,
          T3__>;
  const auto& S = to_ref(S_arg__);
  const auto& Omega = to_ref(Omega_arg__);
  local_scalar_t__ DUMMY_VAR__(std::numeric_limits<double>::quiet_NaN());
  (void) DUMMY_VAR__;  // suppress unused var warning
  
  try {
    int p;
    p = std::numeric_limits<int>::min();
    
    current_statement__ = 342;
    p = rows(S);
    local_scalar_t__ F_1;
    F_1 = DUMMY_VAR__;
    
    current_statement__ = 343;
    F_1 = ((eff(p, m, pstream__) + eff(p, n, pstream__)) -
            eff(p, (m + n), pstream__));
    local_scalar_t__ F_2;
    F_2 = DUMMY_VAR__;
    
    current_statement__ = 344;
    F_2 = ((-(((n - p) - 1) * ln_det_spd(S, pstream__)) -
             (m * ln_det_spd(Omega, pstream__))) +
            ((m + n) *
              ln_det_spd(
                divide(add(multiply(m, Omega), multiply(n, S)), (m + n)), pstream__)));
    local_scalar_t__ ll;
    ll = DUMMY_VAR__;
    
    current_statement__ = 345;
    ll = ((F_1 + F_2) / -2.0);
    current_statement__ = 346;
    return ll;
  } catch (const std::exception& e) {
    stan::lang::rethrow_located(e, locations_array__[current_statement__]);
      // Next line prevents compiler griping about no return
      throw std::runtime_error("*** IF YOU SEE THIS, PLEASE REPORT A BUG ***"); 
  }
  
}
struct gen_matrix_beta_ii_lpdf_functor__ {
template <bool propto__, typename T0__, typename T1__, typename T2__,
typename T3__>
stan::promote_args_t<stan::value_type_t<T0__>, stan::value_type_t<T1__>,
T2__,
T3__>
operator()(const T0__& S, const T1__& Omega, const T2__& n, const T3__& m,
           std::ostream* pstream__)  const 
{
return gen_matrix_beta_ii_lpdf<propto__>(S, Omega, n, m, pstream__);
}
};
#include <stan_meta_header.hpp>
class model_meta_cfa_resid_rs final : public model_base_crtp<model_meta_cfa_resid_rs> {
private:
  int Ng;
  std::vector<int> Np;
  int Ni;
  std::vector<Eigen::Matrix<double, -1, -1>> S;
  int Nf;
  int Nce;
  std::vector<std::vector<int>> error_mat;
  Eigen::Matrix<double, -1, -1> loading_pattern;
  std::vector<int> markers;
  int corr_fac;
  double shape_phi_c;
  double sl_par;
  double rs_par;
  double rc_par;
  int method;
  int complex_struc;
  int Nmiss;
  int Nitem_miss;
  std::vector<std::vector<int>> valid_var;
  std::vector<std::vector<int>> miss_ind;
  int p;
  Eigen::Matrix<double, -1, -1> X;
  double mln_par;
  double mlb_par;
  int type;
  double sqrt_two;
  double pi_sqrt_three;
  int Nl;
  int Nf_corr;
  int Nisqd2;
  int N_rms;
  int N_alpha;
  int N_complex;
  int N_type;
 
public:
  ~model_meta_cfa_resid_rs() { }
  
  inline std::string model_name() const final { return "model_meta_cfa_resid_rs"; }
  inline std::vector<std::string> model_compile_info() const noexcept {
    return std::vector<std::string>{"stanc_version = %%NAME%%3 %%VERSION%%", "stancflags = "};
  }
  
  
  model_meta_cfa_resid_rs(stan::io::var_context& context__,
                          unsigned int random_seed__ = 0,
                          std::ostream* pstream__ = nullptr) : model_base_crtp(0) {
    using local_scalar_t__ = double ;
    boost::ecuyer1988 base_rng__ = 
        stan::services::util::create_rng(random_seed__, 0);
    (void) base_rng__;  // suppress unused var warning
    static const char* function__ = "model_meta_cfa_resid_rs_namespace::model_meta_cfa_resid_rs";
    (void) function__;  // suppress unused var warning
    local_scalar_t__ DUMMY_VAR__(std::numeric_limits<double>::quiet_NaN());
    (void) DUMMY_VAR__;  // suppress unused var warning
    
    try {
      int pos__;
      pos__ = std::numeric_limits<int>::min();
      
      pos__ = 1;
      current_statement__ = 240;
      context__.validate_dims("data initialization","Ng","int",
          context__.to_vec());
      Ng = std::numeric_limits<int>::min();
      
      current_statement__ = 240;
      Ng = context__.vals_i("Ng")[(1 - 1)];
      current_statement__ = 240;
      current_statement__ = 240;
      check_greater_or_equal(function__, "Ng", Ng, 0);
      current_statement__ = 241;
      validate_non_negative_index("Np", "Ng", Ng);
      current_statement__ = 242;
      context__.validate_dims("data initialization","Np","int",
          context__.to_vec(Ng));
      Np = std::vector<int>(Ng, std::numeric_limits<int>::min());
      
      current_statement__ = 242;
      assign(Np, nil_index_list(), context__.vals_i("Np"),
        "assigning variable Np");
      current_statement__ = 242;
      for (int sym1__ = 1; sym1__ <= Ng; ++sym1__) {
        current_statement__ = 242;
        current_statement__ = 242;
        check_greater_or_equal(function__, "Np[sym1__]", Np[(sym1__ - 1)], 0);
      }
      current_statement__ = 243;
      context__.validate_dims("data initialization","Ni","int",
          context__.to_vec());
      Ni = std::numeric_limits<int>::min();
      
      current_statement__ = 243;
      Ni = context__.vals_i("Ni")[(1 - 1)];
      current_statement__ = 243;
      current_statement__ = 243;
      check_greater_or_equal(function__, "Ni", Ni, 0);
      current_statement__ = 244;
      validate_non_negative_index("S", "Ng", Ng);
      current_statement__ = 245;
      validate_non_negative_index("S", "Ni", Ni);
      current_statement__ = 246;
      validate_non_negative_index("S", "Ni", Ni);
      current_statement__ = 247;
      context__.validate_dims("data initialization","S","double",
          context__.to_vec(Ng, Ni, Ni));
      S = std::vector<Eigen::Matrix<double, -1, -1>>(Ng, Eigen::Matrix<double, -1, -1>(Ni, Ni));
      stan::math::fill(S, std::numeric_limits<double>::quiet_NaN());
      
      {
        std::vector<local_scalar_t__> S_flat__;
        current_statement__ = 247;
        assign(S_flat__, nil_index_list(), context__.vals_r("S"),
          "assigning variable S_flat__");
        current_statement__ = 247;
        pos__ = 1;
        current_statement__ = 247;
        for (int sym1__ = 1; sym1__ <= Ni; ++sym1__) {
          current_statement__ = 247;
          for (int sym2__ = 1; sym2__ <= Ni; ++sym2__) {
            current_statement__ = 247;
            for (int sym3__ = 1; sym3__ <= Ng; ++sym3__) {
              current_statement__ = 247;
              assign(S,
                cons_list(index_uni(sym3__),
                  cons_list(index_uni(sym2__),
                    cons_list(index_uni(sym1__), nil_index_list()))),
                S_flat__[(pos__ - 1)], "assigning variable S");
              current_statement__ = 247;
              pos__ = (pos__ + 1);}}}
      }
      current_statement__ = 248;
      context__.validate_dims("data initialization","Nf","int",
          context__.to_vec());
      Nf = std::numeric_limits<int>::min();
      
      current_statement__ = 248;
      Nf = context__.vals_i("Nf")[(1 - 1)];
      current_statement__ = 248;
      current_statement__ = 248;
      check_greater_or_equal(function__, "Nf", Nf, 0);
      current_statement__ = 249;
      context__.validate_dims("data initialization","Nce","int",
          context__.to_vec());
      Nce = std::numeric_limits<int>::min();
      
      current_statement__ = 249;
      Nce = context__.vals_i("Nce")[(1 - 1)];
      current_statement__ = 249;
      current_statement__ = 249;
      check_greater_or_equal(function__, "Nce", Nce, 0);
      current_statement__ = 250;
      validate_non_negative_index("error_mat", "Nce", Nce);
      current_statement__ = 251;
      context__.validate_dims("data initialization","error_mat","int",
          context__.to_vec(Nce, 2));
      error_mat = std::vector<std::vector<int>>(Nce, std::vector<int>(2, std::numeric_limits<int>::min()));
      
      {
        std::vector<int> error_mat_flat__;
        current_statement__ = 251;
        assign(error_mat_flat__, nil_index_list(),
          context__.vals_i("error_mat"),
          "assigning variable error_mat_flat__");
        current_statement__ = 251;
        pos__ = 1;
        current_statement__ = 251;
        for (int sym1__ = 1; sym1__ <= 2; ++sym1__) {
          current_statement__ = 251;
          for (int sym2__ = 1; sym2__ <= Nce; ++sym2__) {
            current_statement__ = 251;
            assign(error_mat,
              cons_list(index_uni(sym2__),
                cons_list(index_uni(sym1__), nil_index_list())),
              error_mat_flat__[(pos__ - 1)], "assigning variable error_mat");
            current_statement__ = 251;
            pos__ = (pos__ + 1);}}
      }
      current_statement__ = 252;
      validate_non_negative_index("loading_pattern", "Ni", Ni);
      current_statement__ = 253;
      validate_non_negative_index("loading_pattern", "Nf", Nf);
      current_statement__ = 254;
      context__.validate_dims("data initialization","loading_pattern",
          "double",context__.to_vec(Ni, Nf));
      loading_pattern = Eigen::Matrix<double, -1, -1>(Ni, Nf);
      stan::math::fill(loading_pattern, std::numeric_limits<double>::quiet_NaN());
      
      {
        std::vector<local_scalar_t__> loading_pattern_flat__;
        current_statement__ = 254;
        assign(loading_pattern_flat__, nil_index_list(),
          context__.vals_r("loading_pattern"),
          "assigning variable loading_pattern_flat__");
        current_statement__ = 254;
        pos__ = 1;
        current_statement__ = 254;
        for (int sym1__ = 1; sym1__ <= Nf; ++sym1__) {
          current_statement__ = 254;
          for (int sym2__ = 1; sym2__ <= Ni; ++sym2__) {
            current_statement__ = 254;
            assign(loading_pattern,
              cons_list(index_uni(sym2__),
                cons_list(index_uni(sym1__), nil_index_list())),
              loading_pattern_flat__[(pos__ - 1)],
              "assigning variable loading_pattern");
            current_statement__ = 254;
            pos__ = (pos__ + 1);}}
      }
      current_statement__ = 255;
      validate_non_negative_index("markers", "Nf", Nf);
      current_statement__ = 256;
      context__.validate_dims("data initialization","markers","int",
          context__.to_vec(Nf));
      markers = std::vector<int>(Nf, std::numeric_limits<int>::min());
      
      current_statement__ = 256;
      assign(markers, nil_index_list(), context__.vals_i("markers"),
        "assigning variable markers");
      current_statement__ = 257;
      context__.validate_dims("data initialization","corr_fac","int",
          context__.to_vec());
      corr_fac = std::numeric_limits<int>::min();
      
      current_statement__ = 257;
      corr_fac = context__.vals_i("corr_fac")[(1 - 1)];
      current_statement__ = 257;
      current_statement__ = 257;
      check_greater_or_equal(function__, "corr_fac", corr_fac, 0);
      current_statement__ = 257;
      current_statement__ = 257;
      check_less_or_equal(function__, "corr_fac", corr_fac, 1);
      current_statement__ = 258;
      context__.validate_dims("data initialization","shape_phi_c","double",
          context__.to_vec());
      shape_phi_c = std::numeric_limits<double>::quiet_NaN();
      
      current_statement__ = 258;
      shape_phi_c = context__.vals_r("shape_phi_c")[(1 - 1)];
      current_statement__ = 258;
      current_statement__ = 258;
      check_greater_or_equal(function__, "shape_phi_c", shape_phi_c, 1);
      current_statement__ = 259;
      context__.validate_dims("data initialization","sl_par","double",
          context__.to_vec());
      sl_par = std::numeric_limits<double>::quiet_NaN();
      
      current_statement__ = 259;
      sl_par = context__.vals_r("sl_par")[(1 - 1)];
      current_statement__ = 259;
      current_statement__ = 259;
      check_greater_or_equal(function__, "sl_par", sl_par, 0);
      current_statement__ = 260;
      context__.validate_dims("data initialization","rs_par","double",
          context__.to_vec());
      rs_par = std::numeric_limits<double>::quiet_NaN();
      
      current_statement__ = 260;
      rs_par = context__.vals_r("rs_par")[(1 - 1)];
      current_statement__ = 260;
      current_statement__ = 260;
      check_greater_or_equal(function__, "rs_par", rs_par, 0);
      current_statement__ = 261;
      context__.validate_dims("data initialization","rc_par","double",
          context__.to_vec());
      rc_par = std::numeric_limits<double>::quiet_NaN();
      
      current_statement__ = 261;
      rc_par = context__.vals_r("rc_par")[(1 - 1)];
      current_statement__ = 261;
      current_statement__ = 261;
      check_greater_or_equal(function__, "rc_par", rc_par, 1);
      current_statement__ = 262;
      context__.validate_dims("data initialization","method","int",
          context__.to_vec());
      method = std::numeric_limits<int>::min();
      
      current_statement__ = 262;
      method = context__.vals_i("method")[(1 - 1)];
      current_statement__ = 262;
      current_statement__ = 262;
      check_greater_or_equal(function__, "method", method, 1);
      current_statement__ = 262;
      current_statement__ = 262;
      check_less_or_equal(function__, "method", method, 100);
      current_statement__ = 263;
      context__.validate_dims("data initialization","complex_struc","int",
          context__.to_vec());
      complex_struc = std::numeric_limits<int>::min();
      
      current_statement__ = 263;
      complex_struc = context__.vals_i("complex_struc")[(1 - 1)];
      current_statement__ = 263;
      current_statement__ = 263;
      check_greater_or_equal(function__, "complex_struc", complex_struc, 0);
      current_statement__ = 263;
      current_statement__ = 263;
      check_less_or_equal(function__, "complex_struc", complex_struc, 1);
      current_statement__ = 264;
      context__.validate_dims("data initialization","Nmiss","int",
          context__.to_vec());
      Nmiss = std::numeric_limits<int>::min();
      
      current_statement__ = 264;
      Nmiss = context__.vals_i("Nmiss")[(1 - 1)];
      current_statement__ = 265;
      context__.validate_dims("data initialization","Nitem_miss","int",
          context__.to_vec());
      Nitem_miss = std::numeric_limits<int>::min();
      
      current_statement__ = 265;
      Nitem_miss = context__.vals_i("Nitem_miss")[(1 - 1)];
      current_statement__ = 266;
      validate_non_negative_index("valid_var", "Ni", Ni);
      current_statement__ = 267;
      validate_non_negative_index("valid_var", "Ng", Ng);
      current_statement__ = 268;
      context__.validate_dims("data initialization","valid_var","int",
          context__.to_vec(Ni, Ng));
      valid_var = std::vector<std::vector<int>>(Ni, std::vector<int>(Ng, std::numeric_limits<int>::min()));
      
      {
        std::vector<int> valid_var_flat__;
        current_statement__ = 268;
        assign(valid_var_flat__, nil_index_list(),
          context__.vals_i("valid_var"),
          "assigning variable valid_var_flat__");
        current_statement__ = 268;
        pos__ = 1;
        current_statement__ = 268;
        for (int sym1__ = 1; sym1__ <= Ng; ++sym1__) {
          current_statement__ = 268;
          for (int sym2__ = 1; sym2__ <= Ni; ++sym2__) {
            current_statement__ = 268;
            assign(valid_var,
              cons_list(index_uni(sym2__),
                cons_list(index_uni(sym1__), nil_index_list())),
              valid_var_flat__[(pos__ - 1)], "assigning variable valid_var");
            current_statement__ = 268;
            pos__ = (pos__ + 1);}}
      }
      current_statement__ = 269;
      validate_non_negative_index("miss_ind", "Ni", Ni);
      current_statement__ = 270;
      validate_non_negative_index("miss_ind", "Ng", Ng);
      current_statement__ = 271;
      context__.validate_dims("data initialization","miss_ind","int",
          context__.to_vec(Ni, Ng));
      miss_ind = std::vector<std::vector<int>>(Ni, std::vector<int>(Ng, std::numeric_limits<int>::min()));
      
      {
        std::vector<int> miss_ind_flat__;
        current_statement__ = 271;
        assign(miss_ind_flat__, nil_index_list(),
          context__.vals_i("miss_ind"), "assigning variable miss_ind_flat__");
        current_statement__ = 271;
        pos__ = 1;
        current_statement__ = 271;
        for (int sym1__ = 1; sym1__ <= Ng; ++sym1__) {
          current_statement__ = 271;
          for (int sym2__ = 1; sym2__ <= Ni; ++sym2__) {
            current_statement__ = 271;
            assign(miss_ind,
              cons_list(index_uni(sym2__),
                cons_list(index_uni(sym1__), nil_index_list())),
              miss_ind_flat__[(pos__ - 1)], "assigning variable miss_ind");
            current_statement__ = 271;
            pos__ = (pos__ + 1);}}
      }
      current_statement__ = 272;
      context__.validate_dims("data initialization","p","int",
          context__.to_vec());
      p = std::numeric_limits<int>::min();
      
      current_statement__ = 272;
      p = context__.vals_i("p")[(1 - 1)];
      current_statement__ = 273;
      validate_non_negative_index("X", "Ng", Ng);
      current_statement__ = 274;
      validate_non_negative_index("X", "p", p);
      current_statement__ = 275;
      context__.validate_dims("data initialization","X","double",
          context__.to_vec(Ng, p));
      X = Eigen::Matrix<double, -1, -1>(Ng, p);
      stan::math::fill(X, std::numeric_limits<double>::quiet_NaN());
      
      {
        std::vector<local_scalar_t__> X_flat__;
        current_statement__ = 275;
        assign(X_flat__, nil_index_list(), context__.vals_r("X"),
          "assigning variable X_flat__");
        current_statement__ = 275;
        pos__ = 1;
        current_statement__ = 275;
        for (int sym1__ = 1; sym1__ <= p; ++sym1__) {
          current_statement__ = 275;
          for (int sym2__ = 1; sym2__ <= Ng; ++sym2__) {
            current_statement__ = 275;
            assign(X,
              cons_list(index_uni(sym2__),
                cons_list(index_uni(sym1__), nil_index_list())),
              X_flat__[(pos__ - 1)], "assigning variable X");
            current_statement__ = 275;
            pos__ = (pos__ + 1);}}
      }
      current_statement__ = 276;
      context__.validate_dims("data initialization","mln_par","double",
          context__.to_vec());
      mln_par = std::numeric_limits<double>::quiet_NaN();
      
      current_statement__ = 276;
      mln_par = context__.vals_r("mln_par")[(1 - 1)];
      current_statement__ = 276;
      current_statement__ = 276;
      check_greater_or_equal(function__, "mln_par", mln_par, 0);
      current_statement__ = 277;
      context__.validate_dims("data initialization","mlb_par","double",
          context__.to_vec());
      mlb_par = std::numeric_limits<double>::quiet_NaN();
      
      current_statement__ = 277;
      mlb_par = context__.vals_r("mlb_par")[(1 - 1)];
      current_statement__ = 277;
      current_statement__ = 277;
      check_greater_or_equal(function__, "mlb_par", mlb_par, 0);
      current_statement__ = 278;
      context__.validate_dims("data initialization","type","int",
          context__.to_vec());
      type = std::numeric_limits<int>::min();
      
      current_statement__ = 278;
      type = context__.vals_i("type")[(1 - 1)];
      current_statement__ = 278;
      current_statement__ = 278;
      check_greater_or_equal(function__, "type", type, 1);
      current_statement__ = 278;
      current_statement__ = 278;
      check_less_or_equal(function__, "type", type, 3);
      current_statement__ = 279;
      sqrt_two = std::numeric_limits<double>::quiet_NaN();
      
      current_statement__ = 279;
      sqrt_two = stan::math::sqrt(2.0);
      current_statement__ = 280;
      pi_sqrt_three = std::numeric_limits<double>::quiet_NaN();
      
      current_statement__ = 280;
      pi_sqrt_three = (stan::math::pi() / stan::math::sqrt(3.0));
      current_statement__ = 281;
      Nl = std::numeric_limits<int>::min();
      
      current_statement__ = 281;
      Nl = 0;
      current_statement__ = 282;
      Nf_corr = std::numeric_limits<int>::min();
      
      current_statement__ = 282;
      Nf_corr = (logical_eq(corr_fac, 1) ? Nf : 1);
      current_statement__ = 283;
      Nisqd2 = std::numeric_limits<int>::min();
      
      current_statement__ = 283;
      Nisqd2 = ((Ni * (Ni - 1)) / 2);
      current_statement__ = 284;
      N_rms = std::numeric_limits<int>::min();
      
      current_statement__ = 284;
      N_rms = 1;
      current_statement__ = 285;
      N_alpha = std::numeric_limits<int>::min();
      
      current_statement__ = 285;
      N_alpha = 0;
      current_statement__ = 286;
      N_complex = std::numeric_limits<int>::min();
      
      current_statement__ = 286;
      N_complex = 0;
      current_statement__ = 287;
      N_type = std::numeric_limits<int>::min();
      
      current_statement__ = 287;
      N_type = 1;
      current_statement__ = 290;
      if (logical_gte(method, 90)) {
        current_statement__ = 288;
        Nisqd2 = 0;
      } 
      current_statement__ = 293;
      if (logical_eq(method, 100)) {
        current_statement__ = 291;
        N_rms = 0;
      } 
      current_statement__ = 295;
      if (logical_eq(method, 4)) {
        current_statement__ = 294;
        N_alpha = 1;
      } 
      current_statement__ = 297;
      if (logical_lt(type, 2)) {
        current_statement__ = 296;
        N_type = 0;
      } 
      current_statement__ = 303;
      for (int i = 1; i <= Ni; ++i) {
        current_statement__ = 301;
        for (int j = 1; j <= Nf; ++j) {
          current_statement__ = 299;
          if (logical_eq(
                rvalue(loading_pattern,
                  cons_list(index_uni(i),
                    cons_list(index_uni(j), nil_index_list())),
                  "loading_pattern"), 1)) {
            current_statement__ = 298;
            Nl = (Nl + 1);
          } }}
      current_statement__ = 306;
      if (logical_eq(complex_struc, 1)) {
        current_statement__ = 304;
        N_complex = ((Ni * Nf) - Nl);
      } 
      current_statement__ = 281;
      current_statement__ = 281;
      check_greater_or_equal(function__, "Nl", Nl, 0);
      current_statement__ = 307;
      validate_non_negative_index("rms_src_p", "N_rms", N_rms);
      current_statement__ = 308;
      validate_non_negative_index("gdp_alpha", "N_alpha", N_alpha);
      current_statement__ = 309;
      validate_non_negative_index("resids", "Nisqd2", Nisqd2);
      current_statement__ = 310;
      validate_non_negative_index("loadings", "Nl", Nl);
      current_statement__ = 311;
      validate_non_negative_index("res_sds", "Ni", Ni);
      current_statement__ = 312;
      validate_non_negative_index("phi_mat_chol", "Nf_corr", Nf_corr);
      current_statement__ = 312;
      validate_non_negative_index("phi_mat_chol", "Nf_corr", Nf_corr);
      current_statement__ = 313;
      validate_non_negative_index("res_cor_01", "Nce", Nce);
      current_statement__ = 314;
      validate_non_negative_index("loadings_complex", "N_complex", N_complex);
      current_statement__ = 315;
      validate_non_negative_index("sigma_loadings_complex", "complex_struc",
                                  complex_struc);
      current_statement__ = 316;
      validate_non_negative_index("gdp_loadings_complex", "complex_struc",
                                  complex_struc);
      current_statement__ = 317;
      validate_non_negative_index("m_ln_int", "N_type", N_type);
      current_statement__ = 318;
      validate_non_negative_index("m_ln_beta", "p", p);
      current_statement__ = 319;
      validate_non_negative_index("miss_cor_01", "Nmiss", Nmiss);
      current_statement__ = 320;
      validate_non_negative_index("var_shifts", "Nitem_miss", Nitem_miss);
      current_statement__ = 321;
      validate_non_negative_index("Load_mat", "Ni", Ni);
      current_statement__ = 322;
      validate_non_negative_index("Load_mat", "Nf", Nf);
      current_statement__ = 323;
      validate_non_negative_index("phi_mat", "Nf_corr", Nf_corr);
      current_statement__ = 324;
      validate_non_negative_index("phi_mat", "Nf_corr", Nf_corr);
      current_statement__ = 325;
      validate_non_negative_index("res_var", "Ni", Ni);
      current_statement__ = 326;
      validate_non_negative_index("res_cor", "Nce", Nce);
      current_statement__ = 327;
      validate_non_negative_index("res_cov", "Nce", Nce);
      current_statement__ = 328;
      validate_non_negative_index("Resid", "Ni", Ni);
      current_statement__ = 329;
      validate_non_negative_index("Resid", "Ni", Ni);
      current_statement__ = 330;
      validate_non_negative_index("miss_cor", "Nmiss", Nmiss);
      current_statement__ = 331;
      validate_non_negative_index("rmsea_beta", "p", p);
    } catch (const std::exception& e) {
      stan::lang::rethrow_located(e, locations_array__[current_statement__]);
      // Next line prevents compiler griping about no return
      throw std::runtime_error("*** IF YOU SEE THIS, PLEASE REPORT A BUG ***"); 
    }
    num_params_r__ = 0U;
    
    try {
      num_params_r__ += N_rms;
      num_params_r__ += N_alpha;
      num_params_r__ += Nisqd2;
      num_params_r__ += Nl;
      num_params_r__ += 1;
      num_params_r__ += Ni;
      num_params_r__ += ((Nf_corr * (Nf_corr - 1)) / 2);
      num_params_r__ += Nce;
      num_params_r__ += N_complex;
      num_params_r__ += complex_struc;
      num_params_r__ += complex_struc;
      num_params_r__ += N_type;
      num_params_r__ += p;
      num_params_r__ += Nmiss;
      num_params_r__ += Nitem_miss;
    } catch (const std::exception& e) {
      stan::lang::rethrow_located(e, locations_array__[current_statement__]);
      // Next line prevents compiler griping about no return
      throw std::runtime_error("*** IF YOU SEE THIS, PLEASE REPORT A BUG ***"); 
    }
  }
  template <bool propto__, bool jacobian__, typename VecR, typename VecI, stan::require_vector_like_t<VecR>* = nullptr, stan::require_vector_like_vt<std::is_integral, VecI>* = nullptr>
  inline stan::scalar_type_t<VecR> log_prob_impl(VecR& params_r__,
                                                 VecI& params_i__,
                                                 std::ostream* pstream__ = nullptr) const {
    using T__ = stan::scalar_type_t<VecR>;
    using local_scalar_t__ = T__;
    T__ lp__(0.0);
    stan::math::accumulator<T__> lp_accum__;
    static const char* function__ = "model_meta_cfa_resid_rs_namespace::log_prob";
(void) function__;  // suppress unused var warning
    stan::io::reader<local_scalar_t__> in__(params_r__, params_i__);
    local_scalar_t__ DUMMY_VAR__(std::numeric_limits<double>::quiet_NaN());
    (void) DUMMY_VAR__;  // suppress unused var warning
    
    try {
      Eigen::Matrix<local_scalar_t__, -1, 1> rms_src_p;
      rms_src_p = Eigen::Matrix<local_scalar_t__, -1, 1>(N_rms);
      stan::math::fill(rms_src_p, DUMMY_VAR__);
      
      current_statement__ = 1;
      rms_src_p = in__.vector(N_rms);
      current_statement__ = 1;
      for (int sym1__ = 1; sym1__ <= N_rms; ++sym1__) {
        current_statement__ = 1;
        if (jacobian__) {
          current_statement__ = 1;
          assign(rms_src_p, cons_list(index_uni(sym1__), nil_index_list()),
            stan::math::lb_constrain(rms_src_p[(sym1__ - 1)], 0.0, lp__),
            "assigning variable rms_src_p");
        } else {
          current_statement__ = 1;
          assign(rms_src_p, cons_list(index_uni(sym1__), nil_index_list()),
            stan::math::lb_constrain(rms_src_p[(sym1__ - 1)], 0.0),
            "assigning variable rms_src_p");
        }}
      Eigen::Matrix<local_scalar_t__, -1, 1> gdp_alpha;
      gdp_alpha = Eigen::Matrix<local_scalar_t__, -1, 1>(N_alpha);
      stan::math::fill(gdp_alpha, DUMMY_VAR__);
      
      current_statement__ = 2;
      gdp_alpha = in__.vector(N_alpha);
      current_statement__ = 2;
      for (int sym1__ = 1; sym1__ <= N_alpha; ++sym1__) {
        current_statement__ = 2;
        if (jacobian__) {
          current_statement__ = 2;
          assign(gdp_alpha, cons_list(index_uni(sym1__), nil_index_list()),
            stan::math::lb_constrain(gdp_alpha[(sym1__ - 1)], 2.0, lp__),
            "assigning variable gdp_alpha");
        } else {
          current_statement__ = 2;
          assign(gdp_alpha, cons_list(index_uni(sym1__), nil_index_list()),
            stan::math::lb_constrain(gdp_alpha[(sym1__ - 1)], 2.0),
            "assigning variable gdp_alpha");
        }}
      Eigen::Matrix<local_scalar_t__, -1, 1> resids;
      resids = Eigen::Matrix<local_scalar_t__, -1, 1>(Nisqd2);
      stan::math::fill(resids, DUMMY_VAR__);
      
      current_statement__ = 3;
      resids = in__.vector(Nisqd2);
      Eigen::Matrix<local_scalar_t__, -1, 1> loadings;
      loadings = Eigen::Matrix<local_scalar_t__, -1, 1>(Nl);
      stan::math::fill(loadings, DUMMY_VAR__);
      
      current_statement__ = 4;
      loadings = in__.vector(Nl);
      local_scalar_t__ sigma_loadings;
      sigma_loadings = DUMMY_VAR__;
      
      current_statement__ = 5;
      sigma_loadings = in__.scalar();
      current_statement__ = 5;
      if (jacobian__) {
        current_statement__ = 5;
        sigma_loadings = stan::math::lb_constrain(sigma_loadings, 0, lp__);
      } else {
        current_statement__ = 5;
        sigma_loadings = stan::math::lb_constrain(sigma_loadings, 0);
      }
      Eigen::Matrix<local_scalar_t__, -1, 1> res_sds;
      res_sds = Eigen::Matrix<local_scalar_t__, -1, 1>(Ni);
      stan::math::fill(res_sds, DUMMY_VAR__);
      
      current_statement__ = 6;
      res_sds = in__.vector(Ni);
      current_statement__ = 6;
      for (int sym1__ = 1; sym1__ <= Ni; ++sym1__) {
        current_statement__ = 6;
        if (jacobian__) {
          current_statement__ = 6;
          assign(res_sds, cons_list(index_uni(sym1__), nil_index_list()),
            stan::math::lb_constrain(res_sds[(sym1__ - 1)], 0, lp__),
            "assigning variable res_sds");
        } else {
          current_statement__ = 6;
          assign(res_sds, cons_list(index_uni(sym1__), nil_index_list()),
            stan::math::lb_constrain(res_sds[(sym1__ - 1)], 0),
            "assigning variable res_sds");
        }}
      Eigen::Matrix<local_scalar_t__, -1, -1> phi_mat_chol;
      phi_mat_chol = Eigen::Matrix<local_scalar_t__, -1, -1>(Nf_corr, Nf_corr);
      stan::math::fill(phi_mat_chol, DUMMY_VAR__);
      
      Eigen::Matrix<local_scalar_t__, -1, 1> phi_mat_chol_in__;
      phi_mat_chol_in__ = Eigen::Matrix<local_scalar_t__, -1, 1>(((Nf_corr *
                                                                    (Nf_corr
                                                                    - 1)) /
                                                                   2));
      stan::math::fill(phi_mat_chol_in__, DUMMY_VAR__);
      
      current_statement__ = 7;
      phi_mat_chol_in__ = in__.vector(((Nf_corr * (Nf_corr - 1)) / 2));
      current_statement__ = 7;
      if (jacobian__) {
        current_statement__ = 7;
        assign(phi_mat_chol, nil_index_list(),
          stan::math::cholesky_corr_constrain(phi_mat_chol_in__, Nf_corr,
            lp__), "assigning variable phi_mat_chol");
      } else {
        current_statement__ = 7;
        assign(phi_mat_chol, nil_index_list(),
          stan::math::cholesky_corr_constrain(phi_mat_chol_in__, Nf_corr),
          "assigning variable phi_mat_chol");
      }
      Eigen::Matrix<local_scalar_t__, -1, 1> res_cor_01;
      res_cor_01 = Eigen::Matrix<local_scalar_t__, -1, 1>(Nce);
      stan::math::fill(res_cor_01, DUMMY_VAR__);
      
      current_statement__ = 8;
      res_cor_01 = in__.vector(Nce);
      current_statement__ = 8;
      for (int sym1__ = 1; sym1__ <= Nce; ++sym1__) {
        current_statement__ = 8;
        if (jacobian__) {
          current_statement__ = 8;
          assign(res_cor_01, cons_list(index_uni(sym1__), nil_index_list()),
            stan::math::lub_constrain(res_cor_01[(sym1__ - 1)], 0, 1, lp__),
            "assigning variable res_cor_01");
        } else {
          current_statement__ = 8;
          assign(res_cor_01, cons_list(index_uni(sym1__), nil_index_list()),
            stan::math::lub_constrain(res_cor_01[(sym1__ - 1)], 0, 1),
            "assigning variable res_cor_01");
        }}
      Eigen::Matrix<local_scalar_t__, -1, 1> loadings_complex;
      loadings_complex = Eigen::Matrix<local_scalar_t__, -1, 1>(N_complex);
      stan::math::fill(loadings_complex, DUMMY_VAR__);
      
      current_statement__ = 9;
      loadings_complex = in__.vector(N_complex);
      Eigen::Matrix<local_scalar_t__, -1, 1> sigma_loadings_complex;
      sigma_loadings_complex = Eigen::Matrix<local_scalar_t__, -1, 1>(complex_struc);
      stan::math::fill(sigma_loadings_complex, DUMMY_VAR__);
      
      current_statement__ = 10;
      sigma_loadings_complex = in__.vector(complex_struc);
      current_statement__ = 10;
      for (int sym1__ = 1; sym1__ <= complex_struc; ++sym1__) {
        current_statement__ = 10;
        if (jacobian__) {
          current_statement__ = 10;
          assign(sigma_loadings_complex,
            cons_list(index_uni(sym1__), nil_index_list()),
            stan::math::lb_constrain(sigma_loadings_complex[(sym1__ - 1)], 0,
              lp__), "assigning variable sigma_loadings_complex");
        } else {
          current_statement__ = 10;
          assign(sigma_loadings_complex,
            cons_list(index_uni(sym1__), nil_index_list()),
            stan::math::lb_constrain(sigma_loadings_complex[(sym1__ - 1)], 0),
            "assigning variable sigma_loadings_complex");
        }}
      Eigen::Matrix<local_scalar_t__, -1, 1> gdp_loadings_complex;
      gdp_loadings_complex = Eigen::Matrix<local_scalar_t__, -1, 1>(complex_struc);
      stan::math::fill(gdp_loadings_complex, DUMMY_VAR__);
      
      current_statement__ = 11;
      gdp_loadings_complex = in__.vector(complex_struc);
      current_statement__ = 11;
      for (int sym1__ = 1; sym1__ <= complex_struc; ++sym1__) {
        current_statement__ = 11;
        if (jacobian__) {
          current_statement__ = 11;
          assign(gdp_loadings_complex,
            cons_list(index_uni(sym1__), nil_index_list()),
            stan::math::lb_constrain(gdp_loadings_complex[(sym1__ - 1)], 2.0,
              lp__), "assigning variable gdp_loadings_complex");
        } else {
          current_statement__ = 11;
          assign(gdp_loadings_complex,
            cons_list(index_uni(sym1__), nil_index_list()),
            stan::math::lb_constrain(gdp_loadings_complex[(sym1__ - 1)], 2.0),
            "assigning variable gdp_loadings_complex");
        }}
      Eigen::Matrix<local_scalar_t__, -1, 1> m_ln_int;
      m_ln_int = Eigen::Matrix<local_scalar_t__, -1, 1>(N_type);
      stan::math::fill(m_ln_int, DUMMY_VAR__);
      
      current_statement__ = 12;
      m_ln_int = in__.vector(N_type);
      Eigen::Matrix<local_scalar_t__, -1, 1> m_ln_beta;
      m_ln_beta = Eigen::Matrix<local_scalar_t__, -1, 1>(p);
      stan::math::fill(m_ln_beta, DUMMY_VAR__);
      
      current_statement__ = 13;
      m_ln_beta = in__.vector(p);
      Eigen::Matrix<local_scalar_t__, -1, 1> miss_cor_01;
      miss_cor_01 = Eigen::Matrix<local_scalar_t__, -1, 1>(Nmiss);
      stan::math::fill(miss_cor_01, DUMMY_VAR__);
      
      current_statement__ = 14;
      miss_cor_01 = in__.vector(Nmiss);
      current_statement__ = 14;
      for (int sym1__ = 1; sym1__ <= Nmiss; ++sym1__) {
        current_statement__ = 14;
        if (jacobian__) {
          current_statement__ = 14;
          assign(miss_cor_01, cons_list(index_uni(sym1__), nil_index_list()),
            stan::math::lub_constrain(miss_cor_01[(sym1__ - 1)], 0, 1, lp__),
            "assigning variable miss_cor_01");
        } else {
          current_statement__ = 14;
          assign(miss_cor_01, cons_list(index_uni(sym1__), nil_index_list()),
            stan::math::lub_constrain(miss_cor_01[(sym1__ - 1)], 0, 1),
            "assigning variable miss_cor_01");
        }}
      Eigen::Matrix<local_scalar_t__, -1, 1> var_shifts;
      var_shifts = Eigen::Matrix<local_scalar_t__, -1, 1>(Nitem_miss);
      stan::math::fill(var_shifts, DUMMY_VAR__);
      
      current_statement__ = 15;
      var_shifts = in__.vector(Nitem_miss);
      current_statement__ = 15;
      for (int sym1__ = 1; sym1__ <= Nitem_miss; ++sym1__) {
        current_statement__ = 15;
        if (jacobian__) {
          current_statement__ = 15;
          assign(var_shifts, cons_list(index_uni(sym1__), nil_index_list()),
            stan::math::lb_constrain(var_shifts[(sym1__ - 1)], 0, lp__),
            "assigning variable var_shifts");
        } else {
          current_statement__ = 15;
          assign(var_shifts, cons_list(index_uni(sym1__), nil_index_list()),
            stan::math::lb_constrain(var_shifts[(sym1__ - 1)], 0),
            "assigning variable var_shifts");
        }}
      {
        current_statement__ = 101;
        validate_non_negative_index("m_s", "Ng", Ng);
        Eigen::Matrix<local_scalar_t__, -1, 1> m_s;
        m_s = Eigen::Matrix<local_scalar_t__, -1, 1>(Ng);
        stan::math::fill(m_s, DUMMY_VAR__);
        
        current_statement__ = 102;
        assign(m_s, nil_index_list(), rep_vector(0.0, Ng),
          "assigning variable m_s");
        current_statement__ = 105;
        if (logical_eq(type, 2)) {
          current_statement__ = 103;
          assign(m_s, nil_index_list(),
            subtract(
              add(
                stan::math::exp(
                  add(m_ln_int[(1 - 1)], multiply(X, m_ln_beta))), Ni), 1),
            "assigning variable m_s");
        } 
        current_statement__ = 106;
        lp_accum__.add(std_normal_lpdf<propto__>(rms_src_p));
        current_statement__ = 119;
        if (logical_eq(method, 1)) {
          current_statement__ = 117;
          lp_accum__.add(std_normal_lpdf<propto__>(resids));
        } else {
          current_statement__ = 116;
          if (logical_eq(method, 2)) {
            current_statement__ = 114;
            lp_accum__.add(double_exponential_lpdf<propto__>(resids, 0, 1));
          } else {
            current_statement__ = 113;
            if (logical_eq(method, 3)) {
              current_statement__ = 111;
              lp_accum__.add(logistic_lpdf<propto__>(resids, 0, 1));
            } else {
              current_statement__ = 110;
              if (logical_eq(method, 4)) {
                current_statement__ = 107;
                lp_accum__.add(lognormal_lpdf<propto__>(gdp_alpha, 1, 1));
                current_statement__ = 108;
                lp_accum__.add(
                  generalized_double_pareto_lpdf<false>(resids,
                    gdp_alpha[(1 - 1)], pstream__));
              } 
            }
          }
        }
        current_statement__ = 124;
        if (logical_eq(complex_struc, 1)) {
          current_statement__ = 120;
          lp_accum__.add(std_normal_lpdf<propto__>(sigma_loadings_complex));
          current_statement__ = 121;
          lp_accum__.add(lognormal_lpdf<propto__>(gdp_loadings_complex, 1, 1));
          current_statement__ = 122;
          lp_accum__.add(
            generalized_double_pareto_lpdf<false>(loadings_complex,
              gdp_loadings_complex[(1 - 1)], pstream__));
        } 
        current_statement__ = 125;
        lp_accum__.add(normal_lpdf<propto__>(loadings, 0, sigma_loadings));
        current_statement__ = 126;
        lp_accum__.add(student_t_lpdf<propto__>(sigma_loadings, 3, 0, sl_par));
        current_statement__ = 127;
        lp_accum__.add(student_t_lpdf<propto__>(res_sds, 3, 0, rs_par));
        current_statement__ = 128;
        lp_accum__.add(
          lkj_corr_cholesky_lpdf<propto__>(phi_mat_chol, shape_phi_c));
        current_statement__ = 129;
        lp_accum__.add(beta_lpdf<propto__>(res_cor_01, rc_par, rc_par));
        current_statement__ = 130;
        lp_accum__.add(student_t_lpdf<propto__>(m_ln_int, 3, 0, mln_par));
        current_statement__ = 131;
        lp_accum__.add(student_t_lpdf<propto__>(m_ln_beta, 3, 0, mlb_par));
        current_statement__ = 132;
        lp_accum__.add(std_normal_lpdf<propto__>(var_shifts));
        {
          current_statement__ = 133;
          validate_non_negative_index("S_impute", "Ni", Ni);
          current_statement__ = 134;
          validate_non_negative_index("S_impute", "Ni", Ni);
          Eigen::Matrix<local_scalar_t__, -1, -1> S_impute;
          S_impute = Eigen::Matrix<local_scalar_t__, -1, -1>(Ni, Ni);
          stan::math::fill(S_impute, DUMMY_VAR__);
          
          int pos_miss_c;
          pos_miss_c = std::numeric_limits<int>::min();
          
          current_statement__ = 136;
          pos_miss_c = 0;
          int pos_miss_i;
          pos_miss_i = std::numeric_limits<int>::min();
          
          current_statement__ = 137;
          pos_miss_i = 0;
          int pos_valid;
          pos_valid = std::numeric_limits<int>::min();
          
          current_statement__ = 139;
          validate_non_negative_index("Omega", "Ni", Ni);
          current_statement__ = 140;
          validate_non_negative_index("Omega", "Ni", Ni);
          Eigen::Matrix<local_scalar_t__, -1, -1> Omega;
          Omega = Eigen::Matrix<local_scalar_t__, -1, -1>(Ni, Ni);
          stan::math::fill(Omega, DUMMY_VAR__);
          
          current_statement__ = 142;
          validate_non_negative_index("total_var", "Ni", Ni);
          Eigen::Matrix<local_scalar_t__, -1, 1> total_var;
          total_var = Eigen::Matrix<local_scalar_t__, -1, 1>(Ni);
          stan::math::fill(total_var, DUMMY_VAR__);
          
          {
            current_statement__ = 144;
            validate_non_negative_index("res_var", "Ni", Ni);
            Eigen::Matrix<local_scalar_t__, -1, 1> res_var;
            res_var = Eigen::Matrix<local_scalar_t__, -1, 1>(Ni);
            stan::math::fill(res_var, DUMMY_VAR__);
            
            current_statement__ = 145;
            assign(res_var, nil_index_list(), square(res_sds),
              "assigning variable res_var");
            current_statement__ = 146;
            validate_non_negative_index("phi_mat", "Nf_corr", Nf_corr);
            current_statement__ = 147;
            validate_non_negative_index("phi_mat", "Nf_corr", Nf_corr);
            Eigen::Matrix<local_scalar_t__, -1, -1> phi_mat;
            phi_mat = Eigen::Matrix<local_scalar_t__, -1, -1>(Nf_corr, Nf_corr);
            stan::math::fill(phi_mat, DUMMY_VAR__);
            
            current_statement__ = 148;
            assign(phi_mat, nil_index_list(),
              multiply_lower_tri_self_transpose(phi_mat_chol),
              "assigning variable phi_mat");
            current_statement__ = 149;
            validate_non_negative_index("res_cor", "Nce", Nce);
            Eigen::Matrix<local_scalar_t__, -1, 1> res_cor;
            res_cor = Eigen::Matrix<local_scalar_t__, -1, 1>(Nce);
            stan::math::fill(res_cor, DUMMY_VAR__);
            
            current_statement__ = 150;
            assign(res_cor, nil_index_list(),
              subtract(multiply(res_cor_01, 2), 1),
              "assigning variable res_cor");
            current_statement__ = 151;
            validate_non_negative_index("Load_mat", "Ni", Ni);
            current_statement__ = 152;
            validate_non_negative_index("Load_mat", "Nf", Nf);
            Eigen::Matrix<local_scalar_t__, -1, -1> Load_mat;
            Load_mat = Eigen::Matrix<local_scalar_t__, -1, -1>(Ni, Nf);
            stan::math::fill(Load_mat, DUMMY_VAR__);
            
            current_statement__ = 153;
            assign(Load_mat, nil_index_list(), rep_matrix(0, Ni, Nf),
              "assigning variable Load_mat");
            current_statement__ = 154;
            validate_non_negative_index("lamb_phi_lamb", "Ni", Ni);
            current_statement__ = 155;
            validate_non_negative_index("lamb_phi_lamb", "Ni", Ni);
            Eigen::Matrix<local_scalar_t__, -1, -1> lamb_phi_lamb;
            lamb_phi_lamb = Eigen::Matrix<local_scalar_t__, -1, -1>(Ni, Ni);
            stan::math::fill(lamb_phi_lamb, DUMMY_VAR__);
            
            current_statement__ = 157;
            validate_non_negative_index("loading_par_exp", "Ni", Ni);
            current_statement__ = 158;
            validate_non_negative_index("loading_par_exp", "Nce", Nce);
            Eigen::Matrix<local_scalar_t__, -1, -1> loading_par_exp;
            loading_par_exp = Eigen::Matrix<local_scalar_t__, -1, -1>(Ni, Nce);
            stan::math::fill(loading_par_exp, DUMMY_VAR__);
            
            current_statement__ = 159;
            assign(loading_par_exp, nil_index_list(), rep_matrix(0, Ni, Nce),
              "assigning variable loading_par_exp");
            current_statement__ = 160;
            validate_non_negative_index("loading_par_exp_2", "Ni", Ni);
            current_statement__ = 161;
            validate_non_negative_index("loading_par_exp_2", "Ni", Ni);
            Eigen::Matrix<local_scalar_t__, -1, -1> loading_par_exp_2;
            loading_par_exp_2 = Eigen::Matrix<local_scalar_t__, -1, -1>(Ni, Ni);
            stan::math::fill(loading_par_exp_2, DUMMY_VAR__);
            
            current_statement__ = 163;
            validate_non_negative_index("delta_mat_ast", "Ni", Ni);
            Eigen::Matrix<local_scalar_t__, -1, 1> delta_mat_ast;
            delta_mat_ast = Eigen::Matrix<local_scalar_t__, -1, 1>(Ni);
            stan::math::fill(delta_mat_ast, DUMMY_VAR__);
            
            {
              int pos;
              pos = std::numeric_limits<int>::min();
              
              current_statement__ = 165;
              pos = 0;
              int pos_complex;
              pos_complex = std::numeric_limits<int>::min();
              
              current_statement__ = 166;
              pos_complex = 0;
              current_statement__ = 178;
              for (int i = 1; i <= Ni; ++i) {
                current_statement__ = 176;
                for (int j = 1; j <= Nf; ++j) {
                  current_statement__ = 174;
                  if (logical_neq(
                        rvalue(loading_pattern,
                          cons_list(index_uni(i),
                            cons_list(index_uni(j), nil_index_list())),
                          "loading_pattern"), 0)) {
                    current_statement__ = 171;
                    pos = (pos + 1);
                    current_statement__ = 172;
                    assign(Load_mat,
                      cons_list(index_uni(i),
                        cons_list(index_uni(j), nil_index_list())),
                      loadings[(pos - 1)], "assigning variable Load_mat");
                  } else {
                    current_statement__ = 170;
                    if (logical_eq(complex_struc, 1)) {
                      current_statement__ = 167;
                      pos_complex = (pos_complex + 1);
                      current_statement__ = 168;
                      assign(Load_mat,
                        cons_list(index_uni(i),
                          cons_list(index_uni(j), nil_index_list())),
                        (sigma_loadings_complex[(1 - 1)] *
                          loadings_complex[(pos_complex - 1)]),
                        "assigning variable Load_mat");
                    } 
                  }}}
            }
            current_statement__ = 182;
            if (logical_eq(corr_fac, 1)) {
              current_statement__ = 181;
              assign(lamb_phi_lamb, nil_index_list(),
                quad_form_sym(phi_mat, transpose(Load_mat)),
                "assigning variable lamb_phi_lamb");
            } else {
              current_statement__ = 180;
              assign(lamb_phi_lamb, nil_index_list(), tcrossprod(Load_mat),
                "assigning variable lamb_phi_lamb");
            }
            current_statement__ = 186;
            for (int i = 1; i <= Nce; ++i) {
              current_statement__ = 183;
              assign(loading_par_exp,
                cons_list(index_uni(error_mat[(i - 1)][(1 - 1)]),
                  cons_list(index_uni(i), nil_index_list())),
                stan::math::sqrt(
                  (stan::math::abs(res_cor[(i - 1)]) *
                    res_var[(error_mat[(i - 1)][(1 - 1)] - 1)])),
                "assigning variable loading_par_exp");
              current_statement__ = 184;
              assign(loading_par_exp,
                cons_list(index_uni(error_mat[(i - 1)][(2 - 1)]),
                  cons_list(index_uni(i), nil_index_list())),
                (sign(res_cor[(i - 1)], pstream__) *
                  stan::math::sqrt(
                    (stan::math::abs(res_cor[(i - 1)]) *
                      res_var[(error_mat[(i - 1)][(2 - 1)] - 1)]))),
                "assigning variable loading_par_exp");}
            current_statement__ = 187;
            assign(loading_par_exp_2, nil_index_list(),
              tcrossprod(loading_par_exp),
              "assigning variable loading_par_exp_2");
            current_statement__ = 188;
            assign(delta_mat_ast, nil_index_list(),
              subtract(res_var, diagonal(loading_par_exp_2)),
              "assigning variable delta_mat_ast");
            current_statement__ = 189;
            assign(Omega, nil_index_list(),
              add_diag(add(lamb_phi_lamb, loading_par_exp_2), delta_mat_ast),
              "assigning variable Omega");
            current_statement__ = 190;
            assign(total_var, nil_index_list(), diagonal(Omega),
              "assigning variable total_var");
            current_statement__ = 200;
            if (logical_lt(method, 90)) {
              int pos;
              pos = std::numeric_limits<int>::min();
              
              current_statement__ = 191;
              pos = 0;
              current_statement__ = 198;
              for (int i = 2; i <= Ni; ++i) {
                current_statement__ = 196;
                for (int j = 1; j <= (i - 1); ++j) {
                  current_statement__ = 192;
                  pos = (pos + 1);
                  current_statement__ = 193;
                  assign(Omega,
                    cons_list(index_uni(i),
                      cons_list(index_uni(j), nil_index_list())),
                    (rvalue(Omega,
                       cons_list(index_uni(i),
                         cons_list(index_uni(j), nil_index_list())), "Omega")
                      +
                      ((resids[(pos - 1)] * rms_src_p[(1 - 1)]) *
                        stan::math::sqrt(
                          (total_var[(i - 1)] * total_var[(j - 1)])))),
                    "assigning variable Omega");
                  current_statement__ = 194;
                  assign(Omega,
                    cons_list(index_uni(j),
                      cons_list(index_uni(i), nil_index_list())),
                    rvalue(Omega,
                      cons_list(index_uni(i),
                        cons_list(index_uni(j), nil_index_list())), "Omega"),
                    "assigning variable Omega");}}
            } 
          }
          current_statement__ = 238;
          for (int i = 1; i <= Ng; ++i) {
            current_statement__ = 202;
            validate_non_negative_index("idxs", "sum(valid_var[ : , i])",
                                        sum(
                                          rvalue(valid_var,
                                            cons_list(index_omni(),
                                              cons_list(index_uni(i),
                                                nil_index_list())),
                                            "valid_var")));
            std::vector<int> idxs;
            idxs = std::vector<int>(sum(
                                      rvalue(valid_var,
                                        cons_list(index_omni(),
                                          cons_list(index_uni(i),
                                            nil_index_list())), "valid_var")), std::numeric_limits<int>::min());
            
            current_statement__ = 204;
            pos_valid = 0;
            current_statement__ = 210;
            for (int j = 1; j <= Ni; ++j) {
              current_statement__ = 208;
              if (logical_eq(valid_var[(j - 1)][(i - 1)], 1)) {
                current_statement__ = 205;
                pos_valid = (pos_valid + 1);
                current_statement__ = 206;
                assign(idxs,
                  cons_list(index_uni(pos_valid), nil_index_list()), j,
                  "assigning variable idxs");
              } }
            current_statement__ = 211;
            assign(S_impute, nil_index_list(), S[(i - 1)],
              "assigning variable S_impute");
            current_statement__ = 224;
            for (int j = 2; j <= Ni; ++j) {
              current_statement__ = 222;
              if (logical_eq(valid_var[(j - 1)][(i - 1)], 1)) {
                current_statement__ = 220;
                for (int k = 1; k <= (j - 1); ++k) {
                  current_statement__ = 218;
                  if (logical_eq(valid_var[(k - 1)][(i - 1)], 1)) {
                    current_statement__ = 216;
                    if (logical_eq(
                          rvalue(S_impute,
                            cons_list(index_uni(j),
                              cons_list(index_uni(k), nil_index_list())),
                            "S_impute"), 999)) {
                      current_statement__ = 212;
                      pos_miss_c = (pos_miss_c + 1);
                      current_statement__ = 213;
                      assign(S_impute,
                        cons_list(index_uni(j),
                          cons_list(index_uni(k), nil_index_list())),
                        ((((miss_cor_01[(pos_miss_c - 1)] * 2) - 1) *
                           stan::math::sqrt(
                             rvalue(S_impute,
                               cons_list(index_uni(j),
                                 cons_list(index_uni(j), nil_index_list())),
                               "S_impute"))) *
                          stan::math::sqrt(
                            rvalue(S_impute,
                              cons_list(index_uni(k),
                                cons_list(index_uni(k), nil_index_list())),
                              "S_impute"))), "assigning variable S_impute");
                      current_statement__ = 214;
                      assign(S_impute,
                        cons_list(index_uni(k),
                          cons_list(index_uni(j), nil_index_list())),
                        rvalue(S_impute,
                          cons_list(index_uni(j),
                            cons_list(index_uni(k), nil_index_list())),
                          "S_impute"), "assigning variable S_impute");
                    } 
                  } }
              } }
            current_statement__ = 230;
            for (int j = 1; j <= Ni; ++j) {
              current_statement__ = 228;
              if (logical_eq(miss_ind[(j - 1)][(i - 1)], 1)) {
                current_statement__ = 225;
                pos_miss_i = (pos_miss_i + 1);
                current_statement__ = 226;
                assign(S_impute,
                  cons_list(index_uni(j),
                    cons_list(index_uni(j), nil_index_list())),
                  (rvalue(S_impute,
                     cons_list(index_uni(j),
                       cons_list(index_uni(j), nil_index_list())),
                     "S_impute") + var_shifts[(pos_miss_i - 1)]),
                  "assigning variable S_impute");
              } }
            current_statement__ = 236;
            if (logical_eq(type, 1)) {
              current_statement__ = 234;
              lp_accum__.add(
                wishart_lpdf<false>(
                  rvalue(S_impute,
                    cons_list(index_multi(idxs),
                      cons_list(index_multi(idxs), nil_index_list())),
                    "S_impute"), (Np[(i - 1)] - 1.0),
                  divide(
                    rvalue(Omega,
                      cons_list(index_multi(idxs),
                        cons_list(index_multi(idxs), nil_index_list())),
                      "Omega"), (Np[(i - 1)] - 1.0))));
            } else {
              current_statement__ = 233;
              if (logical_eq(type, 2)) {
                current_statement__ = 231;
                lp_accum__.add(
                  gen_matrix_beta_ii_lpdf<false>(
                    rvalue(S_impute,
                      cons_list(index_multi(idxs),
                        cons_list(index_multi(idxs), nil_index_list())),
                      "S_impute"),
                    rvalue(Omega,
                      cons_list(index_multi(idxs),
                        cons_list(index_multi(idxs), nil_index_list())),
                      "Omega"), (Np[(i - 1)] - 1.0), m_s[(i - 1)], pstream__));
              } 
            }}
        }
      }
    } catch (const std::exception& e) {
      stan::lang::rethrow_located(e, locations_array__[current_statement__]);
      // Next line prevents compiler griping about no return
      throw std::runtime_error("*** IF YOU SEE THIS, PLEASE REPORT A BUG ***"); 
    }
    lp_accum__.add(lp__);
    return lp_accum__.sum();
    } // log_prob_impl() 
    
  template <typename RNG, typename VecR, typename VecI, typename VecVar, stan::require_vector_like_vt<std::is_floating_point, VecR>* = nullptr, stan::require_vector_like_vt<std::is_integral, VecI>* = nullptr, stan::require_std_vector_vt<std::is_floating_point, VecVar>* = nullptr>
  inline void write_array_impl(RNG& base_rng__, VecR& params_r__,
                               VecI& params_i__, VecVar& vars__,
                               const bool emit_transformed_parameters__ = true,
                               const bool emit_generated_quantities__ = true,
                               std::ostream* pstream__ = nullptr) const {
    using local_scalar_t__ = double;
    vars__.resize(0);
    stan::io::reader<local_scalar_t__> in__(params_r__, params_i__);
    static const char* function__ = "model_meta_cfa_resid_rs_namespace::write_array";
(void) function__;  // suppress unused var warning
    (void) function__;  // suppress unused var warning
    double lp__ = 0.0;
    (void) lp__;  // dummy to suppress unused var warning
    stan::math::accumulator<double> lp_accum__;
    local_scalar_t__ DUMMY_VAR__(std::numeric_limits<double>::quiet_NaN());
    (void) DUMMY_VAR__;  // suppress unused var warning
    
    try {
      Eigen::Matrix<double, -1, 1> rms_src_p;
      rms_src_p = Eigen::Matrix<double, -1, 1>(N_rms);
      stan::math::fill(rms_src_p, std::numeric_limits<double>::quiet_NaN());
      
      current_statement__ = 1;
      rms_src_p = in__.vector(N_rms);
      current_statement__ = 1;
      for (int sym1__ = 1; sym1__ <= N_rms; ++sym1__) {
        current_statement__ = 1;
        assign(rms_src_p, cons_list(index_uni(sym1__), nil_index_list()),
          stan::math::lb_constrain(rms_src_p[(sym1__ - 1)], 0.0),
          "assigning variable rms_src_p");}
      Eigen::Matrix<double, -1, 1> gdp_alpha;
      gdp_alpha = Eigen::Matrix<double, -1, 1>(N_alpha);
      stan::math::fill(gdp_alpha, std::numeric_limits<double>::quiet_NaN());
      
      current_statement__ = 2;
      gdp_alpha = in__.vector(N_alpha);
      current_statement__ = 2;
      for (int sym1__ = 1; sym1__ <= N_alpha; ++sym1__) {
        current_statement__ = 2;
        assign(gdp_alpha, cons_list(index_uni(sym1__), nil_index_list()),
          stan::math::lb_constrain(gdp_alpha[(sym1__ - 1)], 2.0),
          "assigning variable gdp_alpha");}
      Eigen::Matrix<double, -1, 1> resids;
      resids = Eigen::Matrix<double, -1, 1>(Nisqd2);
      stan::math::fill(resids, std::numeric_limits<double>::quiet_NaN());
      
      current_statement__ = 3;
      resids = in__.vector(Nisqd2);
      Eigen::Matrix<double, -1, 1> loadings;
      loadings = Eigen::Matrix<double, -1, 1>(Nl);
      stan::math::fill(loadings, std::numeric_limits<double>::quiet_NaN());
      
      current_statement__ = 4;
      loadings = in__.vector(Nl);
      double sigma_loadings;
      sigma_loadings = std::numeric_limits<double>::quiet_NaN();
      
      current_statement__ = 5;
      sigma_loadings = in__.scalar();
      current_statement__ = 5;
      sigma_loadings = stan::math::lb_constrain(sigma_loadings, 0);
      Eigen::Matrix<double, -1, 1> res_sds;
      res_sds = Eigen::Matrix<double, -1, 1>(Ni);
      stan::math::fill(res_sds, std::numeric_limits<double>::quiet_NaN());
      
      current_statement__ = 6;
      res_sds = in__.vector(Ni);
      current_statement__ = 6;
      for (int sym1__ = 1; sym1__ <= Ni; ++sym1__) {
        current_statement__ = 6;
        assign(res_sds, cons_list(index_uni(sym1__), nil_index_list()),
          stan::math::lb_constrain(res_sds[(sym1__ - 1)], 0),
          "assigning variable res_sds");}
      Eigen::Matrix<double, -1, -1> phi_mat_chol;
      phi_mat_chol = Eigen::Matrix<double, -1, -1>(Nf_corr, Nf_corr);
      stan::math::fill(phi_mat_chol, std::numeric_limits<double>::quiet_NaN());
      
      Eigen::Matrix<local_scalar_t__, -1, 1> phi_mat_chol_in__;
      phi_mat_chol_in__ = Eigen::Matrix<local_scalar_t__, -1, 1>(((Nf_corr *
                                                                    (Nf_corr
                                                                    - 1)) /
                                                                   2));
      stan::math::fill(phi_mat_chol_in__, DUMMY_VAR__);
      
      current_statement__ = 7;
      phi_mat_chol_in__ = in__.vector(((Nf_corr * (Nf_corr - 1)) / 2));
      current_statement__ = 7;
      assign(phi_mat_chol, nil_index_list(),
        stan::math::cholesky_corr_constrain(phi_mat_chol_in__, Nf_corr),
        "assigning variable phi_mat_chol");
      Eigen::Matrix<double, -1, 1> res_cor_01;
      res_cor_01 = Eigen::Matrix<double, -1, 1>(Nce);
      stan::math::fill(res_cor_01, std::numeric_limits<double>::quiet_NaN());
      
      current_statement__ = 8;
      res_cor_01 = in__.vector(Nce);
      current_statement__ = 8;
      for (int sym1__ = 1; sym1__ <= Nce; ++sym1__) {
        current_statement__ = 8;
        assign(res_cor_01, cons_list(index_uni(sym1__), nil_index_list()),
          stan::math::lub_constrain(res_cor_01[(sym1__ - 1)], 0, 1),
          "assigning variable res_cor_01");}
      Eigen::Matrix<double, -1, 1> loadings_complex;
      loadings_complex = Eigen::Matrix<double, -1, 1>(N_complex);
      stan::math::fill(loadings_complex, std::numeric_limits<double>::quiet_NaN());
      
      current_statement__ = 9;
      loadings_complex = in__.vector(N_complex);
      Eigen::Matrix<double, -1, 1> sigma_loadings_complex;
      sigma_loadings_complex = Eigen::Matrix<double, -1, 1>(complex_struc);
      stan::math::fill(sigma_loadings_complex, std::numeric_limits<double>::quiet_NaN());
      
      current_statement__ = 10;
      sigma_loadings_complex = in__.vector(complex_struc);
      current_statement__ = 10;
      for (int sym1__ = 1; sym1__ <= complex_struc; ++sym1__) {
        current_statement__ = 10;
        assign(sigma_loadings_complex,
          cons_list(index_uni(sym1__), nil_index_list()),
          stan::math::lb_constrain(sigma_loadings_complex[(sym1__ - 1)], 0),
          "assigning variable sigma_loadings_complex");}
      Eigen::Matrix<double, -1, 1> gdp_loadings_complex;
      gdp_loadings_complex = Eigen::Matrix<double, -1, 1>(complex_struc);
      stan::math::fill(gdp_loadings_complex, std::numeric_limits<double>::quiet_NaN());
      
      current_statement__ = 11;
      gdp_loadings_complex = in__.vector(complex_struc);
      current_statement__ = 11;
      for (int sym1__ = 1; sym1__ <= complex_struc; ++sym1__) {
        current_statement__ = 11;
        assign(gdp_loadings_complex,
          cons_list(index_uni(sym1__), nil_index_list()),
          stan::math::lb_constrain(gdp_loadings_complex[(sym1__ - 1)], 2.0),
          "assigning variable gdp_loadings_complex");}
      Eigen::Matrix<double, -1, 1> m_ln_int;
      m_ln_int = Eigen::Matrix<double, -1, 1>(N_type);
      stan::math::fill(m_ln_int, std::numeric_limits<double>::quiet_NaN());
      
      current_statement__ = 12;
      m_ln_int = in__.vector(N_type);
      Eigen::Matrix<double, -1, 1> m_ln_beta;
      m_ln_beta = Eigen::Matrix<double, -1, 1>(p);
      stan::math::fill(m_ln_beta, std::numeric_limits<double>::quiet_NaN());
      
      current_statement__ = 13;
      m_ln_beta = in__.vector(p);
      Eigen::Matrix<double, -1, 1> miss_cor_01;
      miss_cor_01 = Eigen::Matrix<double, -1, 1>(Nmiss);
      stan::math::fill(miss_cor_01, std::numeric_limits<double>::quiet_NaN());
      
      current_statement__ = 14;
      miss_cor_01 = in__.vector(Nmiss);
      current_statement__ = 14;
      for (int sym1__ = 1; sym1__ <= Nmiss; ++sym1__) {
        current_statement__ = 14;
        assign(miss_cor_01, cons_list(index_uni(sym1__), nil_index_list()),
          stan::math::lub_constrain(miss_cor_01[(sym1__ - 1)], 0, 1),
          "assigning variable miss_cor_01");}
      Eigen::Matrix<double, -1, 1> var_shifts;
      var_shifts = Eigen::Matrix<double, -1, 1>(Nitem_miss);
      stan::math::fill(var_shifts, std::numeric_limits<double>::quiet_NaN());
      
      current_statement__ = 15;
      var_shifts = in__.vector(Nitem_miss);
      current_statement__ = 15;
      for (int sym1__ = 1; sym1__ <= Nitem_miss; ++sym1__) {
        current_statement__ = 15;
        assign(var_shifts, cons_list(index_uni(sym1__), nil_index_list()),
          stan::math::lb_constrain(var_shifts[(sym1__ - 1)], 0),
          "assigning variable var_shifts");}
      for (int sym1__ = 1; sym1__ <= N_rms; ++sym1__) {
        vars__.emplace_back(rms_src_p[(sym1__ - 1)]);}
      for (int sym1__ = 1; sym1__ <= N_alpha; ++sym1__) {
        vars__.emplace_back(gdp_alpha[(sym1__ - 1)]);}
      for (int sym1__ = 1; sym1__ <= Nisqd2; ++sym1__) {
        vars__.emplace_back(resids[(sym1__ - 1)]);}
      for (int sym1__ = 1; sym1__ <= Nl; ++sym1__) {
        vars__.emplace_back(loadings[(sym1__ - 1)]);}
      vars__.emplace_back(sigma_loadings);
      for (int sym1__ = 1; sym1__ <= Ni; ++sym1__) {
        vars__.emplace_back(res_sds[(sym1__ - 1)]);}
      for (int sym1__ = 1; sym1__ <= Nf_corr; ++sym1__) {
        for (int sym2__ = 1; sym2__ <= Nf_corr; ++sym2__) {
          vars__.emplace_back(
            rvalue(phi_mat_chol,
              cons_list(index_uni(sym2__),
                cons_list(index_uni(sym1__), nil_index_list())),
              "phi_mat_chol"));}}
      for (int sym1__ = 1; sym1__ <= Nce; ++sym1__) {
        vars__.emplace_back(res_cor_01[(sym1__ - 1)]);}
      for (int sym1__ = 1; sym1__ <= N_complex; ++sym1__) {
        vars__.emplace_back(loadings_complex[(sym1__ - 1)]);}
      for (int sym1__ = 1; sym1__ <= complex_struc; ++sym1__) {
        vars__.emplace_back(sigma_loadings_complex[(sym1__ - 1)]);}
      for (int sym1__ = 1; sym1__ <= complex_struc; ++sym1__) {
        vars__.emplace_back(gdp_loadings_complex[(sym1__ - 1)]);}
      for (int sym1__ = 1; sym1__ <= N_type; ++sym1__) {
        vars__.emplace_back(m_ln_int[(sym1__ - 1)]);}
      for (int sym1__ = 1; sym1__ <= p; ++sym1__) {
        vars__.emplace_back(m_ln_beta[(sym1__ - 1)]);}
      for (int sym1__ = 1; sym1__ <= Nmiss; ++sym1__) {
        vars__.emplace_back(miss_cor_01[(sym1__ - 1)]);}
      for (int sym1__ = 1; sym1__ <= Nitem_miss; ++sym1__) {
        vars__.emplace_back(var_shifts[(sym1__ - 1)]);}
      if (logical_negation((primitive_value(emit_transformed_parameters__) ||
            primitive_value(emit_generated_quantities__)))) {
        return ;
      } 
      if (logical_negation(emit_generated_quantities__)) {
        return ;
      } 
      double rms_src;
      rms_src = std::numeric_limits<double>::quiet_NaN();
      
      Eigen::Matrix<double, -1, -1> Load_mat;
      Load_mat = Eigen::Matrix<double, -1, -1>(Ni, Nf);
      stan::math::fill(Load_mat, std::numeric_limits<double>::quiet_NaN());
      
      current_statement__ = 17;
      assign(Load_mat, nil_index_list(), rep_matrix(0, Ni, Nf),
        "assigning variable Load_mat");
      Eigen::Matrix<double, -1, -1> phi_mat;
      phi_mat = Eigen::Matrix<double, -1, -1>(Nf_corr, Nf_corr);
      stan::math::fill(phi_mat, std::numeric_limits<double>::quiet_NaN());
      
      current_statement__ = 18;
      assign(phi_mat, nil_index_list(),
        multiply_lower_tri_self_transpose(phi_mat_chol),
        "assigning variable phi_mat");
      Eigen::Matrix<double, -1, 1> res_var;
      res_var = Eigen::Matrix<double, -1, 1>(Ni);
      stan::math::fill(res_var, std::numeric_limits<double>::quiet_NaN());
      
      current_statement__ = 19;
      assign(res_var, nil_index_list(), square(res_sds),
        "assigning variable res_var");
      Eigen::Matrix<double, -1, 1> res_cor;
      res_cor = Eigen::Matrix<double, -1, 1>(Nce);
      stan::math::fill(res_cor, std::numeric_limits<double>::quiet_NaN());
      
      current_statement__ = 20;
      assign(res_cor, nil_index_list(), subtract(multiply(res_cor_01, 2), 1),
        "assigning variable res_cor");
      Eigen::Matrix<double, -1, 1> res_cov;
      res_cov = Eigen::Matrix<double, -1, 1>(Nce);
      stan::math::fill(res_cov, std::numeric_limits<double>::quiet_NaN());
      
      Eigen::Matrix<double, -1, -1> Resid;
      Resid = Eigen::Matrix<double, -1, -1>(Ni, Ni);
      stan::math::fill(Resid, std::numeric_limits<double>::quiet_NaN());
      
      current_statement__ = 22;
      assign(Resid, nil_index_list(), rep_matrix(0.0, Ni, Ni),
        "assigning variable Resid");
      Eigen::Matrix<double, -1, 1> miss_cor;
      miss_cor = Eigen::Matrix<double, -1, 1>(Nmiss);
      stan::math::fill(miss_cor, std::numeric_limits<double>::quiet_NaN());
      
      current_statement__ = 23;
      assign(miss_cor, nil_index_list(),
        subtract(multiply(miss_cor_01, 2), 1), "assigning variable miss_cor");
      double v_mn;
      v_mn = std::numeric_limits<double>::quiet_NaN();
      
      current_statement__ = 24;
      v_mn = 0.0;
      double rmsea_mn;
      rmsea_mn = std::numeric_limits<double>::quiet_NaN();
      
      current_statement__ = 25;
      rmsea_mn = stan::math::sqrt(v_mn);
      Eigen::Matrix<double, -1, 1> rmsea_beta;
      rmsea_beta = Eigen::Matrix<double, -1, 1>(p);
      stan::math::fill(rmsea_beta, std::numeric_limits<double>::quiet_NaN());
      
      current_statement__ = 31;
      if (logical_neq(method, 100)) {
        current_statement__ = 29;
        rms_src = rms_src_p[(1 - 1)];
      } else {
        current_statement__ = 27;
        rms_src = 0.0;
      }
      current_statement__ = 40;
      if (logical_eq(method, 2)) {
        current_statement__ = 38;
        rms_src = (rms_src * sqrt_two);
      } else {
        current_statement__ = 37;
        if (logical_eq(method, 3)) {
          current_statement__ = 35;
          rms_src = (rms_src * pi_sqrt_three);
        } else {
          current_statement__ = 34;
          if (logical_eq(method, 4)) {
            current_statement__ = 32;
            rms_src = (rms_src *
                        ((sqrt_two * gdp_alpha[(1 - 1)]) /
                          stan::math::sqrt(
                            ((gdp_alpha[(1 - 1)] - 1.0) *
                              (gdp_alpha[(1 - 1)] - 2.0)))));
          } 
        }
      }
      current_statement__ = 54;
      if (logical_eq(type, 2)) {
        current_statement__ = 41;
        validate_non_negative_index("ebx", "Ng", Ng);
        Eigen::Matrix<double, -1, 1> ebx;
        ebx = Eigen::Matrix<double, -1, 1>(Ng);
        stan::math::fill(ebx, std::numeric_limits<double>::quiet_NaN());
        
        current_statement__ = 42;
        assign(ebx, nil_index_list(),
          stan::math::exp(add(m_ln_int[(1 - 1)], multiply(X, m_ln_beta))),
          "assigning variable ebx");
        current_statement__ = 43;
        validate_non_negative_index("m_s", "Ng", Ng);
        Eigen::Matrix<double, -1, 1> m_s;
        m_s = Eigen::Matrix<double, -1, 1>(Ng);
        stan::math::fill(m_s, std::numeric_limits<double>::quiet_NaN());
        
        current_statement__ = 44;
        assign(m_s, nil_index_list(), subtract(add(ebx, Ni), 1),
          "assigning variable m_s");
        double mn_ebx;
        mn_ebx = std::numeric_limits<double>::quiet_NaN();
        
        current_statement__ = 45;
        mn_ebx = 0.0;
        current_statement__ = 46;
        v_mn = mean(elt_divide(1.0, m_s));
        current_statement__ = 47;
        rmsea_mn = stan::math::sqrt(v_mn);
        current_statement__ = 50;
        for (int i = 1; i <= Ng; ++i) {
          current_statement__ = 48;
          mn_ebx = (mn_ebx +
                     (ebx[(i - 1)] /
                       (2 * pow(((ebx[(i - 1)] + p) - 1), (3.0 / 2)))));}
        current_statement__ = 51;
        mn_ebx = (mn_ebx / (Ng * 1.0));
        current_statement__ = 52;
        assign(rmsea_beta, nil_index_list(),
          multiply(minus(m_ln_beta), mn_ebx), "assigning variable rmsea_beta");
      } 
      current_statement__ = 64;
      if (logical_lt(method, 90)) {
        int pos;
        pos = std::numeric_limits<int>::min();
        
        current_statement__ = 55;
        pos = 0;
        current_statement__ = 62;
        for (int i = 2; i <= Ni; ++i) {
          current_statement__ = 60;
          for (int j = 1; j <= (i - 1); ++j) {
            current_statement__ = 56;
            pos = (pos + 1);
            current_statement__ = 57;
            assign(Resid,
              cons_list(index_uni(i),
                cons_list(index_uni(j), nil_index_list())),
              (resids[(pos - 1)] * rms_src_p[(1 - 1)]),
              "assigning variable Resid");
            current_statement__ = 58;
            assign(Resid,
              cons_list(index_uni(j),
                cons_list(index_uni(i), nil_index_list())),
              rvalue(Resid,
                cons_list(index_uni(i),
                  cons_list(index_uni(j), nil_index_list())), "Resid"),
              "assigning variable Resid");}}
      } 
      {
        int pos;
        pos = std::numeric_limits<int>::min();
        
        current_statement__ = 65;
        pos = 0;
        int pos_complex;
        pos_complex = std::numeric_limits<int>::min();
        
        current_statement__ = 66;
        pos_complex = 0;
        current_statement__ = 78;
        for (int i = 1; i <= Ni; ++i) {
          current_statement__ = 76;
          for (int j = 1; j <= Nf; ++j) {
            current_statement__ = 74;
            if (logical_neq(
                  rvalue(loading_pattern,
                    cons_list(index_uni(i),
                      cons_list(index_uni(j), nil_index_list())),
                    "loading_pattern"), 0)) {
              current_statement__ = 71;
              pos = (pos + 1);
              current_statement__ = 72;
              assign(Load_mat,
                cons_list(index_uni(i),
                  cons_list(index_uni(j), nil_index_list())),
                loadings[(pos - 1)], "assigning variable Load_mat");
            } else {
              current_statement__ = 70;
              if (logical_eq(complex_struc, 1)) {
                current_statement__ = 67;
                pos_complex = (pos_complex + 1);
                current_statement__ = 68;
                assign(Load_mat,
                  cons_list(index_uni(i),
                    cons_list(index_uni(j), nil_index_list())),
                  (sigma_loadings_complex[(1 - 1)] *
                    loadings_complex[(pos_complex - 1)]),
                  "assigning variable Load_mat");
              } 
            }}}
      }
      current_statement__ = 97;
      for (int j = 1; j <= Nf; ++j) {
        current_statement__ = 95;
        if (logical_lt(
              rvalue(Load_mat,
                cons_list(index_uni(markers[(j - 1)]),
                  cons_list(index_uni(j), nil_index_list())), "Load_mat"), 0)) {
          current_statement__ = 80;
          assign(Load_mat,
            cons_list(index_omni(),
              cons_list(index_uni(j), nil_index_list())),
            multiply(
              stan::model::deep_copy(
                rvalue(Load_mat,
                  cons_list(index_omni(),
                    cons_list(index_uni(j), nil_index_list())), "Load_mat")),
              -1.0), "assigning variable Load_mat");
          current_statement__ = 84;
          if (logical_eq(corr_fac, 1)) {
            current_statement__ = 81;
            assign(phi_mat,
              cons_list(index_omni(),
                cons_list(index_uni(j), nil_index_list())),
              multiply(
                stan::model::deep_copy(
                  rvalue(phi_mat,
                    cons_list(index_omni(),
                      cons_list(index_uni(j), nil_index_list())), "phi_mat")),
                -1.0), "assigning variable phi_mat");
            current_statement__ = 82;
            assign(phi_mat,
              cons_list(index_uni(j),
                cons_list(index_omni(), nil_index_list())),
              multiply(
                stan::model::deep_copy(
                  rvalue(phi_mat,
                    cons_list(index_uni(j),
                      cons_list(index_omni(), nil_index_list())), "phi_mat")),
                -1.0), "assigning variable phi_mat");
          } 
          {
            Eigen::Matrix<double, -1, 1> sym1__;
            current_statement__ = 85;
            assign(sym1__, nil_index_list(),
              rvalue(Load_mat,
                cons_list(index_omni(),
                  cons_list(index_uni(j), nil_index_list())), "Load_mat"),
              "assigning variable sym1__");
            current_statement__ = 85;
            for (int sym2__ = 1; sym2__ <= stan::math::size(sym1__); ++sym2__) {
              {
                double i;
                current_statement__ = 85;
                i = sym1__[(sym2__ - 1)];
                current_statement__ = 93;
                if (logical_neq(i, 0)) {
                  current_statement__ = 91;
                  for (int k = 1; k <= Nce; ++k) {
                    current_statement__ = 87;
                    if (logical_eq(i, error_mat[(k - 1)][(1 - 1)])) {
                      current_statement__ = 86;
                      assign(res_cor,
                        cons_list(index_uni(k), nil_index_list()),
                        (res_cor[(k - 1)] * -1.0),
                        "assigning variable res_cor");
                    } 
                    current_statement__ = 89;
                    if (logical_eq(i, error_mat[(k - 1)][(2 - 1)])) {
                      current_statement__ = 88;
                      assign(res_cor,
                        cons_list(index_uni(k), nil_index_list()),
                        (res_cor[(k - 1)] * -1.0),
                        "assigning variable res_cor");
                    } }
                } 
              }}
          }
        } }
      current_statement__ = 100;
      for (int i = 1; i <= Nce; ++i) {
        current_statement__ = 98;
        assign(res_cov, cons_list(index_uni(i), nil_index_list()),
          (res_cor[(i - 1)] *
            prod(
              rvalue(res_sds,
                cons_list(
                  index_multi(rvalue(error_mat,
                                cons_list(index_uni(i),
                                  cons_list(index_omni(), nil_index_list())),
                                "error_mat")), nil_index_list()), "res_sds"))),
          "assigning variable res_cov");}
      current_statement__ = 16;
      current_statement__ = 16;
      check_greater_or_equal(function__, "rms_src", rms_src, 0);
      vars__.emplace_back(rms_src);
      for (int sym1__ = 1; sym1__ <= Nf; ++sym1__) {
        for (int sym2__ = 1; sym2__ <= Ni; ++sym2__) {
          vars__.emplace_back(
            rvalue(Load_mat,
              cons_list(index_uni(sym2__),
                cons_list(index_uni(sym1__), nil_index_list())), "Load_mat"));
        }}
      for (int sym1__ = 1; sym1__ <= Nf_corr; ++sym1__) {
        for (int sym2__ = 1; sym2__ <= Nf_corr; ++sym2__) {
          vars__.emplace_back(
            rvalue(phi_mat,
              cons_list(index_uni(sym2__),
                cons_list(index_uni(sym1__), nil_index_list())), "phi_mat"));
        }}
      for (int sym1__ = 1; sym1__ <= Ni; ++sym1__) {
        vars__.emplace_back(res_var[(sym1__ - 1)]);}
      for (int sym1__ = 1; sym1__ <= Nce; ++sym1__) {
        vars__.emplace_back(res_cor[(sym1__ - 1)]);}
      for (int sym1__ = 1; sym1__ <= Nce; ++sym1__) {
        vars__.emplace_back(res_cov[(sym1__ - 1)]);}
      for (int sym1__ = 1; sym1__ <= Ni; ++sym1__) {
        for (int sym2__ = 1; sym2__ <= Ni; ++sym2__) {
          vars__.emplace_back(
            rvalue(Resid,
              cons_list(index_uni(sym2__),
                cons_list(index_uni(sym1__), nil_index_list())), "Resid"));}}
      for (int sym1__ = 1; sym1__ <= Nmiss; ++sym1__) {
        vars__.emplace_back(miss_cor[(sym1__ - 1)]);}
      vars__.emplace_back(v_mn);
      vars__.emplace_back(rmsea_mn);
      for (int sym1__ = 1; sym1__ <= p; ++sym1__) {
        vars__.emplace_back(rmsea_beta[(sym1__ - 1)]);}
    } catch (const std::exception& e) {
      stan::lang::rethrow_located(e, locations_array__[current_statement__]);
      // Next line prevents compiler griping about no return
      throw std::runtime_error("*** IF YOU SEE THIS, PLEASE REPORT A BUG ***"); 
    }
    } // write_array_impl() 
    
  template <typename VecVar, typename VecI, stan::require_std_vector_t<VecVar>* = nullptr, stan::require_vector_like_vt<std::is_integral, VecI>* = nullptr>
  inline void transform_inits_impl(const stan::io::var_context& context__,
                                   VecI& params_i__, VecVar& vars__,
                                   std::ostream* pstream__ = nullptr) const {
    using local_scalar_t__ = double;
    vars__.clear();
    vars__.reserve(num_params_r__);
    
    try {
      int pos__;
      pos__ = std::numeric_limits<int>::min();
      
      pos__ = 1;
      Eigen::Matrix<double, -1, 1> rms_src_p;
      rms_src_p = Eigen::Matrix<double, -1, 1>(N_rms);
      stan::math::fill(rms_src_p, std::numeric_limits<double>::quiet_NaN());
      
      {
        std::vector<local_scalar_t__> rms_src_p_flat__;
        current_statement__ = 1;
        assign(rms_src_p_flat__, nil_index_list(),
          context__.vals_r("rms_src_p"),
          "assigning variable rms_src_p_flat__");
        current_statement__ = 1;
        pos__ = 1;
        current_statement__ = 1;
        for (int sym1__ = 1; sym1__ <= N_rms; ++sym1__) {
          current_statement__ = 1;
          assign(rms_src_p, cons_list(index_uni(sym1__), nil_index_list()),
            rms_src_p_flat__[(pos__ - 1)], "assigning variable rms_src_p");
          current_statement__ = 1;
          pos__ = (pos__ + 1);}
      }
      Eigen::Matrix<double, -1, 1> rms_src_p_free__;
      rms_src_p_free__ = Eigen::Matrix<double, -1, 1>(N_rms);
      stan::math::fill(rms_src_p_free__, std::numeric_limits<double>::quiet_NaN());
      
      current_statement__ = 1;
      for (int sym1__ = 1; sym1__ <= N_rms; ++sym1__) {
        current_statement__ = 1;
        assign(rms_src_p_free__,
          cons_list(index_uni(sym1__), nil_index_list()),
          stan::math::lb_free(rms_src_p[(sym1__ - 1)], 0.0),
          "assigning variable rms_src_p_free__");}
      Eigen::Matrix<double, -1, 1> gdp_alpha;
      gdp_alpha = Eigen::Matrix<double, -1, 1>(N_alpha);
      stan::math::fill(gdp_alpha, std::numeric_limits<double>::quiet_NaN());
      
      {
        std::vector<local_scalar_t__> gdp_alpha_flat__;
        current_statement__ = 2;
        assign(gdp_alpha_flat__, nil_index_list(),
          context__.vals_r("gdp_alpha"),
          "assigning variable gdp_alpha_flat__");
        current_statement__ = 2;
        pos__ = 1;
        current_statement__ = 2;
        for (int sym1__ = 1; sym1__ <= N_alpha; ++sym1__) {
          current_statement__ = 2;
          assign(gdp_alpha, cons_list(index_uni(sym1__), nil_index_list()),
            gdp_alpha_flat__[(pos__ - 1)], "assigning variable gdp_alpha");
          current_statement__ = 2;
          pos__ = (pos__ + 1);}
      }
      Eigen::Matrix<double, -1, 1> gdp_alpha_free__;
      gdp_alpha_free__ = Eigen::Matrix<double, -1, 1>(N_alpha);
      stan::math::fill(gdp_alpha_free__, std::numeric_limits<double>::quiet_NaN());
      
      current_statement__ = 2;
      for (int sym1__ = 1; sym1__ <= N_alpha; ++sym1__) {
        current_statement__ = 2;
        assign(gdp_alpha_free__,
          cons_list(index_uni(sym1__), nil_index_list()),
          stan::math::lb_free(gdp_alpha[(sym1__ - 1)], 2.0),
          "assigning variable gdp_alpha_free__");}
      Eigen::Matrix<double, -1, 1> resids;
      resids = Eigen::Matrix<double, -1, 1>(Nisqd2);
      stan::math::fill(resids, std::numeric_limits<double>::quiet_NaN());
      
      {
        std::vector<local_scalar_t__> resids_flat__;
        current_statement__ = 3;
        assign(resids_flat__, nil_index_list(), context__.vals_r("resids"),
          "assigning variable resids_flat__");
        current_statement__ = 3;
        pos__ = 1;
        current_statement__ = 3;
        for (int sym1__ = 1; sym1__ <= Nisqd2; ++sym1__) {
          current_statement__ = 3;
          assign(resids, cons_list(index_uni(sym1__), nil_index_list()),
            resids_flat__[(pos__ - 1)], "assigning variable resids");
          current_statement__ = 3;
          pos__ = (pos__ + 1);}
      }
      Eigen::Matrix<double, -1, 1> loadings;
      loadings = Eigen::Matrix<double, -1, 1>(Nl);
      stan::math::fill(loadings, std::numeric_limits<double>::quiet_NaN());
      
      {
        std::vector<local_scalar_t__> loadings_flat__;
        current_statement__ = 4;
        assign(loadings_flat__, nil_index_list(),
          context__.vals_r("loadings"), "assigning variable loadings_flat__");
        current_statement__ = 4;
        pos__ = 1;
        current_statement__ = 4;
        for (int sym1__ = 1; sym1__ <= Nl; ++sym1__) {
          current_statement__ = 4;
          assign(loadings, cons_list(index_uni(sym1__), nil_index_list()),
            loadings_flat__[(pos__ - 1)], "assigning variable loadings");
          current_statement__ = 4;
          pos__ = (pos__ + 1);}
      }
      double sigma_loadings;
      sigma_loadings = std::numeric_limits<double>::quiet_NaN();
      
      current_statement__ = 5;
      sigma_loadings = context__.vals_r("sigma_loadings")[(1 - 1)];
      double sigma_loadings_free__;
      sigma_loadings_free__ = std::numeric_limits<double>::quiet_NaN();
      
      current_statement__ = 5;
      sigma_loadings_free__ = stan::math::lb_free(sigma_loadings, 0);
      Eigen::Matrix<double, -1, 1> res_sds;
      res_sds = Eigen::Matrix<double, -1, 1>(Ni);
      stan::math::fill(res_sds, std::numeric_limits<double>::quiet_NaN());
      
      {
        std::vector<local_scalar_t__> res_sds_flat__;
        current_statement__ = 6;
        assign(res_sds_flat__, nil_index_list(), context__.vals_r("res_sds"),
          "assigning variable res_sds_flat__");
        current_statement__ = 6;
        pos__ = 1;
        current_statement__ = 6;
        for (int sym1__ = 1; sym1__ <= Ni; ++sym1__) {
          current_statement__ = 6;
          assign(res_sds, cons_list(index_uni(sym1__), nil_index_list()),
            res_sds_flat__[(pos__ - 1)], "assigning variable res_sds");
          current_statement__ = 6;
          pos__ = (pos__ + 1);}
      }
      Eigen::Matrix<double, -1, 1> res_sds_free__;
      res_sds_free__ = Eigen::Matrix<double, -1, 1>(Ni);
      stan::math::fill(res_sds_free__, std::numeric_limits<double>::quiet_NaN());
      
      current_statement__ = 6;
      for (int sym1__ = 1; sym1__ <= Ni; ++sym1__) {
        current_statement__ = 6;
        assign(res_sds_free__,
          cons_list(index_uni(sym1__), nil_index_list()),
          stan::math::lb_free(res_sds[(sym1__ - 1)], 0),
          "assigning variable res_sds_free__");}
      Eigen::Matrix<double, -1, -1> phi_mat_chol;
      phi_mat_chol = Eigen::Matrix<double, -1, -1>(Nf_corr, Nf_corr);
      stan::math::fill(phi_mat_chol, std::numeric_limits<double>::quiet_NaN());
      
      {
        std::vector<local_scalar_t__> phi_mat_chol_flat__;
        current_statement__ = 7;
        assign(phi_mat_chol_flat__, nil_index_list(),
          context__.vals_r("phi_mat_chol"),
          "assigning variable phi_mat_chol_flat__");
        current_statement__ = 7;
        pos__ = 1;
        current_statement__ = 7;
        for (int sym1__ = 1; sym1__ <= Nf_corr; ++sym1__) {
          current_statement__ = 7;
          for (int sym2__ = 1; sym2__ <= Nf_corr; ++sym2__) {
            current_statement__ = 7;
            assign(phi_mat_chol,
              cons_list(index_uni(sym2__),
                cons_list(index_uni(sym1__), nil_index_list())),
              phi_mat_chol_flat__[(pos__ - 1)],
              "assigning variable phi_mat_chol");
            current_statement__ = 7;
            pos__ = (pos__ + 1);}}
      }
      Eigen::Matrix<double, -1, 1> phi_mat_chol_free__;
      phi_mat_chol_free__ = Eigen::Matrix<double, -1, 1>(((Nf_corr *
                                                            (Nf_corr - 1)) /
                                                           2));
      stan::math::fill(phi_mat_chol_free__, std::numeric_limits<double>::quiet_NaN());
      
      current_statement__ = 7;
      assign(phi_mat_chol_free__, nil_index_list(),
        stan::math::cholesky_corr_free(phi_mat_chol),
        "assigning variable phi_mat_chol_free__");
      Eigen::Matrix<double, -1, 1> res_cor_01;
      res_cor_01 = Eigen::Matrix<double, -1, 1>(Nce);
      stan::math::fill(res_cor_01, std::numeric_limits<double>::quiet_NaN());
      
      {
        std::vector<local_scalar_t__> res_cor_01_flat__;
        current_statement__ = 8;
        assign(res_cor_01_flat__, nil_index_list(),
          context__.vals_r("res_cor_01"),
          "assigning variable res_cor_01_flat__");
        current_statement__ = 8;
        pos__ = 1;
        current_statement__ = 8;
        for (int sym1__ = 1; sym1__ <= Nce; ++sym1__) {
          current_statement__ = 8;
          assign(res_cor_01, cons_list(index_uni(sym1__), nil_index_list()),
            res_cor_01_flat__[(pos__ - 1)], "assigning variable res_cor_01");
          current_statement__ = 8;
          pos__ = (pos__ + 1);}
      }
      Eigen::Matrix<double, -1, 1> res_cor_01_free__;
      res_cor_01_free__ = Eigen::Matrix<double, -1, 1>(Nce);
      stan::math::fill(res_cor_01_free__, std::numeric_limits<double>::quiet_NaN());
      
      current_statement__ = 8;
      for (int sym1__ = 1; sym1__ <= Nce; ++sym1__) {
        current_statement__ = 8;
        assign(res_cor_01_free__,
          cons_list(index_uni(sym1__), nil_index_list()),
          stan::math::lub_free(res_cor_01[(sym1__ - 1)], 0, 1),
          "assigning variable res_cor_01_free__");}
      Eigen::Matrix<double, -1, 1> loadings_complex;
      loadings_complex = Eigen::Matrix<double, -1, 1>(N_complex);
      stan::math::fill(loadings_complex, std::numeric_limits<double>::quiet_NaN());
      
      {
        std::vector<local_scalar_t__> loadings_complex_flat__;
        current_statement__ = 9;
        assign(loadings_complex_flat__, nil_index_list(),
          context__.vals_r("loadings_complex"),
          "assigning variable loadings_complex_flat__");
        current_statement__ = 9;
        pos__ = 1;
        current_statement__ = 9;
        for (int sym1__ = 1; sym1__ <= N_complex; ++sym1__) {
          current_statement__ = 9;
          assign(loadings_complex,
            cons_list(index_uni(sym1__), nil_index_list()),
            loadings_complex_flat__[(pos__ - 1)],
            "assigning variable loadings_complex");
          current_statement__ = 9;
          pos__ = (pos__ + 1);}
      }
      Eigen::Matrix<double, -1, 1> sigma_loadings_complex;
      sigma_loadings_complex = Eigen::Matrix<double, -1, 1>(complex_struc);
      stan::math::fill(sigma_loadings_complex, std::numeric_limits<double>::quiet_NaN());
      
      {
        std::vector<local_scalar_t__> sigma_loadings_complex_flat__;
        current_statement__ = 10;
        assign(sigma_loadings_complex_flat__, nil_index_list(),
          context__.vals_r("sigma_loadings_complex"),
          "assigning variable sigma_loadings_complex_flat__");
        current_statement__ = 10;
        pos__ = 1;
        current_statement__ = 10;
        for (int sym1__ = 1; sym1__ <= complex_struc; ++sym1__) {
          current_statement__ = 10;
          assign(sigma_loadings_complex,
            cons_list(index_uni(sym1__), nil_index_list()),
            sigma_loadings_complex_flat__[(pos__ - 1)],
            "assigning variable sigma_loadings_complex");
          current_statement__ = 10;
          pos__ = (pos__ + 1);}
      }
      Eigen::Matrix<double, -1, 1> sigma_loadings_complex_free__;
      sigma_loadings_complex_free__ = Eigen::Matrix<double, -1, 1>(complex_struc);
      stan::math::fill(sigma_loadings_complex_free__, std::numeric_limits<double>::quiet_NaN());
      
      current_statement__ = 10;
      for (int sym1__ = 1; sym1__ <= complex_struc; ++sym1__) {
        current_statement__ = 10;
        assign(sigma_loadings_complex_free__,
          cons_list(index_uni(sym1__), nil_index_list()),
          stan::math::lb_free(sigma_loadings_complex[(sym1__ - 1)], 0),
          "assigning variable sigma_loadings_complex_free__");}
      Eigen::Matrix<double, -1, 1> gdp_loadings_complex;
      gdp_loadings_complex = Eigen::Matrix<double, -1, 1>(complex_struc);
      stan::math::fill(gdp_loadings_complex, std::numeric_limits<double>::quiet_NaN());
      
      {
        std::vector<local_scalar_t__> gdp_loadings_complex_flat__;
        current_statement__ = 11;
        assign(gdp_loadings_complex_flat__, nil_index_list(),
          context__.vals_r("gdp_loadings_complex"),
          "assigning variable gdp_loadings_complex_flat__");
        current_statement__ = 11;
        pos__ = 1;
        current_statement__ = 11;
        for (int sym1__ = 1; sym1__ <= complex_struc; ++sym1__) {
          current_statement__ = 11;
          assign(gdp_loadings_complex,
            cons_list(index_uni(sym1__), nil_index_list()),
            gdp_loadings_complex_flat__[(pos__ - 1)],
            "assigning variable gdp_loadings_complex");
          current_statement__ = 11;
          pos__ = (pos__ + 1);}
      }
      Eigen::Matrix<double, -1, 1> gdp_loadings_complex_free__;
      gdp_loadings_complex_free__ = Eigen::Matrix<double, -1, 1>(complex_struc);
      stan::math::fill(gdp_loadings_complex_free__, std::numeric_limits<double>::quiet_NaN());
      
      current_statement__ = 11;
      for (int sym1__ = 1; sym1__ <= complex_struc; ++sym1__) {
        current_statement__ = 11;
        assign(gdp_loadings_complex_free__,
          cons_list(index_uni(sym1__), nil_index_list()),
          stan::math::lb_free(gdp_loadings_complex[(sym1__ - 1)], 2.0),
          "assigning variable gdp_loadings_complex_free__");}
      Eigen::Matrix<double, -1, 1> m_ln_int;
      m_ln_int = Eigen::Matrix<double, -1, 1>(N_type);
      stan::math::fill(m_ln_int, std::numeric_limits<double>::quiet_NaN());
      
      {
        std::vector<local_scalar_t__> m_ln_int_flat__;
        current_statement__ = 12;
        assign(m_ln_int_flat__, nil_index_list(),
          context__.vals_r("m_ln_int"), "assigning variable m_ln_int_flat__");
        current_statement__ = 12;
        pos__ = 1;
        current_statement__ = 12;
        for (int sym1__ = 1; sym1__ <= N_type; ++sym1__) {
          current_statement__ = 12;
          assign(m_ln_int, cons_list(index_uni(sym1__), nil_index_list()),
            m_ln_int_flat__[(pos__ - 1)], "assigning variable m_ln_int");
          current_statement__ = 12;
          pos__ = (pos__ + 1);}
      }
      Eigen::Matrix<double, -1, 1> m_ln_beta;
      m_ln_beta = Eigen::Matrix<double, -1, 1>(p);
      stan::math::fill(m_ln_beta, std::numeric_limits<double>::quiet_NaN());
      
      {
        std::vector<local_scalar_t__> m_ln_beta_flat__;
        current_statement__ = 13;
        assign(m_ln_beta_flat__, nil_index_list(),
          context__.vals_r("m_ln_beta"),
          "assigning variable m_ln_beta_flat__");
        current_statement__ = 13;
        pos__ = 1;
        current_statement__ = 13;
        for (int sym1__ = 1; sym1__ <= p; ++sym1__) {
          current_statement__ = 13;
          assign(m_ln_beta, cons_list(index_uni(sym1__), nil_index_list()),
            m_ln_beta_flat__[(pos__ - 1)], "assigning variable m_ln_beta");
          current_statement__ = 13;
          pos__ = (pos__ + 1);}
      }
      Eigen::Matrix<double, -1, 1> miss_cor_01;
      miss_cor_01 = Eigen::Matrix<double, -1, 1>(Nmiss);
      stan::math::fill(miss_cor_01, std::numeric_limits<double>::quiet_NaN());
      
      {
        std::vector<local_scalar_t__> miss_cor_01_flat__;
        current_statement__ = 14;
        assign(miss_cor_01_flat__, nil_index_list(),
          context__.vals_r("miss_cor_01"),
          "assigning variable miss_cor_01_flat__");
        current_statement__ = 14;
        pos__ = 1;
        current_statement__ = 14;
        for (int sym1__ = 1; sym1__ <= Nmiss; ++sym1__) {
          current_statement__ = 14;
          assign(miss_cor_01, cons_list(index_uni(sym1__), nil_index_list()),
            miss_cor_01_flat__[(pos__ - 1)], "assigning variable miss_cor_01");
          current_statement__ = 14;
          pos__ = (pos__ + 1);}
      }
      Eigen::Matrix<double, -1, 1> miss_cor_01_free__;
      miss_cor_01_free__ = Eigen::Matrix<double, -1, 1>(Nmiss);
      stan::math::fill(miss_cor_01_free__, std::numeric_limits<double>::quiet_NaN());
      
      current_statement__ = 14;
      for (int sym1__ = 1; sym1__ <= Nmiss; ++sym1__) {
        current_statement__ = 14;
        assign(miss_cor_01_free__,
          cons_list(index_uni(sym1__), nil_index_list()),
          stan::math::lub_free(miss_cor_01[(sym1__ - 1)], 0, 1),
          "assigning variable miss_cor_01_free__");}
      Eigen::Matrix<double, -1, 1> var_shifts;
      var_shifts = Eigen::Matrix<double, -1, 1>(Nitem_miss);
      stan::math::fill(var_shifts, std::numeric_limits<double>::quiet_NaN());
      
      {
        std::vector<local_scalar_t__> var_shifts_flat__;
        current_statement__ = 15;
        assign(var_shifts_flat__, nil_index_list(),
          context__.vals_r("var_shifts"),
          "assigning variable var_shifts_flat__");
        current_statement__ = 15;
        pos__ = 1;
        current_statement__ = 15;
        for (int sym1__ = 1; sym1__ <= Nitem_miss; ++sym1__) {
          current_statement__ = 15;
          assign(var_shifts, cons_list(index_uni(sym1__), nil_index_list()),
            var_shifts_flat__[(pos__ - 1)], "assigning variable var_shifts");
          current_statement__ = 15;
          pos__ = (pos__ + 1);}
      }
      Eigen::Matrix<double, -1, 1> var_shifts_free__;
      var_shifts_free__ = Eigen::Matrix<double, -1, 1>(Nitem_miss);
      stan::math::fill(var_shifts_free__, std::numeric_limits<double>::quiet_NaN());
      
      current_statement__ = 15;
      for (int sym1__ = 1; sym1__ <= Nitem_miss; ++sym1__) {
        current_statement__ = 15;
        assign(var_shifts_free__,
          cons_list(index_uni(sym1__), nil_index_list()),
          stan::math::lb_free(var_shifts[(sym1__ - 1)], 0),
          "assigning variable var_shifts_free__");}
      for (int sym1__ = 1; sym1__ <= N_rms; ++sym1__) {
        vars__.emplace_back(rms_src_p_free__[(sym1__ - 1)]);}
      for (int sym1__ = 1; sym1__ <= N_alpha; ++sym1__) {
        vars__.emplace_back(gdp_alpha_free__[(sym1__ - 1)]);}
      for (int sym1__ = 1; sym1__ <= Nisqd2; ++sym1__) {
        vars__.emplace_back(resids[(sym1__ - 1)]);}
      for (int sym1__ = 1; sym1__ <= Nl; ++sym1__) {
        vars__.emplace_back(loadings[(sym1__ - 1)]);}
      vars__.emplace_back(sigma_loadings_free__);
      for (int sym1__ = 1; sym1__ <= Ni; ++sym1__) {
        vars__.emplace_back(res_sds_free__[(sym1__ - 1)]);}
      for (int sym1__ = 1; sym1__ <= ((Nf_corr * (Nf_corr - 1)) / 2);
           ++sym1__) {
        vars__.emplace_back(phi_mat_chol_free__[(sym1__ - 1)]);}
      for (int sym1__ = 1; sym1__ <= Nce; ++sym1__) {
        vars__.emplace_back(res_cor_01_free__[(sym1__ - 1)]);}
      for (int sym1__ = 1; sym1__ <= N_complex; ++sym1__) {
        vars__.emplace_back(loadings_complex[(sym1__ - 1)]);}
      for (int sym1__ = 1; sym1__ <= complex_struc; ++sym1__) {
        vars__.emplace_back(sigma_loadings_complex_free__[(sym1__ - 1)]);}
      for (int sym1__ = 1; sym1__ <= complex_struc; ++sym1__) {
        vars__.emplace_back(gdp_loadings_complex_free__[(sym1__ - 1)]);}
      for (int sym1__ = 1; sym1__ <= N_type; ++sym1__) {
        vars__.emplace_back(m_ln_int[(sym1__ - 1)]);}
      for (int sym1__ = 1; sym1__ <= p; ++sym1__) {
        vars__.emplace_back(m_ln_beta[(sym1__ - 1)]);}
      for (int sym1__ = 1; sym1__ <= Nmiss; ++sym1__) {
        vars__.emplace_back(miss_cor_01_free__[(sym1__ - 1)]);}
      for (int sym1__ = 1; sym1__ <= Nitem_miss; ++sym1__) {
        vars__.emplace_back(var_shifts_free__[(sym1__ - 1)]);}
    } catch (const std::exception& e) {
      stan::lang::rethrow_located(e, locations_array__[current_statement__]);
      // Next line prevents compiler griping about no return
      throw std::runtime_error("*** IF YOU SEE THIS, PLEASE REPORT A BUG ***"); 
    }
    } // transform_inits_impl() 
    
  inline void get_param_names(std::vector<std::string>& names__) const {
    
    names__.clear();
    names__.emplace_back("rms_src_p");
    names__.emplace_back("gdp_alpha");
    names__.emplace_back("resids");
    names__.emplace_back("loadings");
    names__.emplace_back("sigma_loadings");
    names__.emplace_back("res_sds");
    names__.emplace_back("phi_mat_chol");
    names__.emplace_back("res_cor_01");
    names__.emplace_back("loadings_complex");
    names__.emplace_back("sigma_loadings_complex");
    names__.emplace_back("gdp_loadings_complex");
    names__.emplace_back("m_ln_int");
    names__.emplace_back("m_ln_beta");
    names__.emplace_back("miss_cor_01");
    names__.emplace_back("var_shifts");
    names__.emplace_back("rms_src");
    names__.emplace_back("Load_mat");
    names__.emplace_back("phi_mat");
    names__.emplace_back("res_var");
    names__.emplace_back("res_cor");
    names__.emplace_back("res_cov");
    names__.emplace_back("Resid");
    names__.emplace_back("miss_cor");
    names__.emplace_back("v_mn");
    names__.emplace_back("rmsea_mn");
    names__.emplace_back("rmsea_beta");
    } // get_param_names() 
    
  inline void get_dims(std::vector<std::vector<size_t>>& dimss__) const {
    dimss__.clear();
    dimss__.emplace_back(std::vector<size_t>{static_cast<size_t>(N_rms)});
    
    dimss__.emplace_back(std::vector<size_t>{static_cast<size_t>(N_alpha)});
    
    dimss__.emplace_back(std::vector<size_t>{static_cast<size_t>(Nisqd2)});
    
    dimss__.emplace_back(std::vector<size_t>{static_cast<size_t>(Nl)});
    
    dimss__.emplace_back(std::vector<size_t>{});
    
    dimss__.emplace_back(std::vector<size_t>{static_cast<size_t>(Ni)});
    
    dimss__.emplace_back(std::vector<size_t>{static_cast<size_t>(Nf_corr),
                                             static_cast<size_t>(Nf_corr)});
    
    dimss__.emplace_back(std::vector<size_t>{static_cast<size_t>(Nce)});
    
    dimss__.emplace_back(std::vector<size_t>{static_cast<size_t>(N_complex)});
    
    dimss__.emplace_back(std::vector<size_t>{
                                             static_cast<size_t>(complex_struc)
                                             });
    
    dimss__.emplace_back(std::vector<size_t>{
                                             static_cast<size_t>(complex_struc)
                                             });
    
    dimss__.emplace_back(std::vector<size_t>{static_cast<size_t>(N_type)});
    
    dimss__.emplace_back(std::vector<size_t>{static_cast<size_t>(p)});
    
    dimss__.emplace_back(std::vector<size_t>{static_cast<size_t>(Nmiss)});
    
    dimss__.emplace_back(std::vector<size_t>{static_cast<size_t>(Nitem_miss)});
    
    dimss__.emplace_back(std::vector<size_t>{});
    
    dimss__.emplace_back(std::vector<size_t>{static_cast<size_t>(Ni),
                                             static_cast<size_t>(Nf)});
    
    dimss__.emplace_back(std::vector<size_t>{static_cast<size_t>(Nf_corr),
                                             static_cast<size_t>(Nf_corr)});
    
    dimss__.emplace_back(std::vector<size_t>{static_cast<size_t>(Ni)});
    
    dimss__.emplace_back(std::vector<size_t>{static_cast<size_t>(Nce)});
    
    dimss__.emplace_back(std::vector<size_t>{static_cast<size_t>(Nce)});
    
    dimss__.emplace_back(std::vector<size_t>{static_cast<size_t>(Ni),
                                             static_cast<size_t>(Ni)});
    
    dimss__.emplace_back(std::vector<size_t>{static_cast<size_t>(Nmiss)});
    
    dimss__.emplace_back(std::vector<size_t>{});
    
    dimss__.emplace_back(std::vector<size_t>{});
    
    dimss__.emplace_back(std::vector<size_t>{static_cast<size_t>(p)});
    
    } // get_dims() 
    
  inline void constrained_param_names(
                                      std::vector<std::string>& param_names__,
                                      bool emit_transformed_parameters__ = true,
                                      bool emit_generated_quantities__ = true) const
    final {
    
    for (int sym1__ = 1; sym1__ <= N_rms; ++sym1__) {
      {
        param_names__.emplace_back(std::string() + "rms_src_p" + '.' + std::to_string(sym1__));
      }}
    for (int sym1__ = 1; sym1__ <= N_alpha; ++sym1__) {
      {
        param_names__.emplace_back(std::string() + "gdp_alpha" + '.' + std::to_string(sym1__));
      }}
    for (int sym1__ = 1; sym1__ <= Nisqd2; ++sym1__) {
      {
        param_names__.emplace_back(std::string() + "resids" + '.' + std::to_string(sym1__));
      }}
    for (int sym1__ = 1; sym1__ <= Nl; ++sym1__) {
      {
        param_names__.emplace_back(std::string() + "loadings" + '.' + std::to_string(sym1__));
      }}
    param_names__.emplace_back(std::string() + "sigma_loadings");
    for (int sym1__ = 1; sym1__ <= Ni; ++sym1__) {
      {
        param_names__.emplace_back(std::string() + "res_sds" + '.' + std::to_string(sym1__));
      }}
    for (int sym1__ = 1; sym1__ <= Nf_corr; ++sym1__) {
      {
        for (int sym2__ = 1; sym2__ <= Nf_corr; ++sym2__) {
          {
            param_names__.emplace_back(std::string() + "phi_mat_chol" + '.' + std::to_string(sym2__) + '.' + std::to_string(sym1__));
          }}
      }}
    for (int sym1__ = 1; sym1__ <= Nce; ++sym1__) {
      {
        param_names__.emplace_back(std::string() + "res_cor_01" + '.' + std::to_string(sym1__));
      }}
    for (int sym1__ = 1; sym1__ <= N_complex; ++sym1__) {
      {
        param_names__.emplace_back(std::string() + "loadings_complex" + '.' + std::to_string(sym1__));
      }}
    for (int sym1__ = 1; sym1__ <= complex_struc; ++sym1__) {
      {
        param_names__.emplace_back(std::string() + "sigma_loadings_complex" + '.' + std::to_string(sym1__));
      }}
    for (int sym1__ = 1; sym1__ <= complex_struc; ++sym1__) {
      {
        param_names__.emplace_back(std::string() + "gdp_loadings_complex" + '.' + std::to_string(sym1__));
      }}
    for (int sym1__ = 1; sym1__ <= N_type; ++sym1__) {
      {
        param_names__.emplace_back(std::string() + "m_ln_int" + '.' + std::to_string(sym1__));
      }}
    for (int sym1__ = 1; sym1__ <= p; ++sym1__) {
      {
        param_names__.emplace_back(std::string() + "m_ln_beta" + '.' + std::to_string(sym1__));
      }}
    for (int sym1__ = 1; sym1__ <= Nmiss; ++sym1__) {
      {
        param_names__.emplace_back(std::string() + "miss_cor_01" + '.' + std::to_string(sym1__));
      }}
    for (int sym1__ = 1; sym1__ <= Nitem_miss; ++sym1__) {
      {
        param_names__.emplace_back(std::string() + "var_shifts" + '.' + std::to_string(sym1__));
      }}
    if (emit_transformed_parameters__) {
      
    }
    
    if (emit_generated_quantities__) {
      param_names__.emplace_back(std::string() + "rms_src");
      for (int sym1__ = 1; sym1__ <= Nf; ++sym1__) {
        {
          for (int sym2__ = 1; sym2__ <= Ni; ++sym2__) {
            {
              param_names__.emplace_back(std::string() + "Load_mat" + '.' + std::to_string(sym2__) + '.' + std::to_string(sym1__));
            }}
        }}
      for (int sym1__ = 1; sym1__ <= Nf_corr; ++sym1__) {
        {
          for (int sym2__ = 1; sym2__ <= Nf_corr; ++sym2__) {
            {
              param_names__.emplace_back(std::string() + "phi_mat" + '.' + std::to_string(sym2__) + '.' + std::to_string(sym1__));
            }}
        }}
      for (int sym1__ = 1; sym1__ <= Ni; ++sym1__) {
        {
          param_names__.emplace_back(std::string() + "res_var" + '.' + std::to_string(sym1__));
        }}
      for (int sym1__ = 1; sym1__ <= Nce; ++sym1__) {
        {
          param_names__.emplace_back(std::string() + "res_cor" + '.' + std::to_string(sym1__));
        }}
      for (int sym1__ = 1; sym1__ <= Nce; ++sym1__) {
        {
          param_names__.emplace_back(std::string() + "res_cov" + '.' + std::to_string(sym1__));
        }}
      for (int sym1__ = 1; sym1__ <= Ni; ++sym1__) {
        {
          for (int sym2__ = 1; sym2__ <= Ni; ++sym2__) {
            {
              param_names__.emplace_back(std::string() + "Resid" + '.' + std::to_string(sym2__) + '.' + std::to_string(sym1__));
            }}
        }}
      for (int sym1__ = 1; sym1__ <= Nmiss; ++sym1__) {
        {
          param_names__.emplace_back(std::string() + "miss_cor" + '.' + std::to_string(sym1__));
        }}
      param_names__.emplace_back(std::string() + "v_mn");
      param_names__.emplace_back(std::string() + "rmsea_mn");
      for (int sym1__ = 1; sym1__ <= p; ++sym1__) {
        {
          param_names__.emplace_back(std::string() + "rmsea_beta" + '.' + std::to_string(sym1__));
        }}
    }
    
    } // constrained_param_names() 
    
  inline void unconstrained_param_names(
                                        std::vector<std::string>& param_names__,
                                        bool emit_transformed_parameters__ = true,
                                        bool emit_generated_quantities__ = true) const
    final {
    
    for (int sym1__ = 1; sym1__ <= N_rms; ++sym1__) {
      {
        param_names__.emplace_back(std::string() + "rms_src_p" + '.' + std::to_string(sym1__));
      }}
    for (int sym1__ = 1; sym1__ <= N_alpha; ++sym1__) {
      {
        param_names__.emplace_back(std::string() + "gdp_alpha" + '.' + std::to_string(sym1__));
      }}
    for (int sym1__ = 1; sym1__ <= Nisqd2; ++sym1__) {
      {
        param_names__.emplace_back(std::string() + "resids" + '.' + std::to_string(sym1__));
      }}
    for (int sym1__ = 1; sym1__ <= Nl; ++sym1__) {
      {
        param_names__.emplace_back(std::string() + "loadings" + '.' + std::to_string(sym1__));
      }}
    param_names__.emplace_back(std::string() + "sigma_loadings");
    for (int sym1__ = 1; sym1__ <= Ni; ++sym1__) {
      {
        param_names__.emplace_back(std::string() + "res_sds" + '.' + std::to_string(sym1__));
      }}
    for (int sym1__ = 1; sym1__ <= ((Nf_corr * (Nf_corr - 1)) / 2); ++sym1__) {
      {
        param_names__.emplace_back(std::string() + "phi_mat_chol" + '.' + std::to_string(sym1__));
      }}
    for (int sym1__ = 1; sym1__ <= Nce; ++sym1__) {
      {
        param_names__.emplace_back(std::string() + "res_cor_01" + '.' + std::to_string(sym1__));
      }}
    for (int sym1__ = 1; sym1__ <= N_complex; ++sym1__) {
      {
        param_names__.emplace_back(std::string() + "loadings_complex" + '.' + std::to_string(sym1__));
      }}
    for (int sym1__ = 1; sym1__ <= complex_struc; ++sym1__) {
      {
        param_names__.emplace_back(std::string() + "sigma_loadings_complex" + '.' + std::to_string(sym1__));
      }}
    for (int sym1__ = 1; sym1__ <= complex_struc; ++sym1__) {
      {
        param_names__.emplace_back(std::string() + "gdp_loadings_complex" + '.' + std::to_string(sym1__));
      }}
    for (int sym1__ = 1; sym1__ <= N_type; ++sym1__) {
      {
        param_names__.emplace_back(std::string() + "m_ln_int" + '.' + std::to_string(sym1__));
      }}
    for (int sym1__ = 1; sym1__ <= p; ++sym1__) {
      {
        param_names__.emplace_back(std::string() + "m_ln_beta" + '.' + std::to_string(sym1__));
      }}
    for (int sym1__ = 1; sym1__ <= Nmiss; ++sym1__) {
      {
        param_names__.emplace_back(std::string() + "miss_cor_01" + '.' + std::to_string(sym1__));
      }}
    for (int sym1__ = 1; sym1__ <= Nitem_miss; ++sym1__) {
      {
        param_names__.emplace_back(std::string() + "var_shifts" + '.' + std::to_string(sym1__));
      }}
    if (emit_transformed_parameters__) {
      
    }
    
    if (emit_generated_quantities__) {
      param_names__.emplace_back(std::string() + "rms_src");
      for (int sym1__ = 1; sym1__ <= Nf; ++sym1__) {
        {
          for (int sym2__ = 1; sym2__ <= Ni; ++sym2__) {
            {
              param_names__.emplace_back(std::string() + "Load_mat" + '.' + std::to_string(sym2__) + '.' + std::to_string(sym1__));
            }}
        }}
      for (int sym1__ = 1; sym1__ <= Nf_corr; ++sym1__) {
        {
          for (int sym2__ = 1; sym2__ <= Nf_corr; ++sym2__) {
            {
              param_names__.emplace_back(std::string() + "phi_mat" + '.' + std::to_string(sym2__) + '.' + std::to_string(sym1__));
            }}
        }}
      for (int sym1__ = 1; sym1__ <= Ni; ++sym1__) {
        {
          param_names__.emplace_back(std::string() + "res_var" + '.' + std::to_string(sym1__));
        }}
      for (int sym1__ = 1; sym1__ <= Nce; ++sym1__) {
        {
          param_names__.emplace_back(std::string() + "res_cor" + '.' + std::to_string(sym1__));
        }}
      for (int sym1__ = 1; sym1__ <= Nce; ++sym1__) {
        {
          param_names__.emplace_back(std::string() + "res_cov" + '.' + std::to_string(sym1__));
        }}
      for (int sym1__ = 1; sym1__ <= Ni; ++sym1__) {
        {
          for (int sym2__ = 1; sym2__ <= Ni; ++sym2__) {
            {
              param_names__.emplace_back(std::string() + "Resid" + '.' + std::to_string(sym2__) + '.' + std::to_string(sym1__));
            }}
        }}
      for (int sym1__ = 1; sym1__ <= Nmiss; ++sym1__) {
        {
          param_names__.emplace_back(std::string() + "miss_cor" + '.' + std::to_string(sym1__));
        }}
      param_names__.emplace_back(std::string() + "v_mn");
      param_names__.emplace_back(std::string() + "rmsea_mn");
      for (int sym1__ = 1; sym1__ <= p; ++sym1__) {
        {
          param_names__.emplace_back(std::string() + "rmsea_beta" + '.' + std::to_string(sym1__));
        }}
    }
    
    } // unconstrained_param_names() 
    
  inline std::string get_constrained_sizedtypes() const {
    stringstream s__;
    s__ << "[{\"name\":\"rms_src_p\",\"type\":{\"name\":\"vector\",\"length\":" << N_rms << "},\"block\":\"parameters\"},{\"name\":\"gdp_alpha\",\"type\":{\"name\":\"vector\",\"length\":" << N_alpha << "},\"block\":\"parameters\"},{\"name\":\"resids\",\"type\":{\"name\":\"vector\",\"length\":" << Nisqd2 << "},\"block\":\"parameters\"},{\"name\":\"loadings\",\"type\":{\"name\":\"vector\",\"length\":" << Nl << "},\"block\":\"parameters\"},{\"name\":\"sigma_loadings\",\"type\":{\"name\":\"real\"},\"block\":\"parameters\"},{\"name\":\"res_sds\",\"type\":{\"name\":\"vector\",\"length\":" << Ni << "},\"block\":\"parameters\"},{\"name\":\"phi_mat_chol\",\"type\":{\"name\":\"matrix\",\"rows\":" << Nf_corr << ",\"cols\":" << Nf_corr << "},\"block\":\"parameters\"},{\"name\":\"res_cor_01\",\"type\":{\"name\":\"vector\",\"length\":" << Nce << "},\"block\":\"parameters\"},{\"name\":\"loadings_complex\",\"type\":{\"name\":\"vector\",\"length\":" << N_complex << "},\"block\":\"parameters\"},{\"name\":\"sigma_loadings_complex\",\"type\":{\"name\":\"vector\",\"length\":" << complex_struc << "},\"block\":\"parameters\"},{\"name\":\"gdp_loadings_complex\",\"type\":{\"name\":\"vector\",\"length\":" << complex_struc << "},\"block\":\"parameters\"},{\"name\":\"m_ln_int\",\"type\":{\"name\":\"vector\",\"length\":" << N_type << "},\"block\":\"parameters\"},{\"name\":\"m_ln_beta\",\"type\":{\"name\":\"vector\",\"length\":" << p << "},\"block\":\"parameters\"},{\"name\":\"miss_cor_01\",\"type\":{\"name\":\"vector\",\"length\":" << Nmiss << "},\"block\":\"parameters\"},{\"name\":\"var_shifts\",\"type\":{\"name\":\"vector\",\"length\":" << Nitem_miss << "},\"block\":\"parameters\"},{\"name\":\"rms_src\",\"type\":{\"name\":\"real\"},\"block\":\"generated_quantities\"},{\"name\":\"Load_mat\",\"type\":{\"name\":\"matrix\",\"rows\":" << Ni << ",\"cols\":" << Nf << "},\"block\":\"generated_quantities\"},{\"name\":\"phi_mat\",\"type\":{\"name\":\"matrix\",\"rows\":" << Nf_corr << ",\"cols\":" << Nf_corr << "},\"block\":\"generated_quantities\"},{\"name\":\"res_var\",\"type\":{\"name\":\"vector\",\"length\":" << Ni << "},\"block\":\"generated_quantities\"},{\"name\":\"res_cor\",\"type\":{\"name\":\"vector\",\"length\":" << Nce << "},\"block\":\"generated_quantities\"},{\"name\":\"res_cov\",\"type\":{\"name\":\"vector\",\"length\":" << Nce << "},\"block\":\"generated_quantities\"},{\"name\":\"Resid\",\"type\":{\"name\":\"matrix\",\"rows\":" << Ni << ",\"cols\":" << Ni << "},\"block\":\"generated_quantities\"},{\"name\":\"miss_cor\",\"type\":{\"name\":\"vector\",\"length\":" << Nmiss << "},\"block\":\"generated_quantities\"},{\"name\":\"v_mn\",\"type\":{\"name\":\"real\"},\"block\":\"generated_quantities\"},{\"name\":\"rmsea_mn\",\"type\":{\"name\":\"real\"},\"block\":\"generated_quantities\"},{\"name\":\"rmsea_beta\",\"type\":{\"name\":\"vector\",\"length\":" << p << "},\"block\":\"generated_quantities\"}]";
    return s__.str();
    } // get_constrained_sizedtypes() 
    
  inline std::string get_unconstrained_sizedtypes() const {
    stringstream s__;
    s__ << "[{\"name\":\"rms_src_p\",\"type\":{\"name\":\"vector\",\"length\":" << N_rms << "},\"block\":\"parameters\"},{\"name\":\"gdp_alpha\",\"type\":{\"name\":\"vector\",\"length\":" << N_alpha << "},\"block\":\"parameters\"},{\"name\":\"resids\",\"type\":{\"name\":\"vector\",\"length\":" << Nisqd2 << "},\"block\":\"parameters\"},{\"name\":\"loadings\",\"type\":{\"name\":\"vector\",\"length\":" << Nl << "},\"block\":\"parameters\"},{\"name\":\"sigma_loadings\",\"type\":{\"name\":\"real\"},\"block\":\"parameters\"},{\"name\":\"res_sds\",\"type\":{\"name\":\"vector\",\"length\":" << Ni << "},\"block\":\"parameters\"},{\"name\":\"phi_mat_chol\",\"type\":{\"name\":\"vector\",\"length\":" << ((Nf_corr * (Nf_corr - 1)) / 2) << "},\"block\":\"parameters\"},{\"name\":\"res_cor_01\",\"type\":{\"name\":\"vector\",\"length\":" << Nce << "},\"block\":\"parameters\"},{\"name\":\"loadings_complex\",\"type\":{\"name\":\"vector\",\"length\":" << N_complex << "},\"block\":\"parameters\"},{\"name\":\"sigma_loadings_complex\",\"type\":{\"name\":\"vector\",\"length\":" << complex_struc << "},\"block\":\"parameters\"},{\"name\":\"gdp_loadings_complex\",\"type\":{\"name\":\"vector\",\"length\":" << complex_struc << "},\"block\":\"parameters\"},{\"name\":\"m_ln_int\",\"type\":{\"name\":\"vector\",\"length\":" << N_type << "},\"block\":\"parameters\"},{\"name\":\"m_ln_beta\",\"type\":{\"name\":\"vector\",\"length\":" << p << "},\"block\":\"parameters\"},{\"name\":\"miss_cor_01\",\"type\":{\"name\":\"vector\",\"length\":" << Nmiss << "},\"block\":\"parameters\"},{\"name\":\"var_shifts\",\"type\":{\"name\":\"vector\",\"length\":" << Nitem_miss << "},\"block\":\"parameters\"},{\"name\":\"rms_src\",\"type\":{\"name\":\"real\"},\"block\":\"generated_quantities\"},{\"name\":\"Load_mat\",\"type\":{\"name\":\"matrix\",\"rows\":" << Ni << ",\"cols\":" << Nf << "},\"block\":\"generated_quantities\"},{\"name\":\"phi_mat\",\"type\":{\"name\":\"matrix\",\"rows\":" << Nf_corr << ",\"cols\":" << Nf_corr << "},\"block\":\"generated_quantities\"},{\"name\":\"res_var\",\"type\":{\"name\":\"vector\",\"length\":" << Ni << "},\"block\":\"generated_quantities\"},{\"name\":\"res_cor\",\"type\":{\"name\":\"vector\",\"length\":" << Nce << "},\"block\":\"generated_quantities\"},{\"name\":\"res_cov\",\"type\":{\"name\":\"vector\",\"length\":" << Nce << "},\"block\":\"generated_quantities\"},{\"name\":\"Resid\",\"type\":{\"name\":\"matrix\",\"rows\":" << Ni << ",\"cols\":" << Ni << "},\"block\":\"generated_quantities\"},{\"name\":\"miss_cor\",\"type\":{\"name\":\"vector\",\"length\":" << Nmiss << "},\"block\":\"generated_quantities\"},{\"name\":\"v_mn\",\"type\":{\"name\":\"real\"},\"block\":\"generated_quantities\"},{\"name\":\"rmsea_mn\",\"type\":{\"name\":\"real\"},\"block\":\"generated_quantities\"},{\"name\":\"rmsea_beta\",\"type\":{\"name\":\"vector\",\"length\":" << p << "},\"block\":\"generated_quantities\"}]";
    return s__.str();
    } // get_unconstrained_sizedtypes() 
    
  
    // Begin method overload boilerplate
    template <typename RNG>
    inline void write_array(RNG& base_rng,
                            Eigen::Matrix<double,Eigen::Dynamic,1>& params_r,
                            Eigen::Matrix<double,Eigen::Dynamic,1>& vars,
                            const bool emit_transformed_parameters = true,
                            const bool emit_generated_quantities = true,
                            std::ostream* pstream = nullptr) const {
      std::vector<double> vars_vec(vars.size());
      std::vector<int> params_i;
      write_array_impl(base_rng, params_r, params_i, vars_vec,
          emit_transformed_parameters, emit_generated_quantities, pstream);
      vars.resize(vars_vec.size());
      for (int i = 0; i < vars.size(); ++i) {
        vars.coeffRef(i) = vars_vec[i];
      }
    }
    template <typename RNG>
    inline void write_array(RNG& base_rng, std::vector<double>& params_r,
                            std::vector<int>& params_i,
                            std::vector<double>& vars,
                            bool emit_transformed_parameters = true,
                            bool emit_generated_quantities = true,
                            std::ostream* pstream = nullptr) const {
      write_array_impl(base_rng, params_r, params_i, vars, emit_transformed_parameters, emit_generated_quantities, pstream);
    }
    template <bool propto__, bool jacobian__, typename T_>
    inline T_ log_prob(Eigen::Matrix<T_,Eigen::Dynamic,1>& params_r,
                       std::ostream* pstream = nullptr) const {
      Eigen::Matrix<int, -1, 1> params_i;
      return log_prob_impl<propto__, jacobian__>(params_r, params_i, pstream);
    }
    template <bool propto__, bool jacobian__, typename T__>
    inline T__ log_prob(std::vector<T__>& params_r,
                        std::vector<int>& params_i,
                        std::ostream* pstream = nullptr) const {
      return log_prob_impl<propto__, jacobian__>(params_r, params_i, pstream);
    }
  
    inline void transform_inits(const stan::io::var_context& context,
                         Eigen::Matrix<double, Eigen::Dynamic, 1>& params_r,
                         std::ostream* pstream = nullptr) const final {
      std::vector<double> params_r_vec(params_r.size());
      std::vector<int> params_i;
      transform_inits_impl(context, params_i, params_r_vec, pstream);
      params_r.resize(params_r_vec.size());
      for (int i = 0; i < params_r.size(); ++i) {
        params_r.coeffRef(i) = params_r_vec[i];
      }
    }
    inline void transform_inits(const stan::io::var_context& context,
                                std::vector<int>& params_i,
                                std::vector<double>& vars,
                                std::ostream* pstream = nullptr) const final {
      transform_inits_impl(context, params_i, vars, pstream);
    }        
};
}
using stan_model = model_meta_cfa_resid_rs_namespace::model_meta_cfa_resid_rs;
#ifndef USING_R
// Boilerplate
stan::model::model_base& new_model(
        stan::io::var_context& data_context,
        unsigned int seed,
        std::ostream* msg_stream) {
  stan_model* m = new stan_model(data_context, seed, msg_stream);
  return *m;
}
stan::math::profile_map& get_stan_profile_data() {
  return model_meta_cfa_resid_rs_namespace::profiles__;
}
#endif
#endif
