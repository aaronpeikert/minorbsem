// Generated by rstantools.  Do not edit by hand.

/*
    minorbsem is free software: you can redistribute it and/or modify
    it under the terms of the GNU General Public License as published by
    the Free Software Foundation, either version 3 of the License, or
    (at your option) any later version.

    minorbsem is distributed in the hope that it will be useful,
    but WITHOUT ANY WARRANTY; without even the implied warranty of
    MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
    GNU General Public License for more details.

    You should have received a copy of the GNU General Public License
    along with minorbsem.  If not, see <http://www.gnu.org/licenses/>.
*/
#ifndef MODELS_HPP
#define MODELS_HPP
#define STAN__SERVICES__COMMAND_HPP
#ifndef USE_STANC3
#define USE_STANC3
#endif
#include <rstan/rstaninc.hpp>
// Code generated by %%NAME%% %%VERSION%%
#include <stan/model/model_header.hpp>
namespace model_sem_resid_rs_namespace {
inline void validate_positive_index(const char* var_name, const char* expr,
                                    int val) {
  if (val < 1) {
    std::stringstream msg;
    msg << "Found dimension size less than one in simplex declaration"
        << "; variable=" << var_name << "; dimension size expression=" << expr
        << "; expression value=" << val;
    std::string msg_str(msg.str());
    throw std::invalid_argument(msg_str.c_str());
  }
}
inline void validate_unit_vector_index(const char* var_name, const char* expr,
                                       int val) {
  if (val <= 1) {
    std::stringstream msg;
    if (val == 1) {
      msg << "Found dimension size one in unit vector declaration."
          << " One-dimensional unit vector is discrete"
          << " but the target distribution must be continuous."
          << " variable=" << var_name << "; dimension size expression=" << expr;
    } else {
      msg << "Found dimension size less than one in unit vector declaration"
          << "; variable=" << var_name << "; dimension size expression=" << expr
          << "; expression value=" << val;
    }
    std::string msg_str(msg.str());
    throw std::invalid_argument(msg_str.c_str());
  }
}
using std::istream;
using std::string;
using std::stringstream;
using std::vector;
using std::pow;
using stan::io::dump;
using stan::math::lgamma;
using stan::model::model_base_crtp;
using stan::model::rvalue;
using stan::model::cons_list;
using stan::model::index_uni;
using stan::model::index_max;
using stan::model::index_min;
using stan::model::index_min_max;
using stan::model::index_multi;
using stan::model::index_omni;
using stan::model::nil_index_list;
using namespace stan::math;
using stan::math::pow; 
stan::math::profile_map profiles__;
static int current_statement__= 0;
static const std::vector<string> locations_array__ = {" (found before start of program)",
                                                      " (in 'sem_resid_rs', line 87, column 2 to column 39)",
                                                      " (in 'sem_resid_rs', line 88, column 2 to column 41)",
                                                      " (in 'sem_resid_rs', line 89, column 2 to column 24)",
                                                      " (in 'sem_resid_rs', line 90, column 2 to column 38)",
                                                      " (in 'sem_resid_rs', line 91, column 2 to column 33)",
                                                      " (in 'sem_resid_rs', line 92, column 2 to column 31)",
                                                      " (in 'sem_resid_rs', line 93, column 2 to column 32)",
                                                      " (in 'sem_resid_rs', line 94, column 2 to column 51)",
                                                      " (in 'sem_resid_rs', line 95, column 2 to column 47)",
                                                      " (in 'sem_resid_rs', line 96, column 2 to column 27)",
                                                      " (in 'sem_resid_rs', line 97, column 2 to column 47)",
                                                      " (in 'sem_resid_rs', line 98, column 2 to column 28)",
                                                      " (in 'sem_resid_rs', line 216, column 2 to column 13)",
                                                      " (in 'sem_resid_rs', line 217, column 2 to column 13)",
                                                      " (in 'sem_resid_rs', line 218, column 2 to column 33)",
                                                      " (in 'sem_resid_rs', line 219, column 2 to column 26)",
                                                      " (in 'sem_resid_rs', line 220, column 2 to column 52)",
                                                      " (in 'sem_resid_rs', line 221, column 2 to column 52)",
                                                      " (in 'sem_resid_rs', line 222, column 2 to column 50)",
                                                      " (in 'sem_resid_rs', line 223, column 2 to column 50)",
                                                      " (in 'sem_resid_rs', line 224, column 2 to column 38)",
                                                      " (in 'sem_resid_rs', line 225, column 2 to column 22)",
                                                      " (in 'sem_resid_rs', line 226, column 2 to column 47)",
                                                      " (in 'sem_resid_rs', line 227, column 2 to column 39)",
                                                      " (in 'sem_resid_rs', line 228, column 2 to column 43)",
                                                      " (in 'sem_resid_rs', line 229, column 2 to column 22)",
                                                      " (in 'sem_resid_rs', line 230, column 2 to column 49)",
                                                      " (in 'sem_resid_rs', line 234, column 4 to column 18)",
                                                      " (in 'sem_resid_rs', line 233, column 9 to line 235, column 3)",
                                                      " (in 'sem_resid_rs', line 232, column 4 to column 27)",
                                                      " (in 'sem_resid_rs', line 231, column 21 to line 233, column 3)",
                                                      " (in 'sem_resid_rs', line 231, column 2 to line 235, column 3)",
                                                      " (in 'sem_resid_rs', line 241, column 4 to line 243, column 6)",
                                                      " (in 'sem_resid_rs', line 240, column 26 to line 244, column 3)",
                                                      " (in 'sem_resid_rs', line 240, column 9 to line 244, column 3)",
                                                      " (in 'sem_resid_rs', line 239, column 4 to column 29)",
                                                      " (in 'sem_resid_rs', line 238, column 26 to line 240, column 3)",
                                                      " (in 'sem_resid_rs', line 238, column 9 to line 244, column 3)",
                                                      " (in 'sem_resid_rs', line 237, column 4 to column 24)",
                                                      " (in 'sem_resid_rs', line 236, column 19 to line 238, column 3)",
                                                      " (in 'sem_resid_rs', line 236, column 2 to line 244, column 3)",
                                                      " (in 'sem_resid_rs', line 246, column 4 to column 16)",
                                                      " (in 'sem_resid_rs', line 249, column 8 to column 17)",
                                                      " (in 'sem_resid_rs', line 250, column 8 to column 49)",
                                                      " (in 'sem_resid_rs', line 251, column 8 to column 34)",
                                                      " (in 'sem_resid_rs', line 248, column 27 to line 252, column 7)",
                                                      " (in 'sem_resid_rs', line 248, column 6 to line 252, column 7)",
                                                      " (in 'sem_resid_rs', line 247, column 20 to line 253, column 5)",
                                                      " (in 'sem_resid_rs', line 247, column 4 to line 253, column 5)",
                                                      " (in 'sem_resid_rs', line 245, column 19 to line 254, column 3)",
                                                      " (in 'sem_resid_rs', line 245, column 2 to line 254, column 3)",
                                                      " (in 'sem_resid_rs', line 256, column 4 to column 11)",
                                                      " (in 'sem_resid_rs', line 257, column 11 to column 13)",
                                                      " (in 'sem_resid_rs', line 257, column 15 to column 17)",
                                                      " (in 'sem_resid_rs', line 257, column 4 to column 25)",
                                                      " (in 'sem_resid_rs', line 258, column 11 to column 13)",
                                                      " (in 'sem_resid_rs', line 258, column 15 to column 17)",
                                                      " (in 'sem_resid_rs', line 258, column 4 to column 27)",
                                                      " (in 'sem_resid_rs', line 259, column 11 to column 13)",
                                                      " (in 'sem_resid_rs', line 259, column 15 to column 17)",
                                                      " (in 'sem_resid_rs', line 259, column 4 to column 25)",
                                                      " (in 'sem_resid_rs', line 260, column 11 to column 13)",
                                                      " (in 'sem_resid_rs', line 260, column 15 to column 22)",
                                                      " (in 'sem_resid_rs', line 260, column 4 to column 63)",
                                                      " (in 'sem_resid_rs', line 261, column 11 to column 13)",
                                                      " (in 'sem_resid_rs', line 261, column 15 to column 17)",
                                                      " (in 'sem_resid_rs', line 261, column 4 to column 29)",
                                                      " (in 'sem_resid_rs', line 262, column 11 to column 13)",
                                                      " (in 'sem_resid_rs', line 262, column 4 to column 27)",
                                                      " (in 'sem_resid_rs', line 263, column 11 to column 13)",
                                                      " (in 'sem_resid_rs', line 263, column 15 to column 18)",
                                                      " (in 'sem_resid_rs', line 263, column 4 to column 61)",
                                                      " (in 'sem_resid_rs', line 264, column 11 to column 13)",
                                                      " (in 'sem_resid_rs', line 264, column 15 to column 17)",
                                                      " (in 'sem_resid_rs', line 264, column 4 to column 37)",
                                                      " (in 'sem_resid_rs', line 265, column 11 to column 13)",
                                                      " (in 'sem_resid_rs', line 265, column 15 to column 17)",
                                                      " (in 'sem_resid_rs', line 265, column 4 to column 36)",
                                                      " (in 'sem_resid_rs', line 266, column 11 to column 13)",
                                                      " (in 'sem_resid_rs', line 266, column 15 to column 17)",
                                                      " (in 'sem_resid_rs', line 266, column 4 to column 43)",
                                                      " (in 'sem_resid_rs', line 267, column 11 to column 13)",
                                                      " (in 'sem_resid_rs', line 267, column 4 to column 29)",
                                                      " (in 'sem_resid_rs', line 268, column 11 to column 13)",
                                                      " (in 'sem_resid_rs', line 268, column 4 to column 25)",
                                                      " (in 'sem_resid_rs', line 269, column 11 to column 13)",
                                                      " (in 'sem_resid_rs', line 269, column 4 to column 26)",
                                                      " (in 'sem_resid_rs', line 271, column 6 to column 43)",
                                                      " (in 'sem_resid_rs', line 273, column 40 to column 54)",
                                                      " (in 'sem_resid_rs', line 273, column 8 to column 54)",
                                                      " (in 'sem_resid_rs', line 276, column 12 to column 26)",
                                                      " (in 'sem_resid_rs', line 277, column 12 to column 69)",
                                                      " (in 'sem_resid_rs', line 275, column 39 to line 278, column 11)",
                                                      " (in 'sem_resid_rs', line 275, column 10 to line 278, column 11)",
                                                      " (in 'sem_resid_rs', line 274, column 24 to line 279, column 9)",
                                                      " (in 'sem_resid_rs', line 274, column 8 to line 279, column 9)",
                                                      " (in 'sem_resid_rs', line 272, column 22 to line 280, column 7)",
                                                      " (in 'sem_resid_rs', line 272, column 6 to line 280, column 7)",
                                                      " (in 'sem_resid_rs', line 286, column 14 to column 28)",
                                                      " (in 'sem_resid_rs', line 287, column 14 to column 50)",
                                                      " (in 'sem_resid_rs', line 285, column 17 to line 288, column 13)",
                                                      " (in 'sem_resid_rs', line 284, column 33 to column 52)",
                                                      " (in 'sem_resid_rs', line 284, column 12 to line 288, column 13)",
                                                      " (in 'sem_resid_rs', line 283, column 42 to line 289, column 11)",
                                                      " (in 'sem_resid_rs', line 283, column 10 to line 289, column 11)",
                                                      " (in 'sem_resid_rs', line 282, column 24 to line 290, column 9)",
                                                      " (in 'sem_resid_rs', line 282, column 8 to line 290, column 9)",
                                                      " (in 'sem_resid_rs', line 281, column 22 to line 291, column 7)",
                                                      " (in 'sem_resid_rs', line 281, column 6 to line 291, column 7)",
                                                      " (in 'sem_resid_rs', line 270, column 4 to line 292, column 5)",
                                                      " (in 'sem_resid_rs', line 293, column 4 to column 26)",
                                                      " (in 'sem_resid_rs', line 294, column 4 to column 26)",
                                                      " (in 'sem_resid_rs', line 295, column 4 to column 74)",
                                                      " (in 'sem_resid_rs', line 296, column 4 to column 58)",
                                                      " (in 'sem_resid_rs', line 298, column 6 to line 299, column 53)",
                                                      " (in 'sem_resid_rs', line 300, column 6 to line 301, column 53)",
                                                      " (in 'sem_resid_rs', line 297, column 25 to line 302, column 5)",
                                                      " (in 'sem_resid_rs', line 297, column 4 to line 302, column 5)",
                                                      " (in 'sem_resid_rs', line 303, column 4 to column 38)",
                                                      " (in 'sem_resid_rs', line 304, column 4 to column 48)",
                                                      " (in 'sem_resid_rs', line 306, column 6 to line 307, column 52)",
                                                      " (in 'sem_resid_rs', line 308, column 6 to line 309, column 52)",
                                                      " (in 'sem_resid_rs', line 305, column 21 to line 310, column 5)",
                                                      " (in 'sem_resid_rs', line 305, column 4 to line 310, column 5)",
                                                      " (in 'sem_resid_rs', line 311, column 4 to column 52)",
                                                      " (in 'sem_resid_rs', line 312, column 4 to column 58)",
                                                      " (in 'sem_resid_rs', line 313, column 4 to line 317, column 21)",
                                                      " (in 'sem_resid_rs', line 318, column 4 to column 32)",
                                                      " (in 'sem_resid_rs', line 320, column 6 to column 18)",
                                                      " (in 'sem_resid_rs', line 323, column 10 to column 19)",
                                                      " (in 'sem_resid_rs', line 324, column 10 to column 88)",
                                                      " (in 'sem_resid_rs', line 325, column 10 to column 36)",
                                                      " (in 'sem_resid_rs', line 322, column 29 to line 326, column 9)",
                                                      " (in 'sem_resid_rs', line 322, column 8 to line 326, column 9)",
                                                      " (in 'sem_resid_rs', line 321, column 22 to line 327, column 7)",
                                                      " (in 'sem_resid_rs', line 321, column 6 to line 327, column 7)",
                                                      " (in 'sem_resid_rs', line 319, column 21 to line 328, column 5)",
                                                      " (in 'sem_resid_rs', line 319, column 4 to line 328, column 5)",
                                                      " (in 'sem_resid_rs', line 342, column 6 to column 56)",
                                                      " (in 'sem_resid_rs', line 343, column 6 to column 68)",
                                                      " (in 'sem_resid_rs', line 344, column 6 to column 72)",
                                                      " (in 'sem_resid_rs', line 341, column 11 to line 345, column 5)",
                                                      " (in 'sem_resid_rs', line 337, column 8 to column 58)",
                                                      " (in 'sem_resid_rs', line 338, column 8 to column 57)",
                                                      " (in 'sem_resid_rs', line 339, column 8 to column 61)",
                                                      " (in 'sem_resid_rs', line 336, column 31 to line 340, column 7)",
                                                      " (in 'sem_resid_rs', line 336, column 13 to line 340, column 7)",
                                                      " (in 'sem_resid_rs', line 331, column 8 to column 48)",
                                                      " (in 'sem_resid_rs', line 332, column 8 to column 48)",
                                                      " (in 'sem_resid_rs', line 333, column 8 to column 60)",
                                                      " (in 'sem_resid_rs', line 334, column 8 to column 81)",
                                                      " (in 'sem_resid_rs', line 335, column 8 to column 85)",
                                                      " (in 'sem_resid_rs', line 330, column 24 to line 336, column 7)",
                                                      " (in 'sem_resid_rs', line 330, column 6 to line 340, column 7)",
                                                      " (in 'sem_resid_rs', line 329, column 38 to line 341, column 5)",
                                                      " (in 'sem_resid_rs', line 329, column 4 to line 345, column 5)",
                                                      " (in 'sem_resid_rs', line 346, column 4 to column 36)",
                                                      " (in 'sem_resid_rs', line 348, column 4 to line 351, column 8)",
                                                      " (in 'sem_resid_rs', line 353, column 6 to column 37)",
                                                      " (in 'sem_resid_rs', line 354, column 6 to column 37)",
                                                      " (in 'sem_resid_rs', line 355, column 6 to column 37)",
                                                      " (in 'sem_resid_rs', line 356, column 6 to column 61)",
                                                      " (in 'sem_resid_rs', line 352, column 20 to line 357, column 5)",
                                                      " (in 'sem_resid_rs', line 352, column 4 to line 357, column 5)",
                                                      " (in 'sem_resid_rs', line 359, column 6 to column 42)",
                                                      " (in 'sem_resid_rs', line 358, column 20 to line 360, column 5)",
                                                      " (in 'sem_resid_rs', line 358, column 4 to line 360, column 5)",
                                                      " (in 'sem_resid_rs', line 255, column 2 to line 361, column 3)",
                                                      " (in 'sem_resid_rs', line 363, column 4 to column 60)",
                                                      " (in 'sem_resid_rs', line 362, column 19 to line 364, column 3)",
                                                      " (in 'sem_resid_rs', line 362, column 2 to line 364, column 3)",
                                                      " (in 'sem_resid_rs', line 101, column 2 to column 27)",
                                                      " (in 'sem_resid_rs', line 113, column 4 to column 32)",
                                                      " (in 'sem_resid_rs', line 114, column 4 to line 115, column 29)",
                                                      " (in 'sem_resid_rs', line 111, column 26 to line 116, column 3)",
                                                      " (in 'sem_resid_rs', line 111, column 9 to line 116, column 3)",
                                                      " (in 'sem_resid_rs', line 110, column 4 to column 28)",
                                                      " (in 'sem_resid_rs', line 108, column 26 to line 111, column 3)",
                                                      " (in 'sem_resid_rs', line 108, column 9 to line 116, column 3)",
                                                      " (in 'sem_resid_rs', line 107, column 4 to column 38)",
                                                      " (in 'sem_resid_rs', line 105, column 26 to line 108, column 3)",
                                                      " (in 'sem_resid_rs', line 105, column 9 to line 116, column 3)",
                                                      " (in 'sem_resid_rs', line 104, column 4 to column 26)",
                                                      " (in 'sem_resid_rs', line 102, column 19 to line 105, column 3)",
                                                      " (in 'sem_resid_rs', line 102, column 2 to line 116, column 3)",
                                                      " (in 'sem_resid_rs', line 117, column 2 to column 39)",
                                                      " (in 'sem_resid_rs', line 118, column 2 to column 43)",
                                                      " (in 'sem_resid_rs', line 120, column 2 to column 30)",
                                                      " (in 'sem_resid_rs', line 121, column 2 to column 36)",
                                                      " (in 'sem_resid_rs', line 122, column 2 to column 36)",
                                                      " (in 'sem_resid_rs', line 123, column 2 to column 36)",
                                                      " (in 'sem_resid_rs', line 124, column 2 to column 23)",
                                                      " (in 'sem_resid_rs', line 125, column 2 to column 40)",
                                                      " (in 'sem_resid_rs', line 127, column 4 to column 11)",
                                                      " (in 'sem_resid_rs', line 128, column 11 to column 13)",
                                                      " (in 'sem_resid_rs', line 128, column 15 to column 17)",
                                                      " (in 'sem_resid_rs', line 128, column 4 to column 25)",
                                                      " (in 'sem_resid_rs', line 129, column 11 to column 13)",
                                                      " (in 'sem_resid_rs', line 129, column 4 to column 41)",
                                                      " (in 'sem_resid_rs', line 130, column 11 to column 14)",
                                                      " (in 'sem_resid_rs', line 130, column 4 to column 45)",
                                                      " (in 'sem_resid_rs', line 131, column 11 to column 13)",
                                                      " (in 'sem_resid_rs', line 131, column 15 to column 17)",
                                                      " (in 'sem_resid_rs', line 131, column 4 to column 52)",
                                                      " (in 'sem_resid_rs', line 132, column 11 to column 13)",
                                                      " (in 'sem_resid_rs', line 132, column 15 to column 17)",
                                                      " (in 'sem_resid_rs', line 132, column 4 to column 52)",
                                                      " (in 'sem_resid_rs', line 133, column 11 to column 13)",
                                                      " (in 'sem_resid_rs', line 133, column 4 to column 40)",
                                                      " (in 'sem_resid_rs', line 134, column 11 to column 18)",
                                                      " (in 'sem_resid_rs', line 134, column 4 to column 49)",
                                                      " (in 'sem_resid_rs', line 135, column 11 to column 13)",
                                                      " (in 'sem_resid_rs', line 135, column 15 to column 22)",
                                                      " (in 'sem_resid_rs', line 135, column 4 to column 63)",
                                                      " (in 'sem_resid_rs', line 136, column 11 to column 13)",
                                                      " (in 'sem_resid_rs', line 136, column 15 to column 17)",
                                                      " (in 'sem_resid_rs', line 136, column 4 to column 29)",
                                                      " (in 'sem_resid_rs', line 137, column 11 to column 13)",
                                                      " (in 'sem_resid_rs', line 137, column 4 to column 27)",
                                                      " (in 'sem_resid_rs', line 138, column 11 to column 13)",
                                                      " (in 'sem_resid_rs', line 138, column 15 to column 18)",
                                                      " (in 'sem_resid_rs', line 138, column 4 to column 61)",
                                                      " (in 'sem_resid_rs', line 139, column 11 to column 13)",
                                                      " (in 'sem_resid_rs', line 139, column 15 to column 17)",
                                                      " (in 'sem_resid_rs', line 139, column 4 to column 37)",
                                                      " (in 'sem_resid_rs', line 140, column 11 to column 13)",
                                                      " (in 'sem_resid_rs', line 140, column 15 to column 17)",
                                                      " (in 'sem_resid_rs', line 140, column 4 to column 43)",
                                                      " (in 'sem_resid_rs', line 141, column 11 to column 13)",
                                                      " (in 'sem_resid_rs', line 141, column 4 to column 29)",
                                                      " (in 'sem_resid_rs', line 142, column 11 to column 13)",
                                                      " (in 'sem_resid_rs', line 142, column 4 to column 25)",
                                                      " (in 'sem_resid_rs', line 144, column 6 to column 43)",
                                                      " (in 'sem_resid_rs', line 146, column 40 to column 54)",
                                                      " (in 'sem_resid_rs', line 146, column 8 to column 54)",
                                                      " (in 'sem_resid_rs', line 149, column 12 to column 26)",
                                                      " (in 'sem_resid_rs', line 150, column 12 to column 69)",
                                                      " (in 'sem_resid_rs', line 148, column 39 to line 151, column 11)",
                                                      " (in 'sem_resid_rs', line 148, column 10 to line 151, column 11)",
                                                      " (in 'sem_resid_rs', line 147, column 24 to line 152, column 9)",
                                                      " (in 'sem_resid_rs', line 147, column 8 to line 152, column 9)",
                                                      " (in 'sem_resid_rs', line 145, column 22 to line 153, column 7)",
                                                      " (in 'sem_resid_rs', line 145, column 6 to line 153, column 7)",
                                                      " (in 'sem_resid_rs', line 159, column 14 to column 28)",
                                                      " (in 'sem_resid_rs', line 160, column 14 to column 50)",
                                                      " (in 'sem_resid_rs', line 158, column 17 to line 161, column 13)",
                                                      " (in 'sem_resid_rs', line 157, column 33 to column 52)",
                                                      " (in 'sem_resid_rs', line 157, column 12 to line 161, column 13)",
                                                      " (in 'sem_resid_rs', line 156, column 42 to line 162, column 11)",
                                                      " (in 'sem_resid_rs', line 156, column 10 to line 162, column 11)",
                                                      " (in 'sem_resid_rs', line 155, column 24 to line 163, column 9)",
                                                      " (in 'sem_resid_rs', line 155, column 8 to line 163, column 9)",
                                                      " (in 'sem_resid_rs', line 154, column 22 to line 164, column 7)",
                                                      " (in 'sem_resid_rs', line 154, column 6 to line 164, column 7)",
                                                      " (in 'sem_resid_rs', line 143, column 4 to line 165, column 5)",
                                                      " (in 'sem_resid_rs', line 166, column 4 to column 92)",
                                                      " (in 'sem_resid_rs', line 168, column 6 to line 169, column 53)",
                                                      " (in 'sem_resid_rs', line 170, column 6 to line 171, column 53)",
                                                      " (in 'sem_resid_rs', line 167, column 25 to line 172, column 5)",
                                                      " (in 'sem_resid_rs', line 167, column 4 to line 172, column 5)",
                                                      " (in 'sem_resid_rs', line 173, column 4 to column 38)",
                                                      " (in 'sem_resid_rs', line 174, column 4 to column 48)",
                                                      " (in 'sem_resid_rs', line 176, column 6 to line 177, column 52)",
                                                      " (in 'sem_resid_rs', line 178, column 6 to line 179, column 52)",
                                                      " (in 'sem_resid_rs', line 175, column 21 to line 180, column 5)",
                                                      " (in 'sem_resid_rs', line 175, column 4 to line 180, column 5)",
                                                      " (in 'sem_resid_rs', line 181, column 4 to column 52)",
                                                      " (in 'sem_resid_rs', line 182, column 4 to column 58)",
                                                      " (in 'sem_resid_rs', line 183, column 4 to line 187, column 21)",
                                                      " (in 'sem_resid_rs', line 188, column 4 to column 32)",
                                                      " (in 'sem_resid_rs', line 190, column 6 to column 18)",
                                                      " (in 'sem_resid_rs', line 193, column 10 to column 19)",
                                                      " (in 'sem_resid_rs', line 194, column 10 to column 88)",
                                                      " (in 'sem_resid_rs', line 195, column 10 to column 36)",
                                                      " (in 'sem_resid_rs', line 192, column 29 to line 196, column 9)",
                                                      " (in 'sem_resid_rs', line 192, column 8 to line 196, column 9)",
                                                      " (in 'sem_resid_rs', line 191, column 22 to line 197, column 7)",
                                                      " (in 'sem_resid_rs', line 191, column 6 to line 197, column 7)",
                                                      " (in 'sem_resid_rs', line 189, column 21 to line 198, column 5)",
                                                      " (in 'sem_resid_rs', line 189, column 4 to line 198, column 5)",
                                                      " (in 'sem_resid_rs', line 200, column 6 to column 52)",
                                                      " (in 'sem_resid_rs', line 199, column 22 to line 201, column 5)",
                                                      " (in 'sem_resid_rs', line 199, column 4 to line 201, column 5)",
                                                      " (in 'sem_resid_rs', line 211, column 6 to column 50)",
                                                      " (in 'sem_resid_rs', line 210, column 11 to line 212, column 5)",
                                                      " (in 'sem_resid_rs', line 203, column 6 to column 46)",
                                                      " (in 'sem_resid_rs', line 207, column 8 to column 42)",
                                                      " (in 'sem_resid_rs', line 208, column 8 to column 52)",
                                                      " (in 'sem_resid_rs', line 206, column 31 to line 209, column 7)",
                                                      " (in 'sem_resid_rs', line 206, column 13 to line 209, column 7)",
                                                      " (in 'sem_resid_rs', line 205, column 8 to column 76)",
                                                      " (in 'sem_resid_rs', line 204, column 24 to line 206, column 7)",
                                                      " (in 'sem_resid_rs', line 204, column 6 to line 209, column 7)",
                                                      " (in 'sem_resid_rs', line 202, column 38 to line 210, column 5)",
                                                      " (in 'sem_resid_rs', line 202, column 4 to line 212, column 5)",
                                                      " (in 'sem_resid_rs', line 126, column 2 to line 213, column 3)",
                                                      " (in 'sem_resid_rs', line 33, column 2 to column 9)",
                                                      " (in 'sem_resid_rs', line 34, column 2 to column 9)",
                                                      " (in 'sem_resid_rs', line 35, column 9 to column 11)",
                                                      " (in 'sem_resid_rs', line 35, column 13 to column 15)",
                                                      " (in 'sem_resid_rs', line 35, column 2 to column 19)",
                                                      " (in 'sem_resid_rs', line 36, column 2 to column 9)",
                                                      " (in 'sem_resid_rs', line 37, column 2 to column 10)",
                                                      " (in 'sem_resid_rs', line 38, column 8 to column 11)",
                                                      " (in 'sem_resid_rs', line 38, column 2 to column 30)",
                                                      " (in 'sem_resid_rs', line 39, column 9 to column 11)",
                                                      " (in 'sem_resid_rs', line 39, column 13 to column 15)",
                                                      " (in 'sem_resid_rs', line 39, column 2 to column 33)",
                                                      " (in 'sem_resid_rs', line 40, column 8 to column 10)",
                                                      " (in 'sem_resid_rs', line 40, column 2 to column 24)",
                                                      " (in 'sem_resid_rs', line 41, column 2 to column 14)",
                                                      " (in 'sem_resid_rs', line 42, column 8 to column 15)",
                                                      " (in 'sem_resid_rs', line 42, column 2 to column 35)",
                                                      " (in 'sem_resid_rs', line 43, column 8 to column 10)",
                                                      " (in 'sem_resid_rs', line 43, column 12 to column 14)",
                                                      " (in 'sem_resid_rs', line 43, column 2 to column 33)",
                                                      " (in 'sem_resid_rs', line 44, column 2 to column 25)",
                                                      " (in 'sem_resid_rs', line 45, column 2 to column 25)",
                                                      " (in 'sem_resid_rs', line 46, column 2 to column 25)",
                                                      " (in 'sem_resid_rs', line 47, column 2 to column 25)",
                                                      " (in 'sem_resid_rs', line 48, column 2 to column 25)",
                                                      " (in 'sem_resid_rs', line 49, column 2 to column 37)",
                                                      " (in 'sem_resid_rs', line 52, column 2 to column 28)",
                                                      " (in 'sem_resid_rs', line 53, column 2 to column 40)",
                                                      " (in 'sem_resid_rs', line 54, column 2 to column 24)",
                                                      " (in 'sem_resid_rs', line 56, column 9 to column 11)",
                                                      " (in 'sem_resid_rs', line 56, column 13 to column 15)",
                                                      " (in 'sem_resid_rs', line 56, column 2 to column 36)",
                                                      " (in 'sem_resid_rs', line 57, column 2 to column 21)",
                                                      " (in 'sem_resid_rs', line 58, column 2 to column 24)",
                                                      " (in 'sem_resid_rs', line 59, column 2 to column 37)",
                                                      " (in 'sem_resid_rs', line 60, column 2 to column 16)",
                                                      " (in 'sem_resid_rs', line 61, column 2 to column 18)",
                                                      " (in 'sem_resid_rs', line 62, column 2 to column 32)",
                                                      " (in 'sem_resid_rs', line 63, column 2 to column 18)",
                                                      " (in 'sem_resid_rs', line 65, column 4 to column 15)",
                                                      " (in 'sem_resid_rs', line 64, column 20 to line 66, column 3)",
                                                      " (in 'sem_resid_rs', line 64, column 2 to line 66, column 3)",
                                                      " (in 'sem_resid_rs', line 68, column 4 to column 17)",
                                                      " (in 'sem_resid_rs', line 67, column 20 to line 69, column 3)",
                                                      " (in 'sem_resid_rs', line 67, column 2 to line 69, column 3)",
                                                      " (in 'sem_resid_rs', line 71, column 4 to column 14)",
                                                      " (in 'sem_resid_rs', line 70, column 21 to line 72, column 3)",
                                                      " (in 'sem_resid_rs', line 70, column 2 to line 72, column 3)",
                                                      " (in 'sem_resid_rs', line 73, column 19 to column 31)",
                                                      " (in 'sem_resid_rs', line 73, column 2 to column 31)",
                                                      " (in 'sem_resid_rs', line 75, column 36 to column 55)",
                                                      " (in 'sem_resid_rs', line 75, column 4 to column 55)",
                                                      " (in 'sem_resid_rs', line 77, column 35 to column 51)",
                                                      " (in 'sem_resid_rs', line 77, column 6 to column 51)",
                                                      " (in 'sem_resid_rs', line 76, column 20 to line 78, column 5)",
                                                      " (in 'sem_resid_rs', line 76, column 4 to line 78, column 5)",
                                                      " (in 'sem_resid_rs', line 74, column 18 to line 79, column 3)",
                                                      " (in 'sem_resid_rs', line 74, column 2 to line 79, column 3)",
                                                      " (in 'sem_resid_rs', line 82, column 38 to column 46)",
                                                      " (in 'sem_resid_rs', line 82, column 6 to column 46)",
                                                      " (in 'sem_resid_rs', line 81, column 20 to line 83, column 5)",
                                                      " (in 'sem_resid_rs', line 81, column 4 to line 83, column 5)",
                                                      " (in 'sem_resid_rs', line 80, column 18 to line 84, column 3)",
                                                      " (in 'sem_resid_rs', line 80, column 2 to line 84, column 3)",
                                                      " (in 'sem_resid_rs', line 87, column 22 to column 27)",
                                                      " (in 'sem_resid_rs', line 88, column 22 to column 29)",
                                                      " (in 'sem_resid_rs', line 89, column 9 to column 15)",
                                                      " (in 'sem_resid_rs', line 90, column 20 to column 27)",
                                                      " (in 'sem_resid_rs', line 92, column 20 to column 22)",
                                                      " (in 'sem_resid_rs', line 93, column 20 to column 22)",
                                                      " (in 'sem_resid_rs', line 94, column 31 to column 38)",
                                                      " (in 'sem_resid_rs', line 95, column 31 to column 34)",
                                                      " (in 'sem_resid_rs', line 96, column 9 to column 19)",
                                                      " (in 'sem_resid_rs', line 97, column 20 to column 33)",
                                                      " (in 'sem_resid_rs', line 98, column 13 to column 20)",
                                                      " (in 'sem_resid_rs', line 220, column 9 to column 11)",
                                                      " (in 'sem_resid_rs', line 220, column 13 to column 15)",
                                                      " (in 'sem_resid_rs', line 221, column 9 to column 11)",
                                                      " (in 'sem_resid_rs', line 221, column 13 to column 15)",
                                                      " (in 'sem_resid_rs', line 222, column 9 to column 11)",
                                                      " (in 'sem_resid_rs', line 222, column 13 to column 15)",
                                                      " (in 'sem_resid_rs', line 223, column 9 to column 11)",
                                                      " (in 'sem_resid_rs', line 223, column 13 to column 15)",
                                                      " (in 'sem_resid_rs', line 224, column 9 to column 11)",
                                                      " (in 'sem_resid_rs', line 225, column 9 to column 11)",
                                                      " (in 'sem_resid_rs', line 226, column 9 to column 16)",
                                                      " (in 'sem_resid_rs', line 227, column 9 to column 11)",
                                                      " (in 'sem_resid_rs', line 228, column 9 to column 12)",
                                                      " (in 'sem_resid_rs', line 229, column 9 to column 12)",
                                                      " (in 'sem_resid_rs', line 230, column 9 to column 11)",
                                                      " (in 'sem_resid_rs', line 230, column 13 to column 15)",
                                                      " (in 'sem_resid_rs', line 6, column 6 to column 16)",
                                                      " (in 'sem_resid_rs', line 4, column 6 to column 15)",
                                                      " (in 'sem_resid_rs', line 3, column 4 to line 6, column 16)",
                                                      " (in 'sem_resid_rs', line 2, column 19 to line 7, column 3)",
                                                      " (in 'sem_resid_rs', line 11, column 4 to line 13, column 7)",
                                                      " (in 'sem_resid_rs', line 8, column 60 to line 14, column 3)",
                                                      " (in 'sem_resid_rs', line 16, column 4 to line 18, column 6)",
                                                      " (in 'sem_resid_rs', line 15, column 26 to line 19, column 3)",
                                                      " (in 'sem_resid_rs', line 21, column 4 to column 58)",
                                                      " (in 'sem_resid_rs', line 20, column 28 to line 22, column 3)",
                                                      " (in 'sem_resid_rs', line 24, column 4 to column 20)",
                                                      " (in 'sem_resid_rs', line 25, column 4 to column 53)",
                                                      " (in 'sem_resid_rs', line 26, column 4 to line 27, column 60)",
                                                      " (in 'sem_resid_rs', line 28, column 4 to column 33)",
                                                      " (in 'sem_resid_rs', line 29, column 4 to column 15)",
                                                      " (in 'sem_resid_rs', line 23, column 86 to line 30, column 3)"};
template <typename T0__>
int
sign(const T0__& x, std::ostream* pstream__) {
  using local_scalar_t__ = stan::promote_args_t<T0__>;
  const static bool propto__ = true;
  (void) propto__;
  local_scalar_t__ DUMMY_VAR__(std::numeric_limits<double>::quiet_NaN());
  (void) DUMMY_VAR__;  // suppress unused var warning
  
  try {
    current_statement__ = 390;
    if (logical_gt(x, 0)) {
      current_statement__ = 389;
      return 1;
    } else {
      current_statement__ = 388;
      return -1;
    }
  } catch (const std::exception& e) {
    stan::lang::rethrow_located(e, locations_array__[current_statement__]);
      // Next line prevents compiler griping about no return
      throw std::runtime_error("*** IF YOU SEE THIS, PLEASE REPORT A BUG ***"); 
  }
  
}
struct sign_functor__ {
template <typename T0__>
int
operator()(const T0__& x, std::ostream* pstream__)  const 
{
return sign(x, pstream__);
}
};
template <bool propto__, typename T0__, typename T1__>
stan::promote_args_t<stan::value_type_t<T0__>,
T1__>
generalized_double_pareto_lpdf(const T0__& x_arg__, const T1__& alpha,
                               std::ostream* pstream__) {
  using local_scalar_t__ = stan::promote_args_t<stan::value_type_t<T0__>,
          T1__>;
  const auto& x = to_ref(x_arg__);
  local_scalar_t__ DUMMY_VAR__(std::numeric_limits<double>::quiet_NaN());
  (void) DUMMY_VAR__;  // suppress unused var warning
  
  try {
    current_statement__ = 392;
    return sum(
             multiply(-(alpha + 1.0),
               stan::math::log(add(1.0, divide(stan::math::fabs(x), alpha)))));
  } catch (const std::exception& e) {
    stan::lang::rethrow_located(e, locations_array__[current_statement__]);
      // Next line prevents compiler griping about no return
      throw std::runtime_error("*** IF YOU SEE THIS, PLEASE REPORT A BUG ***"); 
  }
  
}
struct generalized_double_pareto_lpdf_functor__ {
template <bool propto__, typename T0__, typename T1__>
stan::promote_args_t<stan::value_type_t<T0__>,
T1__>
operator()(const T0__& x, const T1__& alpha, std::ostream* pstream__)  const 
{
return generalized_double_pareto_lpdf<propto__>(x, alpha, pstream__);
}
};
template <typename T1__>
stan::promote_args_t<T1__>
eff(const int& p, const T1__& x, std::ostream* pstream__) {
  using local_scalar_t__ = stan::promote_args_t<T1__>;
  const static bool propto__ = true;
  (void) propto__;
  local_scalar_t__ DUMMY_VAR__(std::numeric_limits<double>::quiet_NaN());
  (void) DUMMY_VAR__;  // suppress unused var warning
  
  try {
    current_statement__ = 394;
    return (((2 * lmgamma(p, (x / 2))) -
              ((x * p) * stan::math::log((x / 2)))) + (x * p));
  } catch (const std::exception& e) {
    stan::lang::rethrow_located(e, locations_array__[current_statement__]);
      // Next line prevents compiler griping about no return
      throw std::runtime_error("*** IF YOU SEE THIS, PLEASE REPORT A BUG ***"); 
  }
  
}
struct eff_functor__ {
template <typename T1__>
stan::promote_args_t<T1__>
operator()(const int& p, const T1__& x, std::ostream* pstream__)  const 
{
return eff(p, x, pstream__);
}
};
template <typename T0__>
stan::promote_args_t<stan::value_type_t<T0__>>
ln_det_spd(const T0__& S_arg__, std::ostream* pstream__) {
  using local_scalar_t__ = stan::promote_args_t<stan::value_type_t<T0__>>;
  const auto& S = to_ref(S_arg__);
  const static bool propto__ = true;
  (void) propto__;
  local_scalar_t__ DUMMY_VAR__(std::numeric_limits<double>::quiet_NaN());
  (void) DUMMY_VAR__;  // suppress unused var warning
  
  try {
    current_statement__ = 396;
    return (2 * sum(stan::math::log(diagonal(cholesky_decompose(S)))));
  } catch (const std::exception& e) {
    stan::lang::rethrow_located(e, locations_array__[current_statement__]);
      // Next line prevents compiler griping about no return
      throw std::runtime_error("*** IF YOU SEE THIS, PLEASE REPORT A BUG ***"); 
  }
  
}
struct ln_det_spd_functor__ {
template <typename T0__>
stan::promote_args_t<stan::value_type_t<T0__>>
operator()(const T0__& S, std::ostream* pstream__)  const 
{
return ln_det_spd(S, pstream__);
}
};
template <bool propto__, typename T0__, typename T1__, typename T2__,
typename T3__, typename T4__>
stan::promote_args_t<stan::value_type_t<T0__>, stan::value_type_t<T1__>,
T2__, T3__,
T4__>
gen_matrix_beta_ii_lpdf(const T0__& S_arg__, const T1__& Omega_arg__,
                        const T2__& n, const T3__& m, const T4__& ln_det_S,
                        std::ostream* pstream__) {
  using local_scalar_t__ = stan::promote_args_t<stan::value_type_t<T0__>,
          stan::value_type_t<T1__>,
          T2__,
          T3__,
          T4__>;
  const auto& S = to_ref(S_arg__);
  const auto& Omega = to_ref(Omega_arg__);
  local_scalar_t__ DUMMY_VAR__(std::numeric_limits<double>::quiet_NaN());
  (void) DUMMY_VAR__;  // suppress unused var warning
  
  try {
    int p;
    p = std::numeric_limits<int>::min();
    
    current_statement__ = 398;
    p = rows(S);
    local_scalar_t__ F_1;
    F_1 = DUMMY_VAR__;
    
    current_statement__ = 399;
    F_1 = ((eff(p, m, pstream__) + eff(p, n, pstream__)) -
            eff(p, (m + n), pstream__));
    local_scalar_t__ F_2;
    F_2 = DUMMY_VAR__;
    
    current_statement__ = 400;
    F_2 = ((-(((n - p) - 1) * ln_det_S) - (m * ln_det_spd(Omega, pstream__)))
            +
            ((m + n) *
              ln_det_spd(
                divide(add(multiply(m, Omega), multiply(n, S)), (m + n)), pstream__)));
    local_scalar_t__ ll;
    ll = DUMMY_VAR__;
    
    current_statement__ = 401;
    ll = ((F_1 + F_2) / -2.0);
    current_statement__ = 402;
    return ll;
  } catch (const std::exception& e) {
    stan::lang::rethrow_located(e, locations_array__[current_statement__]);
      // Next line prevents compiler griping about no return
      throw std::runtime_error("*** IF YOU SEE THIS, PLEASE REPORT A BUG ***"); 
  }
  
}
struct gen_matrix_beta_ii_lpdf_functor__ {
template <bool propto__, typename T0__, typename T1__, typename T2__,
typename T3__, typename T4__>
stan::promote_args_t<stan::value_type_t<T0__>, stan::value_type_t<T1__>,
T2__, T3__,
T4__>
operator()(const T0__& S, const T1__& Omega, const T2__& n, const T3__& m,
           const T4__& ln_det_S, std::ostream* pstream__)  const 
{
return gen_matrix_beta_ii_lpdf<propto__>(S, Omega, n, m, ln_det_S, pstream__);
}
};
#include <stan_meta_header.hpp>
class model_sem_resid_rs final : public model_base_crtp<model_sem_resid_rs> {
private:
  int Np;
  int Ni;
  Eigen::Matrix<double, -1, -1> S;
  int Nf;
  int Nce;
  std::vector<std::vector<int>> error_mat;
  Eigen::Matrix<double, -1, -1> loading_pattern;
  std::vector<int> markers;
  int Nf_corr;
  std::vector<std::vector<int>> F_corr_mat;
  std::vector<std::vector<int>> coef_pattern;
  double sc_par;
  double sl_par;
  double rs_par;
  double rc_par;
  double fc_par;
  int method;
  double sqrt_two;
  double pi_sqrt_three;
  int Nl;
  Eigen::Matrix<double, -1, -1> N_S;
  int coef_count;
  int outcome_count;
  int Nisqd2;
  int N_rms;
  int N_alpha;
  double ln_det_S;
  int N_Sigma;
  int loadings_1dim__;
 
public:
  ~model_sem_resid_rs() { }
  
  inline std::string model_name() const final { return "model_sem_resid_rs"; }
  inline std::vector<std::string> model_compile_info() const noexcept {
    return std::vector<std::string>{"stanc_version = %%NAME%%3 %%VERSION%%", "stancflags = "};
  }
  
  
  model_sem_resid_rs(stan::io::var_context& context__,
                     unsigned int random_seed__ = 0,
                     std::ostream* pstream__ = nullptr) : model_base_crtp(0) {
    using local_scalar_t__ = double ;
    boost::ecuyer1988 base_rng__ = 
        stan::services::util::create_rng(random_seed__, 0);
    (void) base_rng__;  // suppress unused var warning
    static const char* function__ = "model_sem_resid_rs_namespace::model_sem_resid_rs";
    (void) function__;  // suppress unused var warning
    local_scalar_t__ DUMMY_VAR__(std::numeric_limits<double>::quiet_NaN());
    (void) DUMMY_VAR__;  // suppress unused var warning
    
    try {
      int pos__;
      pos__ = std::numeric_limits<int>::min();
      
      pos__ = 1;
      current_statement__ = 297;
      context__.validate_dims("data initialization","Np","int",
          context__.to_vec());
      Np = std::numeric_limits<int>::min();
      
      current_statement__ = 297;
      Np = context__.vals_i("Np")[(1 - 1)];
      current_statement__ = 298;
      context__.validate_dims("data initialization","Ni","int",
          context__.to_vec());
      Ni = std::numeric_limits<int>::min();
      
      current_statement__ = 298;
      Ni = context__.vals_i("Ni")[(1 - 1)];
      current_statement__ = 299;
      validate_non_negative_index("S", "Ni", Ni);
      current_statement__ = 300;
      validate_non_negative_index("S", "Ni", Ni);
      current_statement__ = 301;
      context__.validate_dims("data initialization","S","double",
          context__.to_vec(Ni, Ni));
      S = Eigen::Matrix<double, -1, -1>(Ni, Ni);
      stan::math::fill(S, std::numeric_limits<double>::quiet_NaN());
      
      {
        std::vector<local_scalar_t__> S_flat__;
        current_statement__ = 301;
        assign(S_flat__, nil_index_list(), context__.vals_r("S"),
          "assigning variable S_flat__");
        current_statement__ = 301;
        pos__ = 1;
        current_statement__ = 301;
        for (int sym1__ = 1; sym1__ <= Ni; ++sym1__) {
          current_statement__ = 301;
          for (int sym2__ = 1; sym2__ <= Ni; ++sym2__) {
            current_statement__ = 301;
            assign(S,
              cons_list(index_uni(sym2__),
                cons_list(index_uni(sym1__), nil_index_list())),
              S_flat__[(pos__ - 1)], "assigning variable S");
            current_statement__ = 301;
            pos__ = (pos__ + 1);}}
      }
      current_statement__ = 302;
      context__.validate_dims("data initialization","Nf","int",
          context__.to_vec());
      Nf = std::numeric_limits<int>::min();
      
      current_statement__ = 302;
      Nf = context__.vals_i("Nf")[(1 - 1)];
      current_statement__ = 303;
      context__.validate_dims("data initialization","Nce","int",
          context__.to_vec());
      Nce = std::numeric_limits<int>::min();
      
      current_statement__ = 303;
      Nce = context__.vals_i("Nce")[(1 - 1)];
      current_statement__ = 304;
      validate_non_negative_index("error_mat", "Nce", Nce);
      current_statement__ = 305;
      context__.validate_dims("data initialization","error_mat","int",
          context__.to_vec(Nce, 2));
      error_mat = std::vector<std::vector<int>>(Nce, std::vector<int>(2, std::numeric_limits<int>::min()));
      
      {
        std::vector<int> error_mat_flat__;
        current_statement__ = 305;
        assign(error_mat_flat__, nil_index_list(),
          context__.vals_i("error_mat"),
          "assigning variable error_mat_flat__");
        current_statement__ = 305;
        pos__ = 1;
        current_statement__ = 305;
        for (int sym1__ = 1; sym1__ <= 2; ++sym1__) {
          current_statement__ = 305;
          for (int sym2__ = 1; sym2__ <= Nce; ++sym2__) {
            current_statement__ = 305;
            assign(error_mat,
              cons_list(index_uni(sym2__),
                cons_list(index_uni(sym1__), nil_index_list())),
              error_mat_flat__[(pos__ - 1)], "assigning variable error_mat");
            current_statement__ = 305;
            pos__ = (pos__ + 1);}}
      }
      current_statement__ = 306;
      validate_non_negative_index("loading_pattern", "Ni", Ni);
      current_statement__ = 307;
      validate_non_negative_index("loading_pattern", "Nf", Nf);
      current_statement__ = 308;
      context__.validate_dims("data initialization","loading_pattern",
          "double",context__.to_vec(Ni, Nf));
      loading_pattern = Eigen::Matrix<double, -1, -1>(Ni, Nf);
      stan::math::fill(loading_pattern, std::numeric_limits<double>::quiet_NaN());
      
      {
        std::vector<local_scalar_t__> loading_pattern_flat__;
        current_statement__ = 308;
        assign(loading_pattern_flat__, nil_index_list(),
          context__.vals_r("loading_pattern"),
          "assigning variable loading_pattern_flat__");
        current_statement__ = 308;
        pos__ = 1;
        current_statement__ = 308;
        for (int sym1__ = 1; sym1__ <= Nf; ++sym1__) {
          current_statement__ = 308;
          for (int sym2__ = 1; sym2__ <= Ni; ++sym2__) {
            current_statement__ = 308;
            assign(loading_pattern,
              cons_list(index_uni(sym2__),
                cons_list(index_uni(sym1__), nil_index_list())),
              loading_pattern_flat__[(pos__ - 1)],
              "assigning variable loading_pattern");
            current_statement__ = 308;
            pos__ = (pos__ + 1);}}
      }
      current_statement__ = 309;
      validate_non_negative_index("markers", "Nf", Nf);
      current_statement__ = 310;
      context__.validate_dims("data initialization","markers","int",
          context__.to_vec(Nf));
      markers = std::vector<int>(Nf, std::numeric_limits<int>::min());
      
      current_statement__ = 310;
      assign(markers, nil_index_list(), context__.vals_i("markers"),
        "assigning variable markers");
      current_statement__ = 311;
      context__.validate_dims("data initialization","Nf_corr","int",
          context__.to_vec());
      Nf_corr = std::numeric_limits<int>::min();
      
      current_statement__ = 311;
      Nf_corr = context__.vals_i("Nf_corr")[(1 - 1)];
      current_statement__ = 312;
      validate_non_negative_index("F_corr_mat", "Nf_corr", Nf_corr);
      current_statement__ = 313;
      context__.validate_dims("data initialization","F_corr_mat","int",
          context__.to_vec(Nf_corr, 2));
      F_corr_mat = std::vector<std::vector<int>>(Nf_corr, std::vector<int>(2, std::numeric_limits<int>::min()));
      
      {
        std::vector<int> F_corr_mat_flat__;
        current_statement__ = 313;
        assign(F_corr_mat_flat__, nil_index_list(),
          context__.vals_i("F_corr_mat"),
          "assigning variable F_corr_mat_flat__");
        current_statement__ = 313;
        pos__ = 1;
        current_statement__ = 313;
        for (int sym1__ = 1; sym1__ <= 2; ++sym1__) {
          current_statement__ = 313;
          for (int sym2__ = 1; sym2__ <= Nf_corr; ++sym2__) {
            current_statement__ = 313;
            assign(F_corr_mat,
              cons_list(index_uni(sym2__),
                cons_list(index_uni(sym1__), nil_index_list())),
              F_corr_mat_flat__[(pos__ - 1)], "assigning variable F_corr_mat");
            current_statement__ = 313;
            pos__ = (pos__ + 1);}}
      }
      current_statement__ = 314;
      validate_non_negative_index("coef_pattern", "Nf", Nf);
      current_statement__ = 315;
      validate_non_negative_index("coef_pattern", "Nf", Nf);
      current_statement__ = 316;
      context__.validate_dims("data initialization","coef_pattern","int",
          context__.to_vec(Nf, Nf));
      coef_pattern = std::vector<std::vector<int>>(Nf, std::vector<int>(Nf, std::numeric_limits<int>::min()));
      
      {
        std::vector<int> coef_pattern_flat__;
        current_statement__ = 316;
        assign(coef_pattern_flat__, nil_index_list(),
          context__.vals_i("coef_pattern"),
          "assigning variable coef_pattern_flat__");
        current_statement__ = 316;
        pos__ = 1;
        current_statement__ = 316;
        for (int sym1__ = 1; sym1__ <= Nf; ++sym1__) {
          current_statement__ = 316;
          for (int sym2__ = 1; sym2__ <= Nf; ++sym2__) {
            current_statement__ = 316;
            assign(coef_pattern,
              cons_list(index_uni(sym2__),
                cons_list(index_uni(sym1__), nil_index_list())),
              coef_pattern_flat__[(pos__ - 1)],
              "assigning variable coef_pattern");
            current_statement__ = 316;
            pos__ = (pos__ + 1);}}
      }
      current_statement__ = 317;
      context__.validate_dims("data initialization","sc_par","double",
          context__.to_vec());
      sc_par = std::numeric_limits<double>::quiet_NaN();
      
      current_statement__ = 317;
      sc_par = context__.vals_r("sc_par")[(1 - 1)];
      current_statement__ = 317;
      current_statement__ = 317;
      check_greater_or_equal(function__, "sc_par", sc_par, 0);
      current_statement__ = 318;
      context__.validate_dims("data initialization","sl_par","double",
          context__.to_vec());
      sl_par = std::numeric_limits<double>::quiet_NaN();
      
      current_statement__ = 318;
      sl_par = context__.vals_r("sl_par")[(1 - 1)];
      current_statement__ = 318;
      current_statement__ = 318;
      check_greater_or_equal(function__, "sl_par", sl_par, 0);
      current_statement__ = 319;
      context__.validate_dims("data initialization","rs_par","double",
          context__.to_vec());
      rs_par = std::numeric_limits<double>::quiet_NaN();
      
      current_statement__ = 319;
      rs_par = context__.vals_r("rs_par")[(1 - 1)];
      current_statement__ = 319;
      current_statement__ = 319;
      check_greater_or_equal(function__, "rs_par", rs_par, 0);
      current_statement__ = 320;
      context__.validate_dims("data initialization","rc_par","double",
          context__.to_vec());
      rc_par = std::numeric_limits<double>::quiet_NaN();
      
      current_statement__ = 320;
      rc_par = context__.vals_r("rc_par")[(1 - 1)];
      current_statement__ = 320;
      current_statement__ = 320;
      check_greater_or_equal(function__, "rc_par", rc_par, 1);
      current_statement__ = 321;
      context__.validate_dims("data initialization","fc_par","double",
          context__.to_vec());
      fc_par = std::numeric_limits<double>::quiet_NaN();
      
      current_statement__ = 321;
      fc_par = context__.vals_r("fc_par")[(1 - 1)];
      current_statement__ = 321;
      current_statement__ = 321;
      check_greater_or_equal(function__, "fc_par", fc_par, 1);
      current_statement__ = 322;
      context__.validate_dims("data initialization","method","int",
          context__.to_vec());
      method = std::numeric_limits<int>::min();
      
      current_statement__ = 322;
      method = context__.vals_i("method")[(1 - 1)];
      current_statement__ = 322;
      current_statement__ = 322;
      check_greater_or_equal(function__, "method", method, 1);
      current_statement__ = 322;
      current_statement__ = 322;
      check_less_or_equal(function__, "method", method, 100);
      current_statement__ = 323;
      sqrt_two = std::numeric_limits<double>::quiet_NaN();
      
      current_statement__ = 323;
      sqrt_two = stan::math::sqrt(2.0);
      current_statement__ = 324;
      pi_sqrt_three = std::numeric_limits<double>::quiet_NaN();
      
      current_statement__ = 324;
      pi_sqrt_three = (stan::math::pi() / stan::math::sqrt(3.0));
      current_statement__ = 325;
      Nl = std::numeric_limits<int>::min();
      
      current_statement__ = 325;
      Nl = 0;
      current_statement__ = 326;
      validate_non_negative_index("N_S", "Ni", Ni);
      current_statement__ = 327;
      validate_non_negative_index("N_S", "Ni", Ni);
      current_statement__ = 328;
      N_S = Eigen::Matrix<double, -1, -1>(Ni, Ni);
      stan::math::fill(N_S, std::numeric_limits<double>::quiet_NaN());
      
      current_statement__ = 328;
      assign(N_S, nil_index_list(), multiply((Np - 1), S),
        "assigning variable N_S");
      current_statement__ = 329;
      coef_count = std::numeric_limits<int>::min();
      
      current_statement__ = 329;
      coef_count = 0;
      current_statement__ = 330;
      outcome_count = std::numeric_limits<int>::min();
      
      current_statement__ = 330;
      outcome_count = 0;
      current_statement__ = 331;
      Nisqd2 = std::numeric_limits<int>::min();
      
      current_statement__ = 331;
      Nisqd2 = ((Ni * (Ni - 1)) / 2);
      current_statement__ = 332;
      N_rms = std::numeric_limits<int>::min();
      
      current_statement__ = 332;
      N_rms = 1;
      current_statement__ = 333;
      N_alpha = std::numeric_limits<int>::min();
      
      current_statement__ = 333;
      N_alpha = 0;
      current_statement__ = 334;
      ln_det_S = std::numeric_limits<double>::quiet_NaN();
      
      current_statement__ = 334;
      ln_det_S = ln_det_spd(S, pstream__);
      current_statement__ = 335;
      N_Sigma = std::numeric_limits<int>::min();
      
      current_statement__ = 335;
      N_Sigma = 1;
      current_statement__ = 338;
      if (logical_gte(method, 90)) {
        current_statement__ = 336;
        Nisqd2 = 0;
      } 
      current_statement__ = 341;
      if (logical_eq(method, 91)) {
        current_statement__ = 339;
        N_Sigma = Ni;
      } 
      current_statement__ = 344;
      if (logical_eq(method, 100)) {
        current_statement__ = 342;
        N_rms = 0;
      } 
      current_statement__ = 346;
      if (logical_eq(method, 4)) {
        current_statement__ = 345;
        N_alpha = 1;
      } 
      current_statement__ = 354;
      for (int i = 1; i <= Nf; ++i) {
        current_statement__ = 348;
        if (logical_gt(
              sum(
                rvalue(coef_pattern,
                  cons_list(index_uni(i),
                    cons_list(index_omni(), nil_index_list())),
                  "coef_pattern")), 0)) {
          current_statement__ = 347;
          outcome_count = (outcome_count + 1);
        } 
        current_statement__ = 352;
        for (int j = 1; j <= Nf; ++j) {
          current_statement__ = 350;
          if (logical_eq(coef_pattern[(i - 1)][(j - 1)], 1)) {
            current_statement__ = 349;
            coef_count = (coef_count + 1);
          } }}
      current_statement__ = 360;
      for (int i = 1; i <= Ni; ++i) {
        current_statement__ = 358;
        for (int j = 1; j <= Nf; ++j) {
          current_statement__ = 356;
          if (logical_eq(
                rvalue(loading_pattern,
                  cons_list(index_uni(i),
                    cons_list(index_uni(j), nil_index_list())),
                  "loading_pattern"), 1)) {
            current_statement__ = 355;
            Nl = (Nl + 1);
          } }}
      current_statement__ = 325;
      current_statement__ = 325;
      check_greater_or_equal(function__, "Nl", Nl, 0);
      current_statement__ = 361;
      validate_non_negative_index("rms_src_p", "N_rms", N_rms);
      current_statement__ = 362;
      validate_non_negative_index("gdp_alpha", "N_alpha", N_alpha);
      current_statement__ = 363;
      validate_non_negative_index("resids", "Nisqd2", Nisqd2);
      current_statement__ = 364;
      loadings_1dim__ = std::numeric_limits<int>::min();
      
      current_statement__ = 364;
      loadings_1dim__ = (Nl - Nf);
      current_statement__ = 364;
      validate_non_negative_index("loadings", "Nl - Nf", loadings_1dim__);
      current_statement__ = 365;
      validate_non_negative_index("phi_sd", "Nf", Nf);
      current_statement__ = 366;
      validate_non_negative_index("res_sds", "Ni", Ni);
      current_statement__ = 367;
      validate_non_negative_index("phi_cor_01", "Nf_corr", Nf_corr);
      current_statement__ = 368;
      validate_non_negative_index("res_cor_01", "Nce", Nce);
      current_statement__ = 369;
      validate_non_negative_index("coefs", "coef_count", coef_count);
      current_statement__ = 370;
      validate_non_negative_index("sigma_coefs", "outcome_count",
                                  outcome_count);
      current_statement__ = 371;
      validate_non_negative_index("Sigma", "N_Sigma", N_Sigma);
      current_statement__ = 371;
      validate_non_negative_index("Sigma", "N_Sigma", N_Sigma);
      current_statement__ = 372;
      validate_non_negative_index("Load_mat_u", "Ni", Ni);
      current_statement__ = 373;
      validate_non_negative_index("Load_mat_u", "Nf", Nf);
      current_statement__ = 374;
      validate_non_negative_index("Coef_mat_u", "Nf", Nf);
      current_statement__ = 375;
      validate_non_negative_index("Coef_mat_u", "Nf", Nf);
      current_statement__ = 376;
      validate_non_negative_index("Load_mat", "Ni", Ni);
      current_statement__ = 377;
      validate_non_negative_index("Load_mat", "Nf", Nf);
      current_statement__ = 378;
      validate_non_negative_index("Coef_mat", "Nf", Nf);
      current_statement__ = 379;
      validate_non_negative_index("Coef_mat", "Nf", Nf);
      current_statement__ = 380;
      validate_non_negative_index("phi_var", "Nf", Nf);
      current_statement__ = 381;
      validate_non_negative_index("r_square", "Nf", Nf);
      current_statement__ = 382;
      validate_non_negative_index("phi_cor", "Nf_corr", Nf_corr);
      current_statement__ = 383;
      validate_non_negative_index("res_var", "Ni", Ni);
      current_statement__ = 384;
      validate_non_negative_index("res_cor", "Nce", Nce);
      current_statement__ = 385;
      validate_non_negative_index("res_cov", "Nce", Nce);
      current_statement__ = 386;
      validate_non_negative_index("Resid", "Ni", Ni);
      current_statement__ = 387;
      validate_non_negative_index("Resid", "Ni", Ni);
    } catch (const std::exception& e) {
      stan::lang::rethrow_located(e, locations_array__[current_statement__]);
      // Next line prevents compiler griping about no return
      throw std::runtime_error("*** IF YOU SEE THIS, PLEASE REPORT A BUG ***"); 
    }
    num_params_r__ = 0U;
    
    try {
      num_params_r__ += N_rms;
      num_params_r__ += N_alpha;
      num_params_r__ += Nisqd2;
      num_params_r__ += loadings_1dim__;
      num_params_r__ += 1;
      num_params_r__ += Nf;
      num_params_r__ += Ni;
      num_params_r__ += Nf_corr;
      num_params_r__ += Nce;
      num_params_r__ += coef_count;
      num_params_r__ += outcome_count;
      num_params_r__ += (N_Sigma + ((N_Sigma * (N_Sigma - 1)) / 2));
    } catch (const std::exception& e) {
      stan::lang::rethrow_located(e, locations_array__[current_statement__]);
      // Next line prevents compiler griping about no return
      throw std::runtime_error("*** IF YOU SEE THIS, PLEASE REPORT A BUG ***"); 
    }
  }
  template <bool propto__, bool jacobian__, typename VecR, typename VecI, stan::require_vector_like_t<VecR>* = nullptr, stan::require_vector_like_vt<std::is_integral, VecI>* = nullptr>
  inline stan::scalar_type_t<VecR> log_prob_impl(VecR& params_r__,
                                                 VecI& params_i__,
                                                 std::ostream* pstream__ = nullptr) const {
    using T__ = stan::scalar_type_t<VecR>;
    using local_scalar_t__ = T__;
    T__ lp__(0.0);
    stan::math::accumulator<T__> lp_accum__;
    static const char* function__ = "model_sem_resid_rs_namespace::log_prob";
(void) function__;  // suppress unused var warning
    stan::io::reader<local_scalar_t__> in__(params_r__, params_i__);
    local_scalar_t__ DUMMY_VAR__(std::numeric_limits<double>::quiet_NaN());
    (void) DUMMY_VAR__;  // suppress unused var warning
    
    try {
      Eigen::Matrix<local_scalar_t__, -1, 1> rms_src_p;
      rms_src_p = Eigen::Matrix<local_scalar_t__, -1, 1>(N_rms);
      stan::math::fill(rms_src_p, DUMMY_VAR__);
      
      current_statement__ = 1;
      rms_src_p = in__.vector(N_rms);
      current_statement__ = 1;
      for (int sym1__ = 1; sym1__ <= N_rms; ++sym1__) {
        current_statement__ = 1;
        if (jacobian__) {
          current_statement__ = 1;
          assign(rms_src_p, cons_list(index_uni(sym1__), nil_index_list()),
            stan::math::lb_constrain(rms_src_p[(sym1__ - 1)], 0.0, lp__),
            "assigning variable rms_src_p");
        } else {
          current_statement__ = 1;
          assign(rms_src_p, cons_list(index_uni(sym1__), nil_index_list()),
            stan::math::lb_constrain(rms_src_p[(sym1__ - 1)], 0.0),
            "assigning variable rms_src_p");
        }}
      Eigen::Matrix<local_scalar_t__, -1, 1> gdp_alpha;
      gdp_alpha = Eigen::Matrix<local_scalar_t__, -1, 1>(N_alpha);
      stan::math::fill(gdp_alpha, DUMMY_VAR__);
      
      current_statement__ = 2;
      gdp_alpha = in__.vector(N_alpha);
      current_statement__ = 2;
      for (int sym1__ = 1; sym1__ <= N_alpha; ++sym1__) {
        current_statement__ = 2;
        if (jacobian__) {
          current_statement__ = 2;
          assign(gdp_alpha, cons_list(index_uni(sym1__), nil_index_list()),
            stan::math::lb_constrain(gdp_alpha[(sym1__ - 1)], 2.0, lp__),
            "assigning variable gdp_alpha");
        } else {
          current_statement__ = 2;
          assign(gdp_alpha, cons_list(index_uni(sym1__), nil_index_list()),
            stan::math::lb_constrain(gdp_alpha[(sym1__ - 1)], 2.0),
            "assigning variable gdp_alpha");
        }}
      Eigen::Matrix<local_scalar_t__, -1, 1> resids;
      resids = Eigen::Matrix<local_scalar_t__, -1, 1>(Nisqd2);
      stan::math::fill(resids, DUMMY_VAR__);
      
      current_statement__ = 3;
      resids = in__.vector(Nisqd2);
      Eigen::Matrix<local_scalar_t__, -1, 1> loadings;
      loadings = Eigen::Matrix<local_scalar_t__, -1, 1>(loadings_1dim__);
      stan::math::fill(loadings, DUMMY_VAR__);
      
      current_statement__ = 4;
      loadings = in__.vector(loadings_1dim__);
      current_statement__ = 4;
      for (int sym1__ = 1; sym1__ <= loadings_1dim__; ++sym1__) {
        current_statement__ = 4;
        if (jacobian__) {
          current_statement__ = 4;
          assign(loadings, cons_list(index_uni(sym1__), nil_index_list()),
            stan::math::lb_constrain(loadings[(sym1__ - 1)], 0, lp__),
            "assigning variable loadings");
        } else {
          current_statement__ = 4;
          assign(loadings, cons_list(index_uni(sym1__), nil_index_list()),
            stan::math::lb_constrain(loadings[(sym1__ - 1)], 0),
            "assigning variable loadings");
        }}
      local_scalar_t__ sigma_loadings;
      sigma_loadings = DUMMY_VAR__;
      
      current_statement__ = 5;
      sigma_loadings = in__.scalar();
      current_statement__ = 5;
      if (jacobian__) {
        current_statement__ = 5;
        sigma_loadings = stan::math::lb_constrain(sigma_loadings, 0, lp__);
      } else {
        current_statement__ = 5;
        sigma_loadings = stan::math::lb_constrain(sigma_loadings, 0);
      }
      Eigen::Matrix<local_scalar_t__, -1, 1> phi_sd;
      phi_sd = Eigen::Matrix<local_scalar_t__, -1, 1>(Nf);
      stan::math::fill(phi_sd, DUMMY_VAR__);
      
      current_statement__ = 6;
      phi_sd = in__.vector(Nf);
      current_statement__ = 6;
      for (int sym1__ = 1; sym1__ <= Nf; ++sym1__) {
        current_statement__ = 6;
        if (jacobian__) {
          current_statement__ = 6;
          assign(phi_sd, cons_list(index_uni(sym1__), nil_index_list()),
            stan::math::lb_constrain(phi_sd[(sym1__ - 1)], 0, lp__),
            "assigning variable phi_sd");
        } else {
          current_statement__ = 6;
          assign(phi_sd, cons_list(index_uni(sym1__), nil_index_list()),
            stan::math::lb_constrain(phi_sd[(sym1__ - 1)], 0),
            "assigning variable phi_sd");
        }}
      Eigen::Matrix<local_scalar_t__, -1, 1> res_sds;
      res_sds = Eigen::Matrix<local_scalar_t__, -1, 1>(Ni);
      stan::math::fill(res_sds, DUMMY_VAR__);
      
      current_statement__ = 7;
      res_sds = in__.vector(Ni);
      current_statement__ = 7;
      for (int sym1__ = 1; sym1__ <= Ni; ++sym1__) {
        current_statement__ = 7;
        if (jacobian__) {
          current_statement__ = 7;
          assign(res_sds, cons_list(index_uni(sym1__), nil_index_list()),
            stan::math::lb_constrain(res_sds[(sym1__ - 1)], 0, lp__),
            "assigning variable res_sds");
        } else {
          current_statement__ = 7;
          assign(res_sds, cons_list(index_uni(sym1__), nil_index_list()),
            stan::math::lb_constrain(res_sds[(sym1__ - 1)], 0),
            "assigning variable res_sds");
        }}
      Eigen::Matrix<local_scalar_t__, -1, 1> phi_cor_01;
      phi_cor_01 = Eigen::Matrix<local_scalar_t__, -1, 1>(Nf_corr);
      stan::math::fill(phi_cor_01, DUMMY_VAR__);
      
      current_statement__ = 8;
      phi_cor_01 = in__.vector(Nf_corr);
      current_statement__ = 8;
      for (int sym1__ = 1; sym1__ <= Nf_corr; ++sym1__) {
        current_statement__ = 8;
        if (jacobian__) {
          current_statement__ = 8;
          assign(phi_cor_01, cons_list(index_uni(sym1__), nil_index_list()),
            stan::math::lub_constrain(phi_cor_01[(sym1__ - 1)], 0, 1, lp__),
            "assigning variable phi_cor_01");
        } else {
          current_statement__ = 8;
          assign(phi_cor_01, cons_list(index_uni(sym1__), nil_index_list()),
            stan::math::lub_constrain(phi_cor_01[(sym1__ - 1)], 0, 1),
            "assigning variable phi_cor_01");
        }}
      Eigen::Matrix<local_scalar_t__, -1, 1> res_cor_01;
      res_cor_01 = Eigen::Matrix<local_scalar_t__, -1, 1>(Nce);
      stan::math::fill(res_cor_01, DUMMY_VAR__);
      
      current_statement__ = 9;
      res_cor_01 = in__.vector(Nce);
      current_statement__ = 9;
      for (int sym1__ = 1; sym1__ <= Nce; ++sym1__) {
        current_statement__ = 9;
        if (jacobian__) {
          current_statement__ = 9;
          assign(res_cor_01, cons_list(index_uni(sym1__), nil_index_list()),
            stan::math::lub_constrain(res_cor_01[(sym1__ - 1)], 0, 1, lp__),
            "assigning variable res_cor_01");
        } else {
          current_statement__ = 9;
          assign(res_cor_01, cons_list(index_uni(sym1__), nil_index_list()),
            stan::math::lub_constrain(res_cor_01[(sym1__ - 1)], 0, 1),
            "assigning variable res_cor_01");
        }}
      Eigen::Matrix<local_scalar_t__, -1, 1> coefs;
      coefs = Eigen::Matrix<local_scalar_t__, -1, 1>(coef_count);
      stan::math::fill(coefs, DUMMY_VAR__);
      
      current_statement__ = 10;
      coefs = in__.vector(coef_count);
      Eigen::Matrix<local_scalar_t__, -1, 1> sigma_coefs;
      sigma_coefs = Eigen::Matrix<local_scalar_t__, -1, 1>(outcome_count);
      stan::math::fill(sigma_coefs, DUMMY_VAR__);
      
      current_statement__ = 11;
      sigma_coefs = in__.vector(outcome_count);
      current_statement__ = 11;
      for (int sym1__ = 1; sym1__ <= outcome_count; ++sym1__) {
        current_statement__ = 11;
        if (jacobian__) {
          current_statement__ = 11;
          assign(sigma_coefs, cons_list(index_uni(sym1__), nil_index_list()),
            stan::math::lb_constrain(sigma_coefs[(sym1__ - 1)], 0, lp__),
            "assigning variable sigma_coefs");
        } else {
          current_statement__ = 11;
          assign(sigma_coefs, cons_list(index_uni(sym1__), nil_index_list()),
            stan::math::lb_constrain(sigma_coefs[(sym1__ - 1)], 0),
            "assigning variable sigma_coefs");
        }}
      Eigen::Matrix<local_scalar_t__, -1, -1> Sigma;
      Sigma = Eigen::Matrix<local_scalar_t__, -1, -1>(N_Sigma, N_Sigma);
      stan::math::fill(Sigma, DUMMY_VAR__);
      
      Eigen::Matrix<local_scalar_t__, -1, 1> Sigma_in__;
      Sigma_in__ = Eigen::Matrix<local_scalar_t__, -1, 1>((N_Sigma +
                                                            ((N_Sigma *
                                                               (N_Sigma - 1))
                                                              / 2)));
      stan::math::fill(Sigma_in__, DUMMY_VAR__);
      
      current_statement__ = 12;
      Sigma_in__ = in__.vector((N_Sigma + ((N_Sigma * (N_Sigma - 1)) / 2)));
      current_statement__ = 12;
      if (jacobian__) {
        current_statement__ = 12;
        assign(Sigma, nil_index_list(),
          stan::math::cov_matrix_constrain(Sigma_in__, N_Sigma, lp__),
          "assigning variable Sigma");
      } else {
        current_statement__ = 12;
        assign(Sigma, nil_index_list(),
          stan::math::cov_matrix_constrain(Sigma_in__, N_Sigma),
          "assigning variable Sigma");
      }
      {
        current_statement__ = 172;
        lp_accum__.add(std_normal_lpdf<propto__>(rms_src_p));
        current_statement__ = 185;
        if (logical_eq(method, 1)) {
          current_statement__ = 183;
          lp_accum__.add(std_normal_lpdf<propto__>(resids));
        } else {
          current_statement__ = 182;
          if (logical_eq(method, 2)) {
            current_statement__ = 180;
            lp_accum__.add(double_exponential_lpdf<propto__>(resids, 0, 1));
          } else {
            current_statement__ = 179;
            if (logical_eq(method, 3)) {
              current_statement__ = 177;
              lp_accum__.add(logistic_lpdf<propto__>(resids, 0, 1));
            } else {
              current_statement__ = 176;
              if (logical_eq(method, 4)) {
                current_statement__ = 173;
                lp_accum__.add(lognormal_lpdf<propto__>(gdp_alpha, 1, 1));
                current_statement__ = 174;
                lp_accum__.add(
                  generalized_double_pareto_lpdf<false>(resids,
                    gdp_alpha[(1 - 1)], pstream__));
              } 
            }
          }
        }
        current_statement__ = 186;
        lp_accum__.add(normal_lpdf<propto__>(loadings, 0, sigma_loadings));
        current_statement__ = 187;
        lp_accum__.add(student_t_lpdf<propto__>(sigma_loadings, 3, 0, sl_par));
        current_statement__ = 188;
        lp_accum__.add(student_t_lpdf<propto__>(phi_sd, 3, 0, 1));
        current_statement__ = 189;
        lp_accum__.add(student_t_lpdf<propto__>(res_sds, 3, 0, rs_par));
        current_statement__ = 190;
        lp_accum__.add(beta_lpdf<propto__>(phi_cor_01, fc_par, fc_par));
        current_statement__ = 191;
        lp_accum__.add(beta_lpdf<propto__>(res_cor_01, rc_par, rc_par));
        current_statement__ = 192;
        lp_accum__.add(std_normal_lpdf<propto__>(coefs));
        current_statement__ = 193;
        lp_accum__.add(student_t_lpdf<propto__>(sigma_coefs, 3, 0, sc_par));
        {
          local_scalar_t__ m;
          m = DUMMY_VAR__;
          
          current_statement__ = 195;
          validate_non_negative_index("Omega", "Ni", Ni);
          current_statement__ = 196;
          validate_non_negative_index("Omega", "Ni", Ni);
          Eigen::Matrix<local_scalar_t__, -1, -1> Omega;
          Omega = Eigen::Matrix<local_scalar_t__, -1, -1>(Ni, Ni);
          stan::math::fill(Omega, DUMMY_VAR__);
          
          current_statement__ = 198;
          validate_non_negative_index("res_var", "Ni", Ni);
          Eigen::Matrix<local_scalar_t__, -1, 1> res_var;
          res_var = Eigen::Matrix<local_scalar_t__, -1, 1>(Ni);
          stan::math::fill(res_var, DUMMY_VAR__);
          
          current_statement__ = 199;
          assign(res_var, nil_index_list(), square(res_sds),
            "assigning variable res_var");
          current_statement__ = 200;
          validate_non_negative_index("res_cor", "Nce", Nce);
          Eigen::Matrix<local_scalar_t__, -1, 1> res_cor;
          res_cor = Eigen::Matrix<local_scalar_t__, -1, 1>(Nce);
          stan::math::fill(res_cor, DUMMY_VAR__);
          
          current_statement__ = 201;
          assign(res_cor, nil_index_list(),
            subtract(multiply(res_cor_01, 2), 1),
            "assigning variable res_cor");
          current_statement__ = 202;
          validate_non_negative_index("Load_mat", "Ni", Ni);
          current_statement__ = 203;
          validate_non_negative_index("Load_mat", "Nf", Nf);
          Eigen::Matrix<local_scalar_t__, -1, -1> Load_mat;
          Load_mat = Eigen::Matrix<local_scalar_t__, -1, -1>(Ni, Nf);
          stan::math::fill(Load_mat, DUMMY_VAR__);
          
          current_statement__ = 204;
          assign(Load_mat, nil_index_list(), rep_matrix(0, Ni, Nf),
            "assigning variable Load_mat");
          current_statement__ = 205;
          validate_non_negative_index("Coef_mat", "Nf", Nf);
          current_statement__ = 206;
          validate_non_negative_index("Coef_mat", "Nf", Nf);
          Eigen::Matrix<local_scalar_t__, -1, -1> Coef_mat;
          Coef_mat = Eigen::Matrix<local_scalar_t__, -1, -1>(Nf, Nf);
          stan::math::fill(Coef_mat, DUMMY_VAR__);
          
          current_statement__ = 207;
          assign(Coef_mat, nil_index_list(), rep_matrix(0, Nf, Nf),
            "assigning variable Coef_mat");
          current_statement__ = 208;
          validate_non_negative_index("phi_var", "Nf", Nf);
          Eigen::Matrix<local_scalar_t__, -1, 1> phi_var;
          phi_var = Eigen::Matrix<local_scalar_t__, -1, 1>(Nf);
          stan::math::fill(phi_var, DUMMY_VAR__);
          
          current_statement__ = 209;
          assign(phi_var, nil_index_list(), square(phi_sd),
            "assigning variable phi_var");
          current_statement__ = 210;
          validate_non_negative_index("phi_cor", "Nf_corr", Nf_corr);
          Eigen::Matrix<local_scalar_t__, -1, 1> phi_cor;
          phi_cor = Eigen::Matrix<local_scalar_t__, -1, 1>(Nf_corr);
          stan::math::fill(phi_cor, DUMMY_VAR__);
          
          current_statement__ = 211;
          assign(phi_cor, nil_index_list(),
            subtract(multiply(phi_cor_01, 2), 1),
            "assigning variable phi_cor");
          current_statement__ = 212;
          validate_non_negative_index("F_corr_pe", "Nf", Nf);
          current_statement__ = 213;
          validate_non_negative_index("F_corr_pe", "Nf_corr", Nf_corr);
          Eigen::Matrix<local_scalar_t__, -1, -1> F_corr_pe;
          F_corr_pe = Eigen::Matrix<local_scalar_t__, -1, -1>(Nf, Nf_corr);
          stan::math::fill(F_corr_pe, DUMMY_VAR__);
          
          current_statement__ = 214;
          assign(F_corr_pe, nil_index_list(), rep_matrix(0, Nf, Nf_corr),
            "assigning variable F_corr_pe");
          current_statement__ = 215;
          validate_non_negative_index("F_cov_mat", "Nf", Nf);
          current_statement__ = 216;
          validate_non_negative_index("F_cov_mat", "Nf", Nf);
          Eigen::Matrix<local_scalar_t__, -1, -1> F_cov_mat;
          F_cov_mat = Eigen::Matrix<local_scalar_t__, -1, -1>(Nf, Nf);
          stan::math::fill(F_cov_mat, DUMMY_VAR__);
          
          current_statement__ = 218;
          validate_non_negative_index("F_var_resid", "Nf", Nf);
          Eigen::Matrix<local_scalar_t__, -1, 1> F_var_resid;
          F_var_resid = Eigen::Matrix<local_scalar_t__, -1, 1>(Nf);
          stan::math::fill(F_var_resid, DUMMY_VAR__);
          
          current_statement__ = 220;
          validate_non_negative_index("loading_par_exp", "Ni", Ni);
          current_statement__ = 221;
          validate_non_negative_index("loading_par_exp", "Nce", Nce);
          Eigen::Matrix<local_scalar_t__, -1, -1> loading_par_exp;
          loading_par_exp = Eigen::Matrix<local_scalar_t__, -1, -1>(Ni, Nce);
          stan::math::fill(loading_par_exp, DUMMY_VAR__);
          
          current_statement__ = 222;
          assign(loading_par_exp, nil_index_list(), rep_matrix(0, Ni, Nce),
            "assigning variable loading_par_exp");
          current_statement__ = 223;
          validate_non_negative_index("loading_par_exp_2", "Ni", Ni);
          current_statement__ = 224;
          validate_non_negative_index("loading_par_exp_2", "Ni", Ni);
          Eigen::Matrix<local_scalar_t__, -1, -1> loading_par_exp_2;
          loading_par_exp_2 = Eigen::Matrix<local_scalar_t__, -1, -1>(Ni, Ni);
          stan::math::fill(loading_par_exp_2, DUMMY_VAR__);
          
          current_statement__ = 226;
          validate_non_negative_index("Lambda_One_min_Beta_inv", "Ni", Ni);
          current_statement__ = 227;
          validate_non_negative_index("Lambda_One_min_Beta_inv", "Nf", Nf);
          Eigen::Matrix<local_scalar_t__, -1, -1> Lambda_One_min_Beta_inv;
          Lambda_One_min_Beta_inv = Eigen::Matrix<local_scalar_t__, -1, -1>(Ni, Nf);
          stan::math::fill(Lambda_One_min_Beta_inv, DUMMY_VAR__);
          
          current_statement__ = 229;
          validate_non_negative_index("delta_mat_ast", "Ni", Ni);
          Eigen::Matrix<local_scalar_t__, -1, 1> delta_mat_ast;
          delta_mat_ast = Eigen::Matrix<local_scalar_t__, -1, 1>(Ni);
          stan::math::fill(delta_mat_ast, DUMMY_VAR__);
          
          current_statement__ = 231;
          validate_non_negative_index("total_var", "Ni", Ni);
          Eigen::Matrix<local_scalar_t__, -1, 1> total_var;
          total_var = Eigen::Matrix<local_scalar_t__, -1, 1>(Ni);
          stan::math::fill(total_var, DUMMY_VAR__);
          
          {
            std::vector<int> pos_3;
            pos_3 = std::vector<int>(3, std::numeric_limits<int>::min());
            
            current_statement__ = 233;
            assign(pos_3, nil_index_list(), rep_array(0, 3),
              "assigning variable pos_3");
            current_statement__ = 243;
            for (int i = 1; i <= Nf; ++i) {
              current_statement__ = 235;
              if (logical_gt(
                    sum(
                      rvalue(coef_pattern,
                        cons_list(index_uni(i),
                          cons_list(index_omni(), nil_index_list())),
                        "coef_pattern")), 0)) {
                current_statement__ = 234;
                assign(pos_3, cons_list(index_uni(1), nil_index_list()),
                  (pos_3[(1 - 1)] + 1), "assigning variable pos_3");
              } 
              current_statement__ = 241;
              for (int j = 1; j <= Nf; ++j) {
                current_statement__ = 239;
                if (logical_eq(coef_pattern[(i - 1)][(j - 1)], 1)) {
                  current_statement__ = 236;
                  assign(pos_3, cons_list(index_uni(2), nil_index_list()),
                    (pos_3[(2 - 1)] + 1), "assigning variable pos_3");
                  current_statement__ = 237;
                  assign(Coef_mat,
                    cons_list(index_uni(i),
                      cons_list(index_uni(j), nil_index_list())),
                    (sigma_coefs[(pos_3[(1 - 1)] - 1)] *
                      coefs[(pos_3[(2 - 1)] - 1)]),
                    "assigning variable Coef_mat");
                } }}
            current_statement__ = 254;
            for (int i = 1; i <= Ni; ++i) {
              current_statement__ = 252;
              for (int j = 1; j <= Nf; ++j) {
                current_statement__ = 250;
                if (logical_neq(
                      rvalue(loading_pattern,
                        cons_list(index_uni(i),
                          cons_list(index_uni(j), nil_index_list())),
                        "loading_pattern"), 0)) {
                  current_statement__ = 248;
                  if (logical_eq(i, markers[(j - 1)])) {
                    current_statement__ = 247;
                    assign(Load_mat,
                      cons_list(index_uni(i),
                        cons_list(index_uni(j), nil_index_list())), 1,
                      "assigning variable Load_mat");
                  } else {
                    current_statement__ = 244;
                    assign(pos_3, cons_list(index_uni(3), nil_index_list()),
                      (pos_3[(3 - 1)] + 1), "assigning variable pos_3");
                    current_statement__ = 245;
                    assign(Load_mat,
                      cons_list(index_uni(i),
                        cons_list(index_uni(j), nil_index_list())),
                      loadings[(pos_3[(3 - 1)] - 1)],
                      "assigning variable Load_mat");
                  }
                } }}
          }
          current_statement__ = 256;
          assign(Lambda_One_min_Beta_inv, nil_index_list(),
            multiply(Load_mat,
              inverse(subtract(diag_matrix(rep_vector(1, Nf)), Coef_mat))),
            "assigning variable Lambda_One_min_Beta_inv");
          current_statement__ = 260;
          for (int i = 1; i <= Nf_corr; ++i) {
            current_statement__ = 257;
            assign(F_corr_pe,
              cons_list(index_uni(F_corr_mat[(i - 1)][(1 - 1)]),
                cons_list(index_uni(i), nil_index_list())),
              stan::math::sqrt(
                (stan::math::abs(phi_cor[(i - 1)]) *
                  phi_var[(F_corr_mat[(i - 1)][(1 - 1)] - 1)])),
              "assigning variable F_corr_pe");
            current_statement__ = 258;
            assign(F_corr_pe,
              cons_list(index_uni(F_corr_mat[(i - 1)][(2 - 1)]),
                cons_list(index_uni(i), nil_index_list())),
              (sign(phi_cor[(i - 1)], pstream__) *
                stan::math::sqrt(
                  (stan::math::abs(phi_cor[(i - 1)]) *
                    phi_var[(F_corr_mat[(i - 1)][(2 - 1)] - 1)]))),
              "assigning variable F_corr_pe");}
          current_statement__ = 261;
          assign(F_cov_mat, nil_index_list(), tcrossprod(F_corr_pe),
            "assigning variable F_cov_mat");
          current_statement__ = 262;
          assign(F_var_resid, nil_index_list(),
            subtract(phi_var, diagonal(F_cov_mat)),
            "assigning variable F_var_resid");
          current_statement__ = 266;
          for (int i = 1; i <= Nce; ++i) {
            current_statement__ = 263;
            assign(loading_par_exp,
              cons_list(index_uni(error_mat[(i - 1)][(1 - 1)]),
                cons_list(index_uni(i), nil_index_list())),
              stan::math::sqrt(
                (stan::math::abs(res_cor[(i - 1)]) *
                  res_var[(error_mat[(i - 1)][(1 - 1)] - 1)])),
              "assigning variable loading_par_exp");
            current_statement__ = 264;
            assign(loading_par_exp,
              cons_list(index_uni(error_mat[(i - 1)][(2 - 1)]),
                cons_list(index_uni(i), nil_index_list())),
              (sign(res_cor[(i - 1)], pstream__) *
                stan::math::sqrt(
                  (stan::math::abs(res_cor[(i - 1)]) *
                    res_var[(error_mat[(i - 1)][(2 - 1)] - 1)]))),
              "assigning variable loading_par_exp");}
          current_statement__ = 267;
          assign(loading_par_exp_2, nil_index_list(),
            tcrossprod(loading_par_exp),
            "assigning variable loading_par_exp_2");
          current_statement__ = 268;
          assign(delta_mat_ast, nil_index_list(),
            subtract(res_var, diagonal(loading_par_exp_2)),
            "assigning variable delta_mat_ast");
          current_statement__ = 269;
          assign(Omega, nil_index_list(),
            add_diag(
              add(
                quad_form(add_diag(F_cov_mat, F_var_resid),
                  transpose(Lambda_One_min_Beta_inv)), loading_par_exp_2),
              delta_mat_ast), "assigning variable Omega");
          current_statement__ = 270;
          assign(total_var, nil_index_list(), diagonal(Omega),
            "assigning variable total_var");
          current_statement__ = 280;
          if (logical_lt(method, 90)) {
            int pos;
            pos = std::numeric_limits<int>::min();
            
            current_statement__ = 271;
            pos = 0;
            current_statement__ = 278;
            for (int i = 2; i <= Ni; ++i) {
              current_statement__ = 276;
              for (int j = 1; j <= (i - 1); ++j) {
                current_statement__ = 272;
                pos = (pos + 1);
                current_statement__ = 273;
                assign(Omega,
                  cons_list(index_uni(i),
                    cons_list(index_uni(j), nil_index_list())),
                  (rvalue(Omega,
                     cons_list(index_uni(i),
                       cons_list(index_uni(j), nil_index_list())), "Omega") +
                    ((resids[(pos - 1)] * rms_src_p[(1 - 1)]) *
                      stan::math::sqrt(
                        (total_var[(i - 1)] * total_var[(j - 1)])))),
                  "assigning variable Omega");
                current_statement__ = 274;
                assign(Omega,
                  cons_list(index_uni(j),
                    cons_list(index_uni(i), nil_index_list())),
                  rvalue(Omega,
                    cons_list(index_uni(i),
                      cons_list(index_uni(j), nil_index_list())), "Omega"),
                  "assigning variable Omega");}}
          } 
          current_statement__ = 283;
          if (logical_neq(method, 91)) {
            current_statement__ = 281;
            lp_accum__.add(
              inv_wishart_lpdf<propto__>(Sigma, 1000, identity_matrix(1)));
          } 
          current_statement__ = 295;
          if ((primitive_value(logical_gte(method, 90)) && primitive_value(
              logical_lte(method, 99)))) {
            current_statement__ = 286;
            m = (((1.0 / square(rms_src_p[(1 - 1)])) + Ni) - 1);
            current_statement__ = 293;
            if (logical_eq(method, 90)) {
              current_statement__ = 291;
              lp_accum__.add(
                gen_matrix_beta_ii_lpdf<false>(S, Omega, (Np - 1.0), m,
                  ln_det_S, pstream__));
            } else {
              current_statement__ = 290;
              if (logical_eq(method, 91)) {
                current_statement__ = 287;
                lp_accum__.add(
                  inv_wishart_lpdf<propto__>(Sigma, m, multiply(m, Omega)));
                current_statement__ = 288;
                lp_accum__.add(wishart_lpdf<false>(N_S, (Np - 1), Sigma));
              } 
            }
          } else {
            current_statement__ = 284;
            lp_accum__.add(wishart_lpdf<false>(N_S, (Np - 1), Omega));
          }
        }
      }
    } catch (const std::exception& e) {
      stan::lang::rethrow_located(e, locations_array__[current_statement__]);
      // Next line prevents compiler griping about no return
      throw std::runtime_error("*** IF YOU SEE THIS, PLEASE REPORT A BUG ***"); 
    }
    lp_accum__.add(lp__);
    return lp_accum__.sum();
    } // log_prob_impl() 
    
  template <typename RNG, typename VecR, typename VecI, typename VecVar, stan::require_vector_like_vt<std::is_floating_point, VecR>* = nullptr, stan::require_vector_like_vt<std::is_integral, VecI>* = nullptr, stan::require_std_vector_vt<std::is_floating_point, VecVar>* = nullptr>
  inline void write_array_impl(RNG& base_rng__, VecR& params_r__,
                               VecI& params_i__, VecVar& vars__,
                               const bool emit_transformed_parameters__ = true,
                               const bool emit_generated_quantities__ = true,
                               std::ostream* pstream__ = nullptr) const {
    using local_scalar_t__ = double;
    vars__.resize(0);
    stan::io::reader<local_scalar_t__> in__(params_r__, params_i__);
    static const char* function__ = "model_sem_resid_rs_namespace::write_array";
(void) function__;  // suppress unused var warning
    (void) function__;  // suppress unused var warning
    double lp__ = 0.0;
    (void) lp__;  // dummy to suppress unused var warning
    stan::math::accumulator<double> lp_accum__;
    local_scalar_t__ DUMMY_VAR__(std::numeric_limits<double>::quiet_NaN());
    (void) DUMMY_VAR__;  // suppress unused var warning
    
    try {
      Eigen::Matrix<double, -1, 1> rms_src_p;
      rms_src_p = Eigen::Matrix<double, -1, 1>(N_rms);
      stan::math::fill(rms_src_p, std::numeric_limits<double>::quiet_NaN());
      
      current_statement__ = 1;
      rms_src_p = in__.vector(N_rms);
      current_statement__ = 1;
      for (int sym1__ = 1; sym1__ <= N_rms; ++sym1__) {
        current_statement__ = 1;
        assign(rms_src_p, cons_list(index_uni(sym1__), nil_index_list()),
          stan::math::lb_constrain(rms_src_p[(sym1__ - 1)], 0.0),
          "assigning variable rms_src_p");}
      Eigen::Matrix<double, -1, 1> gdp_alpha;
      gdp_alpha = Eigen::Matrix<double, -1, 1>(N_alpha);
      stan::math::fill(gdp_alpha, std::numeric_limits<double>::quiet_NaN());
      
      current_statement__ = 2;
      gdp_alpha = in__.vector(N_alpha);
      current_statement__ = 2;
      for (int sym1__ = 1; sym1__ <= N_alpha; ++sym1__) {
        current_statement__ = 2;
        assign(gdp_alpha, cons_list(index_uni(sym1__), nil_index_list()),
          stan::math::lb_constrain(gdp_alpha[(sym1__ - 1)], 2.0),
          "assigning variable gdp_alpha");}
      Eigen::Matrix<double, -1, 1> resids;
      resids = Eigen::Matrix<double, -1, 1>(Nisqd2);
      stan::math::fill(resids, std::numeric_limits<double>::quiet_NaN());
      
      current_statement__ = 3;
      resids = in__.vector(Nisqd2);
      Eigen::Matrix<double, -1, 1> loadings;
      loadings = Eigen::Matrix<double, -1, 1>(loadings_1dim__);
      stan::math::fill(loadings, std::numeric_limits<double>::quiet_NaN());
      
      current_statement__ = 4;
      loadings = in__.vector(loadings_1dim__);
      current_statement__ = 4;
      for (int sym1__ = 1; sym1__ <= loadings_1dim__; ++sym1__) {
        current_statement__ = 4;
        assign(loadings, cons_list(index_uni(sym1__), nil_index_list()),
          stan::math::lb_constrain(loadings[(sym1__ - 1)], 0),
          "assigning variable loadings");}
      double sigma_loadings;
      sigma_loadings = std::numeric_limits<double>::quiet_NaN();
      
      current_statement__ = 5;
      sigma_loadings = in__.scalar();
      current_statement__ = 5;
      sigma_loadings = stan::math::lb_constrain(sigma_loadings, 0);
      Eigen::Matrix<double, -1, 1> phi_sd;
      phi_sd = Eigen::Matrix<double, -1, 1>(Nf);
      stan::math::fill(phi_sd, std::numeric_limits<double>::quiet_NaN());
      
      current_statement__ = 6;
      phi_sd = in__.vector(Nf);
      current_statement__ = 6;
      for (int sym1__ = 1; sym1__ <= Nf; ++sym1__) {
        current_statement__ = 6;
        assign(phi_sd, cons_list(index_uni(sym1__), nil_index_list()),
          stan::math::lb_constrain(phi_sd[(sym1__ - 1)], 0),
          "assigning variable phi_sd");}
      Eigen::Matrix<double, -1, 1> res_sds;
      res_sds = Eigen::Matrix<double, -1, 1>(Ni);
      stan::math::fill(res_sds, std::numeric_limits<double>::quiet_NaN());
      
      current_statement__ = 7;
      res_sds = in__.vector(Ni);
      current_statement__ = 7;
      for (int sym1__ = 1; sym1__ <= Ni; ++sym1__) {
        current_statement__ = 7;
        assign(res_sds, cons_list(index_uni(sym1__), nil_index_list()),
          stan::math::lb_constrain(res_sds[(sym1__ - 1)], 0),
          "assigning variable res_sds");}
      Eigen::Matrix<double, -1, 1> phi_cor_01;
      phi_cor_01 = Eigen::Matrix<double, -1, 1>(Nf_corr);
      stan::math::fill(phi_cor_01, std::numeric_limits<double>::quiet_NaN());
      
      current_statement__ = 8;
      phi_cor_01 = in__.vector(Nf_corr);
      current_statement__ = 8;
      for (int sym1__ = 1; sym1__ <= Nf_corr; ++sym1__) {
        current_statement__ = 8;
        assign(phi_cor_01, cons_list(index_uni(sym1__), nil_index_list()),
          stan::math::lub_constrain(phi_cor_01[(sym1__ - 1)], 0, 1),
          "assigning variable phi_cor_01");}
      Eigen::Matrix<double, -1, 1> res_cor_01;
      res_cor_01 = Eigen::Matrix<double, -1, 1>(Nce);
      stan::math::fill(res_cor_01, std::numeric_limits<double>::quiet_NaN());
      
      current_statement__ = 9;
      res_cor_01 = in__.vector(Nce);
      current_statement__ = 9;
      for (int sym1__ = 1; sym1__ <= Nce; ++sym1__) {
        current_statement__ = 9;
        assign(res_cor_01, cons_list(index_uni(sym1__), nil_index_list()),
          stan::math::lub_constrain(res_cor_01[(sym1__ - 1)], 0, 1),
          "assigning variable res_cor_01");}
      Eigen::Matrix<double, -1, 1> coefs;
      coefs = Eigen::Matrix<double, -1, 1>(coef_count);
      stan::math::fill(coefs, std::numeric_limits<double>::quiet_NaN());
      
      current_statement__ = 10;
      coefs = in__.vector(coef_count);
      Eigen::Matrix<double, -1, 1> sigma_coefs;
      sigma_coefs = Eigen::Matrix<double, -1, 1>(outcome_count);
      stan::math::fill(sigma_coefs, std::numeric_limits<double>::quiet_NaN());
      
      current_statement__ = 11;
      sigma_coefs = in__.vector(outcome_count);
      current_statement__ = 11;
      for (int sym1__ = 1; sym1__ <= outcome_count; ++sym1__) {
        current_statement__ = 11;
        assign(sigma_coefs, cons_list(index_uni(sym1__), nil_index_list()),
          stan::math::lb_constrain(sigma_coefs[(sym1__ - 1)], 0),
          "assigning variable sigma_coefs");}
      Eigen::Matrix<double, -1, -1> Sigma;
      Sigma = Eigen::Matrix<double, -1, -1>(N_Sigma, N_Sigma);
      stan::math::fill(Sigma, std::numeric_limits<double>::quiet_NaN());
      
      Eigen::Matrix<local_scalar_t__, -1, 1> Sigma_in__;
      Sigma_in__ = Eigen::Matrix<local_scalar_t__, -1, 1>((N_Sigma +
                                                            ((N_Sigma *
                                                               (N_Sigma - 1))
                                                              / 2)));
      stan::math::fill(Sigma_in__, DUMMY_VAR__);
      
      current_statement__ = 12;
      Sigma_in__ = in__.vector((N_Sigma + ((N_Sigma * (N_Sigma - 1)) / 2)));
      current_statement__ = 12;
      assign(Sigma, nil_index_list(),
        stan::math::cov_matrix_constrain(Sigma_in__, N_Sigma),
        "assigning variable Sigma");
      for (int sym1__ = 1; sym1__ <= N_rms; ++sym1__) {
        vars__.emplace_back(rms_src_p[(sym1__ - 1)]);}
      for (int sym1__ = 1; sym1__ <= N_alpha; ++sym1__) {
        vars__.emplace_back(gdp_alpha[(sym1__ - 1)]);}
      for (int sym1__ = 1; sym1__ <= Nisqd2; ++sym1__) {
        vars__.emplace_back(resids[(sym1__ - 1)]);}
      for (int sym1__ = 1; sym1__ <= loadings_1dim__; ++sym1__) {
        vars__.emplace_back(loadings[(sym1__ - 1)]);}
      vars__.emplace_back(sigma_loadings);
      for (int sym1__ = 1; sym1__ <= Nf; ++sym1__) {
        vars__.emplace_back(phi_sd[(sym1__ - 1)]);}
      for (int sym1__ = 1; sym1__ <= Ni; ++sym1__) {
        vars__.emplace_back(res_sds[(sym1__ - 1)]);}
      for (int sym1__ = 1; sym1__ <= Nf_corr; ++sym1__) {
        vars__.emplace_back(phi_cor_01[(sym1__ - 1)]);}
      for (int sym1__ = 1; sym1__ <= Nce; ++sym1__) {
        vars__.emplace_back(res_cor_01[(sym1__ - 1)]);}
      for (int sym1__ = 1; sym1__ <= coef_count; ++sym1__) {
        vars__.emplace_back(coefs[(sym1__ - 1)]);}
      for (int sym1__ = 1; sym1__ <= outcome_count; ++sym1__) {
        vars__.emplace_back(sigma_coefs[(sym1__ - 1)]);}
      for (int sym1__ = 1; sym1__ <= N_Sigma; ++sym1__) {
        for (int sym2__ = 1; sym2__ <= N_Sigma; ++sym2__) {
          vars__.emplace_back(
            rvalue(Sigma,
              cons_list(index_uni(sym2__),
                cons_list(index_uni(sym1__), nil_index_list())), "Sigma"));}}
      if (logical_negation((primitive_value(emit_transformed_parameters__) ||
            primitive_value(emit_generated_quantities__)))) {
        return ;
      } 
      if (logical_negation(emit_generated_quantities__)) {
        return ;
      } 
      double D_obs;
      D_obs = std::numeric_limits<double>::quiet_NaN();
      
      double D_rep;
      D_rep = std::numeric_limits<double>::quiet_NaN();
      
      double ppp;
      ppp = std::numeric_limits<double>::quiet_NaN();
      
      double rms_src;
      rms_src = std::numeric_limits<double>::quiet_NaN();
      
      Eigen::Matrix<double, -1, -1> Load_mat_u;
      Load_mat_u = Eigen::Matrix<double, -1, -1>(Ni, Nf);
      stan::math::fill(Load_mat_u, std::numeric_limits<double>::quiet_NaN());
      
      current_statement__ = 17;
      assign(Load_mat_u, nil_index_list(), rep_matrix(0, Ni, Nf),
        "assigning variable Load_mat_u");
      Eigen::Matrix<double, -1, -1> Coef_mat_u;
      Coef_mat_u = Eigen::Matrix<double, -1, -1>(Nf, Nf);
      stan::math::fill(Coef_mat_u, std::numeric_limits<double>::quiet_NaN());
      
      current_statement__ = 18;
      assign(Coef_mat_u, nil_index_list(), rep_matrix(0, Nf, Nf),
        "assigning variable Coef_mat_u");
      Eigen::Matrix<double, -1, -1> Load_mat;
      Load_mat = Eigen::Matrix<double, -1, -1>(Ni, Nf);
      stan::math::fill(Load_mat, std::numeric_limits<double>::quiet_NaN());
      
      current_statement__ = 19;
      assign(Load_mat, nil_index_list(), rep_matrix(0, Ni, Nf),
        "assigning variable Load_mat");
      Eigen::Matrix<double, -1, -1> Coef_mat;
      Coef_mat = Eigen::Matrix<double, -1, -1>(Nf, Nf);
      stan::math::fill(Coef_mat, std::numeric_limits<double>::quiet_NaN());
      
      current_statement__ = 20;
      assign(Coef_mat, nil_index_list(), rep_matrix(0, Nf, Nf),
        "assigning variable Coef_mat");
      Eigen::Matrix<double, -1, 1> phi_var;
      phi_var = Eigen::Matrix<double, -1, 1>(Nf);
      stan::math::fill(phi_var, std::numeric_limits<double>::quiet_NaN());
      
      current_statement__ = 21;
      assign(phi_var, nil_index_list(), square(phi_sd),
        "assigning variable phi_var");
      Eigen::Matrix<double, -1, 1> r_square;
      r_square = Eigen::Matrix<double, -1, 1>(Nf);
      stan::math::fill(r_square, std::numeric_limits<double>::quiet_NaN());
      
      Eigen::Matrix<double, -1, 1> phi_cor;
      phi_cor = Eigen::Matrix<double, -1, 1>(Nf_corr);
      stan::math::fill(phi_cor, std::numeric_limits<double>::quiet_NaN());
      
      current_statement__ = 23;
      assign(phi_cor, nil_index_list(), subtract(multiply(phi_cor_01, 2), 1),
        "assigning variable phi_cor");
      Eigen::Matrix<double, -1, 1> res_var;
      res_var = Eigen::Matrix<double, -1, 1>(Ni);
      stan::math::fill(res_var, std::numeric_limits<double>::quiet_NaN());
      
      current_statement__ = 24;
      assign(res_var, nil_index_list(), square(res_sds),
        "assigning variable res_var");
      Eigen::Matrix<double, -1, 1> res_cor;
      res_cor = Eigen::Matrix<double, -1, 1>(Nce);
      stan::math::fill(res_cor, std::numeric_limits<double>::quiet_NaN());
      
      current_statement__ = 25;
      assign(res_cor, nil_index_list(), subtract(multiply(res_cor_01, 2), 1),
        "assigning variable res_cor");
      Eigen::Matrix<double, -1, 1> res_cov;
      res_cov = Eigen::Matrix<double, -1, 1>(Nce);
      stan::math::fill(res_cov, std::numeric_limits<double>::quiet_NaN());
      
      Eigen::Matrix<double, -1, -1> Resid;
      Resid = Eigen::Matrix<double, -1, -1>(Ni, Ni);
      stan::math::fill(Resid, std::numeric_limits<double>::quiet_NaN());
      
      current_statement__ = 27;
      assign(Resid, nil_index_list(), rep_matrix(0.0, Ni, Ni),
        "assigning variable Resid");
      current_statement__ = 32;
      if (logical_neq(method, 100)) {
        current_statement__ = 30;
        rms_src = rms_src_p[(1 - 1)];
      } else {
        current_statement__ = 28;
        rms_src = 0.0;
      }
      current_statement__ = 41;
      if (logical_eq(method, 2)) {
        current_statement__ = 39;
        rms_src = (rms_src * sqrt_two);
      } else {
        current_statement__ = 38;
        if (logical_eq(method, 3)) {
          current_statement__ = 36;
          rms_src = (rms_src * pi_sqrt_three);
        } else {
          current_statement__ = 35;
          if (logical_eq(method, 4)) {
            current_statement__ = 33;
            rms_src = (rms_src *
                        ((sqrt_two * gdp_alpha[(1 - 1)]) /
                          stan::math::sqrt(
                            ((gdp_alpha[(1 - 1)] - 1.0) *
                              (gdp_alpha[(1 - 1)] - 2.0)))));
          } 
        }
      }
      current_statement__ = 51;
      if (logical_lt(method, 90)) {
        int pos;
        pos = std::numeric_limits<int>::min();
        
        current_statement__ = 42;
        pos = 0;
        current_statement__ = 49;
        for (int i = 2; i <= Ni; ++i) {
          current_statement__ = 47;
          for (int j = 1; j <= (i - 1); ++j) {
            current_statement__ = 43;
            pos = (pos + 1);
            current_statement__ = 44;
            assign(Resid,
              cons_list(index_uni(i),
                cons_list(index_uni(j), nil_index_list())),
              (resids[(pos - 1)] * rms_src_p[(1 - 1)]),
              "assigning variable Resid");
            current_statement__ = 45;
            assign(Resid,
              cons_list(index_uni(j),
                cons_list(index_uni(i), nil_index_list())),
              rvalue(Resid,
                cons_list(index_uni(i),
                  cons_list(index_uni(j), nil_index_list())), "Resid"),
              "assigning variable Resid");}}
      } 
      {
        double m;
        m = std::numeric_limits<double>::quiet_NaN();
        
        current_statement__ = 53;
        validate_non_negative_index("Omega", "Ni", Ni);
        current_statement__ = 54;
        validate_non_negative_index("Omega", "Ni", Ni);
        Eigen::Matrix<double, -1, -1> Omega;
        Omega = Eigen::Matrix<double, -1, -1>(Ni, Ni);
        stan::math::fill(Omega, std::numeric_limits<double>::quiet_NaN());
        
        current_statement__ = 56;
        validate_non_negative_index("Sigma_p", "Ni", Ni);
        current_statement__ = 57;
        validate_non_negative_index("Sigma_p", "Ni", Ni);
        Eigen::Matrix<double, -1, -1> Sigma_p;
        Sigma_p = Eigen::Matrix<double, -1, -1>(Ni, Ni);
        stan::math::fill(Sigma_p, std::numeric_limits<double>::quiet_NaN());
        
        current_statement__ = 59;
        validate_non_negative_index("S_sim", "Ni", Ni);
        current_statement__ = 60;
        validate_non_negative_index("S_sim", "Ni", Ni);
        Eigen::Matrix<double, -1, -1> S_sim;
        S_sim = Eigen::Matrix<double, -1, -1>(Ni, Ni);
        stan::math::fill(S_sim, std::numeric_limits<double>::quiet_NaN());
        
        current_statement__ = 62;
        validate_non_negative_index("F_corr_pe", "Nf", Nf);
        current_statement__ = 63;
        validate_non_negative_index("F_corr_pe", "Nf_corr", Nf_corr);
        Eigen::Matrix<double, -1, -1> F_corr_pe;
        F_corr_pe = Eigen::Matrix<double, -1, -1>(Nf, Nf_corr);
        stan::math::fill(F_corr_pe, std::numeric_limits<double>::quiet_NaN());
        
        current_statement__ = 64;
        assign(F_corr_pe, nil_index_list(), rep_matrix(0, Nf, Nf_corr),
          "assigning variable F_corr_pe");
        current_statement__ = 65;
        validate_non_negative_index("F_cov_mat", "Nf", Nf);
        current_statement__ = 66;
        validate_non_negative_index("F_cov_mat", "Nf", Nf);
        Eigen::Matrix<double, -1, -1> F_cov_mat;
        F_cov_mat = Eigen::Matrix<double, -1, -1>(Nf, Nf);
        stan::math::fill(F_cov_mat, std::numeric_limits<double>::quiet_NaN());
        
        current_statement__ = 68;
        validate_non_negative_index("F_var_resid", "Nf", Nf);
        Eigen::Matrix<double, -1, 1> F_var_resid;
        F_var_resid = Eigen::Matrix<double, -1, 1>(Nf);
        stan::math::fill(F_var_resid, std::numeric_limits<double>::quiet_NaN());
        
        current_statement__ = 70;
        validate_non_negative_index("loading_par_exp", "Ni", Ni);
        current_statement__ = 71;
        validate_non_negative_index("loading_par_exp", "Nce", Nce);
        Eigen::Matrix<double, -1, -1> loading_par_exp;
        loading_par_exp = Eigen::Matrix<double, -1, -1>(Ni, Nce);
        stan::math::fill(loading_par_exp, std::numeric_limits<double>::quiet_NaN());
        
        current_statement__ = 72;
        assign(loading_par_exp, nil_index_list(), rep_matrix(0, Ni, Nce),
          "assigning variable loading_par_exp");
        current_statement__ = 73;
        validate_non_negative_index("loading_par_exp_2", "Ni", Ni);
        current_statement__ = 74;
        validate_non_negative_index("loading_par_exp_2", "Ni", Ni);
        Eigen::Matrix<double, -1, -1> loading_par_exp_2;
        loading_par_exp_2 = Eigen::Matrix<double, -1, -1>(Ni, Ni);
        stan::math::fill(loading_par_exp_2, std::numeric_limits<double>::quiet_NaN());
        
        current_statement__ = 76;
        validate_non_negative_index("One_min_Beta_inv", "Nf", Nf);
        current_statement__ = 77;
        validate_non_negative_index("One_min_Beta_inv", "Nf", Nf);
        Eigen::Matrix<double, -1, -1> One_min_Beta_inv;
        One_min_Beta_inv = Eigen::Matrix<double, -1, -1>(Nf, Nf);
        stan::math::fill(One_min_Beta_inv, std::numeric_limits<double>::quiet_NaN());
        
        current_statement__ = 79;
        validate_non_negative_index("Lambda_One_min_Beta_inv", "Ni", Ni);
        current_statement__ = 80;
        validate_non_negative_index("Lambda_One_min_Beta_inv", "Nf", Nf);
        Eigen::Matrix<double, -1, -1> Lambda_One_min_Beta_inv;
        Lambda_One_min_Beta_inv = Eigen::Matrix<double, -1, -1>(Ni, Nf);
        stan::math::fill(Lambda_One_min_Beta_inv, std::numeric_limits<double>::quiet_NaN());
        
        current_statement__ = 82;
        validate_non_negative_index("delta_mat_ast", "Ni", Ni);
        Eigen::Matrix<double, -1, 1> delta_mat_ast;
        delta_mat_ast = Eigen::Matrix<double, -1, 1>(Ni);
        stan::math::fill(delta_mat_ast, std::numeric_limits<double>::quiet_NaN());
        
        current_statement__ = 84;
        validate_non_negative_index("total_var", "Ni", Ni);
        Eigen::Matrix<double, -1, 1> total_var;
        total_var = Eigen::Matrix<double, -1, 1>(Ni);
        stan::math::fill(total_var, std::numeric_limits<double>::quiet_NaN());
        
        current_statement__ = 86;
        validate_non_negative_index("d_rt_c_hat", "Nf", Nf);
        Eigen::Matrix<double, -1, 1> d_rt_c_hat;
        d_rt_c_hat = Eigen::Matrix<double, -1, 1>(Nf);
        stan::math::fill(d_rt_c_hat, std::numeric_limits<double>::quiet_NaN());
        
        {
          std::vector<int> pos_3;
          pos_3 = std::vector<int>(3, std::numeric_limits<int>::min());
          
          current_statement__ = 88;
          assign(pos_3, nil_index_list(), rep_array(0, 3),
            "assigning variable pos_3");
          current_statement__ = 98;
          for (int i = 1; i <= Nf; ++i) {
            current_statement__ = 90;
            if (logical_gt(
                  sum(
                    rvalue(coef_pattern,
                      cons_list(index_uni(i),
                        cons_list(index_omni(), nil_index_list())),
                      "coef_pattern")), 0)) {
              current_statement__ = 89;
              assign(pos_3, cons_list(index_uni(1), nil_index_list()),
                (pos_3[(1 - 1)] + 1), "assigning variable pos_3");
            } 
            current_statement__ = 96;
            for (int j = 1; j <= Nf; ++j) {
              current_statement__ = 94;
              if (logical_eq(coef_pattern[(i - 1)][(j - 1)], 1)) {
                current_statement__ = 91;
                assign(pos_3, cons_list(index_uni(2), nil_index_list()),
                  (pos_3[(2 - 1)] + 1), "assigning variable pos_3");
                current_statement__ = 92;
                assign(Coef_mat,
                  cons_list(index_uni(i),
                    cons_list(index_uni(j), nil_index_list())),
                  (sigma_coefs[(pos_3[(1 - 1)] - 1)] *
                    coefs[(pos_3[(2 - 1)] - 1)]),
                  "assigning variable Coef_mat");
              } }}
          current_statement__ = 109;
          for (int i = 1; i <= Ni; ++i) {
            current_statement__ = 107;
            for (int j = 1; j <= Nf; ++j) {
              current_statement__ = 105;
              if (logical_neq(
                    rvalue(loading_pattern,
                      cons_list(index_uni(i),
                        cons_list(index_uni(j), nil_index_list())),
                      "loading_pattern"), 0)) {
                current_statement__ = 103;
                if (logical_eq(i, markers[(j - 1)])) {
                  current_statement__ = 102;
                  assign(Load_mat,
                    cons_list(index_uni(i),
                      cons_list(index_uni(j), nil_index_list())), 1,
                    "assigning variable Load_mat");
                } else {
                  current_statement__ = 99;
                  assign(pos_3, cons_list(index_uni(3), nil_index_list()),
                    (pos_3[(3 - 1)] + 1), "assigning variable pos_3");
                  current_statement__ = 100;
                  assign(Load_mat,
                    cons_list(index_uni(i),
                      cons_list(index_uni(j), nil_index_list())),
                    loadings[(pos_3[(3 - 1)] - 1)],
                    "assigning variable Load_mat");
                }
              } }}
        }
        current_statement__ = 111;
        assign(Coef_mat_u, nil_index_list(), Coef_mat,
          "assigning variable Coef_mat_u");
        current_statement__ = 112;
        assign(Load_mat_u, nil_index_list(), Load_mat,
          "assigning variable Load_mat_u");
        current_statement__ = 113;
        assign(One_min_Beta_inv, nil_index_list(),
          inverse(subtract(diag_matrix(rep_vector(1, Nf)), Coef_mat)),
          "assigning variable One_min_Beta_inv");
        current_statement__ = 114;
        assign(Lambda_One_min_Beta_inv, nil_index_list(),
          multiply(Load_mat, One_min_Beta_inv),
          "assigning variable Lambda_One_min_Beta_inv");
        current_statement__ = 118;
        for (int i = 1; i <= Nf_corr; ++i) {
          current_statement__ = 115;
          assign(F_corr_pe,
            cons_list(index_uni(F_corr_mat[(i - 1)][(1 - 1)]),
              cons_list(index_uni(i), nil_index_list())),
            stan::math::sqrt(
              (stan::math::abs(phi_cor[(i - 1)]) *
                phi_var[(F_corr_mat[(i - 1)][(1 - 1)] - 1)])),
            "assigning variable F_corr_pe");
          current_statement__ = 116;
          assign(F_corr_pe,
            cons_list(index_uni(F_corr_mat[(i - 1)][(2 - 1)]),
              cons_list(index_uni(i), nil_index_list())),
            (sign(phi_cor[(i - 1)], pstream__) *
              stan::math::sqrt(
                (stan::math::abs(phi_cor[(i - 1)]) *
                  phi_var[(F_corr_mat[(i - 1)][(2 - 1)] - 1)]))),
            "assigning variable F_corr_pe");}
        current_statement__ = 119;
        assign(F_cov_mat, nil_index_list(), tcrossprod(F_corr_pe),
          "assigning variable F_cov_mat");
        current_statement__ = 120;
        assign(F_var_resid, nil_index_list(),
          subtract(phi_var, diagonal(F_cov_mat)),
          "assigning variable F_var_resid");
        current_statement__ = 124;
        for (int i = 1; i <= Nce; ++i) {
          current_statement__ = 121;
          assign(loading_par_exp,
            cons_list(index_uni(error_mat[(i - 1)][(1 - 1)]),
              cons_list(index_uni(i), nil_index_list())),
            stan::math::sqrt(
              (stan::math::abs(res_cor[(i - 1)]) *
                res_var[(error_mat[(i - 1)][(1 - 1)] - 1)])),
            "assigning variable loading_par_exp");
          current_statement__ = 122;
          assign(loading_par_exp,
            cons_list(index_uni(error_mat[(i - 1)][(2 - 1)]),
              cons_list(index_uni(i), nil_index_list())),
            (sign(res_cor[(i - 1)], pstream__) *
              stan::math::sqrt(
                (stan::math::abs(res_cor[(i - 1)]) *
                  res_var[(error_mat[(i - 1)][(2 - 1)] - 1)]))),
            "assigning variable loading_par_exp");}
        current_statement__ = 125;
        assign(loading_par_exp_2, nil_index_list(),
          tcrossprod(loading_par_exp), "assigning variable loading_par_exp_2");
        current_statement__ = 126;
        assign(delta_mat_ast, nil_index_list(),
          subtract(res_var, diagonal(loading_par_exp_2)),
          "assigning variable delta_mat_ast");
        current_statement__ = 127;
        assign(Omega, nil_index_list(),
          add_diag(
            add(
              quad_form(add_diag(F_cov_mat, F_var_resid),
                transpose(Lambda_One_min_Beta_inv)), loading_par_exp_2),
            delta_mat_ast), "assigning variable Omega");
        current_statement__ = 128;
        assign(total_var, nil_index_list(), diagonal(Omega),
          "assigning variable total_var");
        current_statement__ = 138;
        if (logical_lt(method, 90)) {
          int pos;
          pos = std::numeric_limits<int>::min();
          
          current_statement__ = 129;
          pos = 0;
          current_statement__ = 136;
          for (int i = 2; i <= Ni; ++i) {
            current_statement__ = 134;
            for (int j = 1; j <= (i - 1); ++j) {
              current_statement__ = 130;
              pos = (pos + 1);
              current_statement__ = 131;
              assign(Omega,
                cons_list(index_uni(i),
                  cons_list(index_uni(j), nil_index_list())),
                (rvalue(Omega,
                   cons_list(index_uni(i),
                     cons_list(index_uni(j), nil_index_list())), "Omega") +
                  ((resids[(pos - 1)] * rms_src_p[(1 - 1)]) *
                    stan::math::sqrt(
                      (total_var[(i - 1)] * total_var[(j - 1)])))),
                "assigning variable Omega");
              current_statement__ = 132;
              assign(Omega,
                cons_list(index_uni(j),
                  cons_list(index_uni(i), nil_index_list())),
                rvalue(Omega,
                  cons_list(index_uni(i),
                    cons_list(index_uni(j), nil_index_list())), "Omega"),
                "assigning variable Omega");}}
        } 
        current_statement__ = 156;
        if ((primitive_value(logical_gte(method, 90)) && primitive_value(
            logical_lte(method, 99)))) {
          current_statement__ = 154;
          if (logical_eq(method, 90)) {
            current_statement__ = 148;
            m = (((1.0 / square(rms_src_p[(1 - 1)])) + Ni) - 1);
            current_statement__ = 149;
            assign(Sigma_p, nil_index_list(),
              inv_wishart_rng(m, multiply(m, Omega), base_rng__),
              "assigning variable Sigma_p");
            current_statement__ = 150;
            assign(S_sim, nil_index_list(),
              wishart_rng((Np - 1.0), divide(Sigma_p, (Np - 1.0)),
                base_rng__), "assigning variable S_sim");
            current_statement__ = 151;
            D_obs = (-2.0 *
                      gen_matrix_beta_ii_lpdf<false>(S, Omega, (Np - 1.0), m,
                        ln_det_S, pstream__));
            current_statement__ = 152;
            D_rep = (-2.0 *
                      gen_matrix_beta_ii_lpdf<false>(S_sim, Omega,
                        (Np - 1.0), m, ln_det_S, pstream__));
          } else {
            current_statement__ = 147;
            if (logical_eq(method, 91)) {
              current_statement__ = 143;
              assign(S_sim, nil_index_list(),
                wishart_rng((Np - 1.0), divide(Sigma, (Np - 1.0)),
                  base_rng__), "assigning variable S_sim");
              current_statement__ = 144;
              D_obs = (-2.0 * wishart_lpdf<false>(S, (Np - 1.0), Sigma));
              current_statement__ = 145;
              D_rep = (-2.0 * wishart_lpdf<false>(S_sim, (Np - 1.0), Sigma));
            } 
          }
        } else {
          current_statement__ = 139;
          assign(S_sim, nil_index_list(),
            wishart_rng((Np - 1.0), divide(Omega, (Np - 1.0)), base_rng__),
            "assigning variable S_sim");
          current_statement__ = 140;
          D_obs = (-2.0 *
                    wishart_lpdf<false>(S, (Np - 1.0),
                      divide(Omega, (Np - 1.0))));
          current_statement__ = 141;
          D_rep = (-2.0 *
                    wishart_lpdf<false>(S_sim, (Np - 1.0),
                      divide(Omega, (Np - 1.0))));
        }
        current_statement__ = 157;
        ppp = (logical_gt(D_rep, D_obs) ? 1.0 : 0.0);
        current_statement__ = 158;
        assign(d_rt_c_hat, nil_index_list(),
          stan::math::sqrt(
            diagonal(
              quad_form(add_diag(F_cov_mat, F_var_resid),
                transpose(One_min_Beta_inv)))),
          "assigning variable d_rt_c_hat");
        current_statement__ = 164;
        for (int j = 1; j <= Nf; ++j) {
          current_statement__ = 159;
          assign(Load_mat,
            cons_list(index_omni(),
              cons_list(index_uni(j), nil_index_list())),
            multiply(
              stan::model::deep_copy(
                rvalue(Load_mat,
                  cons_list(index_omni(),
                    cons_list(index_uni(j), nil_index_list())), "Load_mat")),
              d_rt_c_hat[(j - 1)]), "assigning variable Load_mat");
          current_statement__ = 160;
          assign(Coef_mat,
            cons_list(index_omni(),
              cons_list(index_uni(j), nil_index_list())),
            multiply(
              stan::model::deep_copy(
                rvalue(Coef_mat,
                  cons_list(index_omni(),
                    cons_list(index_uni(j), nil_index_list())), "Coef_mat")),
              d_rt_c_hat[(j - 1)]), "assigning variable Coef_mat");
          current_statement__ = 161;
          assign(Coef_mat,
            cons_list(index_uni(j),
              cons_list(index_omni(), nil_index_list())),
            divide(
              stan::model::deep_copy(
                rvalue(Coef_mat,
                  cons_list(index_uni(j),
                    cons_list(index_omni(), nil_index_list())), "Coef_mat")),
              d_rt_c_hat[(j - 1)]), "assigning variable Coef_mat");
          current_statement__ = 162;
          assign(r_square, cons_list(index_uni(j), nil_index_list()),
            (1.0 - (phi_var[(j - 1)] / square(d_rt_c_hat[(j - 1)]))),
            "assigning variable r_square");}
        current_statement__ = 167;
        for (int i = 1; i <= Ni; ++i) {
          current_statement__ = 165;
          assign(Load_mat,
            cons_list(index_uni(i),
              cons_list(index_omni(), nil_index_list())),
            divide(
              stan::model::deep_copy(
                rvalue(Load_mat,
                  cons_list(index_uni(i),
                    cons_list(index_omni(), nil_index_list())), "Load_mat")),
              stan::math::sqrt(total_var[(i - 1)])),
            "assigning variable Load_mat");}
      }
      current_statement__ = 171;
      for (int i = 1; i <= Nce; ++i) {
        current_statement__ = 169;
        assign(res_cov, cons_list(index_uni(i), nil_index_list()),
          (res_cor[(i - 1)] *
            prod(
              rvalue(res_sds,
                cons_list(
                  index_multi(rvalue(error_mat,
                                cons_list(index_uni(i),
                                  cons_list(index_omni(), nil_index_list())),
                                "error_mat")), nil_index_list()), "res_sds"))),
          "assigning variable res_cov");}
      current_statement__ = 15;
      current_statement__ = 15;
      check_greater_or_equal(function__, "ppp", ppp, 0);
      current_statement__ = 15;
      current_statement__ = 15;
      check_less_or_equal(function__, "ppp", ppp, 1);
      current_statement__ = 16;
      current_statement__ = 16;
      check_greater_or_equal(function__, "rms_src", rms_src, 0);
      vars__.emplace_back(D_obs);
      vars__.emplace_back(D_rep);
      vars__.emplace_back(ppp);
      vars__.emplace_back(rms_src);
      for (int sym1__ = 1; sym1__ <= Nf; ++sym1__) {
        for (int sym2__ = 1; sym2__ <= Ni; ++sym2__) {
          vars__.emplace_back(
            rvalue(Load_mat_u,
              cons_list(index_uni(sym2__),
                cons_list(index_uni(sym1__), nil_index_list())),
              "Load_mat_u"));}}
      for (int sym1__ = 1; sym1__ <= Nf; ++sym1__) {
        for (int sym2__ = 1; sym2__ <= Nf; ++sym2__) {
          vars__.emplace_back(
            rvalue(Coef_mat_u,
              cons_list(index_uni(sym2__),
                cons_list(index_uni(sym1__), nil_index_list())),
              "Coef_mat_u"));}}
      for (int sym1__ = 1; sym1__ <= Nf; ++sym1__) {
        for (int sym2__ = 1; sym2__ <= Ni; ++sym2__) {
          vars__.emplace_back(
            rvalue(Load_mat,
              cons_list(index_uni(sym2__),
                cons_list(index_uni(sym1__), nil_index_list())), "Load_mat"));
        }}
      for (int sym1__ = 1; sym1__ <= Nf; ++sym1__) {
        for (int sym2__ = 1; sym2__ <= Nf; ++sym2__) {
          vars__.emplace_back(
            rvalue(Coef_mat,
              cons_list(index_uni(sym2__),
                cons_list(index_uni(sym1__), nil_index_list())), "Coef_mat"));
        }}
      for (int sym1__ = 1; sym1__ <= Nf; ++sym1__) {
        vars__.emplace_back(phi_var[(sym1__ - 1)]);}
      for (int sym1__ = 1; sym1__ <= Nf; ++sym1__) {
        vars__.emplace_back(r_square[(sym1__ - 1)]);}
      for (int sym1__ = 1; sym1__ <= Nf_corr; ++sym1__) {
        vars__.emplace_back(phi_cor[(sym1__ - 1)]);}
      for (int sym1__ = 1; sym1__ <= Ni; ++sym1__) {
        vars__.emplace_back(res_var[(sym1__ - 1)]);}
      for (int sym1__ = 1; sym1__ <= Nce; ++sym1__) {
        vars__.emplace_back(res_cor[(sym1__ - 1)]);}
      for (int sym1__ = 1; sym1__ <= Nce; ++sym1__) {
        vars__.emplace_back(res_cov[(sym1__ - 1)]);}
      for (int sym1__ = 1; sym1__ <= Ni; ++sym1__) {
        for (int sym2__ = 1; sym2__ <= Ni; ++sym2__) {
          vars__.emplace_back(
            rvalue(Resid,
              cons_list(index_uni(sym2__),
                cons_list(index_uni(sym1__), nil_index_list())), "Resid"));}}
    } catch (const std::exception& e) {
      stan::lang::rethrow_located(e, locations_array__[current_statement__]);
      // Next line prevents compiler griping about no return
      throw std::runtime_error("*** IF YOU SEE THIS, PLEASE REPORT A BUG ***"); 
    }
    } // write_array_impl() 
    
  template <typename VecVar, typename VecI, stan::require_std_vector_t<VecVar>* = nullptr, stan::require_vector_like_vt<std::is_integral, VecI>* = nullptr>
  inline void transform_inits_impl(const stan::io::var_context& context__,
                                   VecI& params_i__, VecVar& vars__,
                                   std::ostream* pstream__ = nullptr) const {
    using local_scalar_t__ = double;
    vars__.clear();
    vars__.reserve(num_params_r__);
    
    try {
      int pos__;
      pos__ = std::numeric_limits<int>::min();
      
      pos__ = 1;
      Eigen::Matrix<double, -1, 1> rms_src_p;
      rms_src_p = Eigen::Matrix<double, -1, 1>(N_rms);
      stan::math::fill(rms_src_p, std::numeric_limits<double>::quiet_NaN());
      
      {
        std::vector<local_scalar_t__> rms_src_p_flat__;
        current_statement__ = 1;
        assign(rms_src_p_flat__, nil_index_list(),
          context__.vals_r("rms_src_p"),
          "assigning variable rms_src_p_flat__");
        current_statement__ = 1;
        pos__ = 1;
        current_statement__ = 1;
        for (int sym1__ = 1; sym1__ <= N_rms; ++sym1__) {
          current_statement__ = 1;
          assign(rms_src_p, cons_list(index_uni(sym1__), nil_index_list()),
            rms_src_p_flat__[(pos__ - 1)], "assigning variable rms_src_p");
          current_statement__ = 1;
          pos__ = (pos__ + 1);}
      }
      Eigen::Matrix<double, -1, 1> rms_src_p_free__;
      rms_src_p_free__ = Eigen::Matrix<double, -1, 1>(N_rms);
      stan::math::fill(rms_src_p_free__, std::numeric_limits<double>::quiet_NaN());
      
      current_statement__ = 1;
      for (int sym1__ = 1; sym1__ <= N_rms; ++sym1__) {
        current_statement__ = 1;
        assign(rms_src_p_free__,
          cons_list(index_uni(sym1__), nil_index_list()),
          stan::math::lb_free(rms_src_p[(sym1__ - 1)], 0.0),
          "assigning variable rms_src_p_free__");}
      Eigen::Matrix<double, -1, 1> gdp_alpha;
      gdp_alpha = Eigen::Matrix<double, -1, 1>(N_alpha);
      stan::math::fill(gdp_alpha, std::numeric_limits<double>::quiet_NaN());
      
      {
        std::vector<local_scalar_t__> gdp_alpha_flat__;
        current_statement__ = 2;
        assign(gdp_alpha_flat__, nil_index_list(),
          context__.vals_r("gdp_alpha"),
          "assigning variable gdp_alpha_flat__");
        current_statement__ = 2;
        pos__ = 1;
        current_statement__ = 2;
        for (int sym1__ = 1; sym1__ <= N_alpha; ++sym1__) {
          current_statement__ = 2;
          assign(gdp_alpha, cons_list(index_uni(sym1__), nil_index_list()),
            gdp_alpha_flat__[(pos__ - 1)], "assigning variable gdp_alpha");
          current_statement__ = 2;
          pos__ = (pos__ + 1);}
      }
      Eigen::Matrix<double, -1, 1> gdp_alpha_free__;
      gdp_alpha_free__ = Eigen::Matrix<double, -1, 1>(N_alpha);
      stan::math::fill(gdp_alpha_free__, std::numeric_limits<double>::quiet_NaN());
      
      current_statement__ = 2;
      for (int sym1__ = 1; sym1__ <= N_alpha; ++sym1__) {
        current_statement__ = 2;
        assign(gdp_alpha_free__,
          cons_list(index_uni(sym1__), nil_index_list()),
          stan::math::lb_free(gdp_alpha[(sym1__ - 1)], 2.0),
          "assigning variable gdp_alpha_free__");}
      Eigen::Matrix<double, -1, 1> resids;
      resids = Eigen::Matrix<double, -1, 1>(Nisqd2);
      stan::math::fill(resids, std::numeric_limits<double>::quiet_NaN());
      
      {
        std::vector<local_scalar_t__> resids_flat__;
        current_statement__ = 3;
        assign(resids_flat__, nil_index_list(), context__.vals_r("resids"),
          "assigning variable resids_flat__");
        current_statement__ = 3;
        pos__ = 1;
        current_statement__ = 3;
        for (int sym1__ = 1; sym1__ <= Nisqd2; ++sym1__) {
          current_statement__ = 3;
          assign(resids, cons_list(index_uni(sym1__), nil_index_list()),
            resids_flat__[(pos__ - 1)], "assigning variable resids");
          current_statement__ = 3;
          pos__ = (pos__ + 1);}
      }
      Eigen::Matrix<double, -1, 1> loadings;
      loadings = Eigen::Matrix<double, -1, 1>(loadings_1dim__);
      stan::math::fill(loadings, std::numeric_limits<double>::quiet_NaN());
      
      {
        std::vector<local_scalar_t__> loadings_flat__;
        current_statement__ = 4;
        assign(loadings_flat__, nil_index_list(),
          context__.vals_r("loadings"), "assigning variable loadings_flat__");
        current_statement__ = 4;
        pos__ = 1;
        current_statement__ = 4;
        for (int sym1__ = 1; sym1__ <= loadings_1dim__; ++sym1__) {
          current_statement__ = 4;
          assign(loadings, cons_list(index_uni(sym1__), nil_index_list()),
            loadings_flat__[(pos__ - 1)], "assigning variable loadings");
          current_statement__ = 4;
          pos__ = (pos__ + 1);}
      }
      Eigen::Matrix<double, -1, 1> loadings_free__;
      loadings_free__ = Eigen::Matrix<double, -1, 1>(loadings_1dim__);
      stan::math::fill(loadings_free__, std::numeric_limits<double>::quiet_NaN());
      
      current_statement__ = 4;
      for (int sym1__ = 1; sym1__ <= loadings_1dim__; ++sym1__) {
        current_statement__ = 4;
        assign(loadings_free__,
          cons_list(index_uni(sym1__), nil_index_list()),
          stan::math::lb_free(loadings[(sym1__ - 1)], 0),
          "assigning variable loadings_free__");}
      double sigma_loadings;
      sigma_loadings = std::numeric_limits<double>::quiet_NaN();
      
      current_statement__ = 5;
      sigma_loadings = context__.vals_r("sigma_loadings")[(1 - 1)];
      double sigma_loadings_free__;
      sigma_loadings_free__ = std::numeric_limits<double>::quiet_NaN();
      
      current_statement__ = 5;
      sigma_loadings_free__ = stan::math::lb_free(sigma_loadings, 0);
      Eigen::Matrix<double, -1, 1> phi_sd;
      phi_sd = Eigen::Matrix<double, -1, 1>(Nf);
      stan::math::fill(phi_sd, std::numeric_limits<double>::quiet_NaN());
      
      {
        std::vector<local_scalar_t__> phi_sd_flat__;
        current_statement__ = 6;
        assign(phi_sd_flat__, nil_index_list(), context__.vals_r("phi_sd"),
          "assigning variable phi_sd_flat__");
        current_statement__ = 6;
        pos__ = 1;
        current_statement__ = 6;
        for (int sym1__ = 1; sym1__ <= Nf; ++sym1__) {
          current_statement__ = 6;
          assign(phi_sd, cons_list(index_uni(sym1__), nil_index_list()),
            phi_sd_flat__[(pos__ - 1)], "assigning variable phi_sd");
          current_statement__ = 6;
          pos__ = (pos__ + 1);}
      }
      Eigen::Matrix<double, -1, 1> phi_sd_free__;
      phi_sd_free__ = Eigen::Matrix<double, -1, 1>(Nf);
      stan::math::fill(phi_sd_free__, std::numeric_limits<double>::quiet_NaN());
      
      current_statement__ = 6;
      for (int sym1__ = 1; sym1__ <= Nf; ++sym1__) {
        current_statement__ = 6;
        assign(phi_sd_free__, cons_list(index_uni(sym1__), nil_index_list()),
          stan::math::lb_free(phi_sd[(sym1__ - 1)], 0),
          "assigning variable phi_sd_free__");}
      Eigen::Matrix<double, -1, 1> res_sds;
      res_sds = Eigen::Matrix<double, -1, 1>(Ni);
      stan::math::fill(res_sds, std::numeric_limits<double>::quiet_NaN());
      
      {
        std::vector<local_scalar_t__> res_sds_flat__;
        current_statement__ = 7;
        assign(res_sds_flat__, nil_index_list(), context__.vals_r("res_sds"),
          "assigning variable res_sds_flat__");
        current_statement__ = 7;
        pos__ = 1;
        current_statement__ = 7;
        for (int sym1__ = 1; sym1__ <= Ni; ++sym1__) {
          current_statement__ = 7;
          assign(res_sds, cons_list(index_uni(sym1__), nil_index_list()),
            res_sds_flat__[(pos__ - 1)], "assigning variable res_sds");
          current_statement__ = 7;
          pos__ = (pos__ + 1);}
      }
      Eigen::Matrix<double, -1, 1> res_sds_free__;
      res_sds_free__ = Eigen::Matrix<double, -1, 1>(Ni);
      stan::math::fill(res_sds_free__, std::numeric_limits<double>::quiet_NaN());
      
      current_statement__ = 7;
      for (int sym1__ = 1; sym1__ <= Ni; ++sym1__) {
        current_statement__ = 7;
        assign(res_sds_free__,
          cons_list(index_uni(sym1__), nil_index_list()),
          stan::math::lb_free(res_sds[(sym1__ - 1)], 0),
          "assigning variable res_sds_free__");}
      Eigen::Matrix<double, -1, 1> phi_cor_01;
      phi_cor_01 = Eigen::Matrix<double, -1, 1>(Nf_corr);
      stan::math::fill(phi_cor_01, std::numeric_limits<double>::quiet_NaN());
      
      {
        std::vector<local_scalar_t__> phi_cor_01_flat__;
        current_statement__ = 8;
        assign(phi_cor_01_flat__, nil_index_list(),
          context__.vals_r("phi_cor_01"),
          "assigning variable phi_cor_01_flat__");
        current_statement__ = 8;
        pos__ = 1;
        current_statement__ = 8;
        for (int sym1__ = 1; sym1__ <= Nf_corr; ++sym1__) {
          current_statement__ = 8;
          assign(phi_cor_01, cons_list(index_uni(sym1__), nil_index_list()),
            phi_cor_01_flat__[(pos__ - 1)], "assigning variable phi_cor_01");
          current_statement__ = 8;
          pos__ = (pos__ + 1);}
      }
      Eigen::Matrix<double, -1, 1> phi_cor_01_free__;
      phi_cor_01_free__ = Eigen::Matrix<double, -1, 1>(Nf_corr);
      stan::math::fill(phi_cor_01_free__, std::numeric_limits<double>::quiet_NaN());
      
      current_statement__ = 8;
      for (int sym1__ = 1; sym1__ <= Nf_corr; ++sym1__) {
        current_statement__ = 8;
        assign(phi_cor_01_free__,
          cons_list(index_uni(sym1__), nil_index_list()),
          stan::math::lub_free(phi_cor_01[(sym1__ - 1)], 0, 1),
          "assigning variable phi_cor_01_free__");}
      Eigen::Matrix<double, -1, 1> res_cor_01;
      res_cor_01 = Eigen::Matrix<double, -1, 1>(Nce);
      stan::math::fill(res_cor_01, std::numeric_limits<double>::quiet_NaN());
      
      {
        std::vector<local_scalar_t__> res_cor_01_flat__;
        current_statement__ = 9;
        assign(res_cor_01_flat__, nil_index_list(),
          context__.vals_r("res_cor_01"),
          "assigning variable res_cor_01_flat__");
        current_statement__ = 9;
        pos__ = 1;
        current_statement__ = 9;
        for (int sym1__ = 1; sym1__ <= Nce; ++sym1__) {
          current_statement__ = 9;
          assign(res_cor_01, cons_list(index_uni(sym1__), nil_index_list()),
            res_cor_01_flat__[(pos__ - 1)], "assigning variable res_cor_01");
          current_statement__ = 9;
          pos__ = (pos__ + 1);}
      }
      Eigen::Matrix<double, -1, 1> res_cor_01_free__;
      res_cor_01_free__ = Eigen::Matrix<double, -1, 1>(Nce);
      stan::math::fill(res_cor_01_free__, std::numeric_limits<double>::quiet_NaN());
      
      current_statement__ = 9;
      for (int sym1__ = 1; sym1__ <= Nce; ++sym1__) {
        current_statement__ = 9;
        assign(res_cor_01_free__,
          cons_list(index_uni(sym1__), nil_index_list()),
          stan::math::lub_free(res_cor_01[(sym1__ - 1)], 0, 1),
          "assigning variable res_cor_01_free__");}
      Eigen::Matrix<double, -1, 1> coefs;
      coefs = Eigen::Matrix<double, -1, 1>(coef_count);
      stan::math::fill(coefs, std::numeric_limits<double>::quiet_NaN());
      
      {
        std::vector<local_scalar_t__> coefs_flat__;
        current_statement__ = 10;
        assign(coefs_flat__, nil_index_list(), context__.vals_r("coefs"),
          "assigning variable coefs_flat__");
        current_statement__ = 10;
        pos__ = 1;
        current_statement__ = 10;
        for (int sym1__ = 1; sym1__ <= coef_count; ++sym1__) {
          current_statement__ = 10;
          assign(coefs, cons_list(index_uni(sym1__), nil_index_list()),
            coefs_flat__[(pos__ - 1)], "assigning variable coefs");
          current_statement__ = 10;
          pos__ = (pos__ + 1);}
      }
      Eigen::Matrix<double, -1, 1> sigma_coefs;
      sigma_coefs = Eigen::Matrix<double, -1, 1>(outcome_count);
      stan::math::fill(sigma_coefs, std::numeric_limits<double>::quiet_NaN());
      
      {
        std::vector<local_scalar_t__> sigma_coefs_flat__;
        current_statement__ = 11;
        assign(sigma_coefs_flat__, nil_index_list(),
          context__.vals_r("sigma_coefs"),
          "assigning variable sigma_coefs_flat__");
        current_statement__ = 11;
        pos__ = 1;
        current_statement__ = 11;
        for (int sym1__ = 1; sym1__ <= outcome_count; ++sym1__) {
          current_statement__ = 11;
          assign(sigma_coefs, cons_list(index_uni(sym1__), nil_index_list()),
            sigma_coefs_flat__[(pos__ - 1)], "assigning variable sigma_coefs");
          current_statement__ = 11;
          pos__ = (pos__ + 1);}
      }
      Eigen::Matrix<double, -1, 1> sigma_coefs_free__;
      sigma_coefs_free__ = Eigen::Matrix<double, -1, 1>(outcome_count);
      stan::math::fill(sigma_coefs_free__, std::numeric_limits<double>::quiet_NaN());
      
      current_statement__ = 11;
      for (int sym1__ = 1; sym1__ <= outcome_count; ++sym1__) {
        current_statement__ = 11;
        assign(sigma_coefs_free__,
          cons_list(index_uni(sym1__), nil_index_list()),
          stan::math::lb_free(sigma_coefs[(sym1__ - 1)], 0),
          "assigning variable sigma_coefs_free__");}
      Eigen::Matrix<double, -1, -1> Sigma;
      Sigma = Eigen::Matrix<double, -1, -1>(N_Sigma, N_Sigma);
      stan::math::fill(Sigma, std::numeric_limits<double>::quiet_NaN());
      
      {
        std::vector<local_scalar_t__> Sigma_flat__;
        current_statement__ = 12;
        assign(Sigma_flat__, nil_index_list(), context__.vals_r("Sigma"),
          "assigning variable Sigma_flat__");
        current_statement__ = 12;
        pos__ = 1;
        current_statement__ = 12;
        for (int sym1__ = 1; sym1__ <= N_Sigma; ++sym1__) {
          current_statement__ = 12;
          for (int sym2__ = 1; sym2__ <= N_Sigma; ++sym2__) {
            current_statement__ = 12;
            assign(Sigma,
              cons_list(index_uni(sym2__),
                cons_list(index_uni(sym1__), nil_index_list())),
              Sigma_flat__[(pos__ - 1)], "assigning variable Sigma");
            current_statement__ = 12;
            pos__ = (pos__ + 1);}}
      }
      Eigen::Matrix<double, -1, 1> Sigma_free__;
      Sigma_free__ = Eigen::Matrix<double, -1, 1>((N_Sigma +
                                                    ((N_Sigma *
                                                       (N_Sigma - 1)) / 2)));
      stan::math::fill(Sigma_free__, std::numeric_limits<double>::quiet_NaN());
      
      current_statement__ = 12;
      assign(Sigma_free__, nil_index_list(),
        stan::math::cov_matrix_free(Sigma), "assigning variable Sigma_free__");
      for (int sym1__ = 1; sym1__ <= N_rms; ++sym1__) {
        vars__.emplace_back(rms_src_p_free__[(sym1__ - 1)]);}
      for (int sym1__ = 1; sym1__ <= N_alpha; ++sym1__) {
        vars__.emplace_back(gdp_alpha_free__[(sym1__ - 1)]);}
      for (int sym1__ = 1; sym1__ <= Nisqd2; ++sym1__) {
        vars__.emplace_back(resids[(sym1__ - 1)]);}
      for (int sym1__ = 1; sym1__ <= loadings_1dim__; ++sym1__) {
        vars__.emplace_back(loadings_free__[(sym1__ - 1)]);}
      vars__.emplace_back(sigma_loadings_free__);
      for (int sym1__ = 1; sym1__ <= Nf; ++sym1__) {
        vars__.emplace_back(phi_sd_free__[(sym1__ - 1)]);}
      for (int sym1__ = 1; sym1__ <= Ni; ++sym1__) {
        vars__.emplace_back(res_sds_free__[(sym1__ - 1)]);}
      for (int sym1__ = 1; sym1__ <= Nf_corr; ++sym1__) {
        vars__.emplace_back(phi_cor_01_free__[(sym1__ - 1)]);}
      for (int sym1__ = 1; sym1__ <= Nce; ++sym1__) {
        vars__.emplace_back(res_cor_01_free__[(sym1__ - 1)]);}
      for (int sym1__ = 1; sym1__ <= coef_count; ++sym1__) {
        vars__.emplace_back(coefs[(sym1__ - 1)]);}
      for (int sym1__ = 1; sym1__ <= outcome_count; ++sym1__) {
        vars__.emplace_back(sigma_coefs_free__[(sym1__ - 1)]);}
      for (int sym1__ = 1;
           sym1__ <= (N_Sigma + ((N_Sigma * (N_Sigma - 1)) / 2)); ++sym1__) {
        vars__.emplace_back(Sigma_free__[(sym1__ - 1)]);}
    } catch (const std::exception& e) {
      stan::lang::rethrow_located(e, locations_array__[current_statement__]);
      // Next line prevents compiler griping about no return
      throw std::runtime_error("*** IF YOU SEE THIS, PLEASE REPORT A BUG ***"); 
    }
    } // transform_inits_impl() 
    
  inline void get_param_names(std::vector<std::string>& names__) const {
    
    names__.clear();
    names__.emplace_back("rms_src_p");
    names__.emplace_back("gdp_alpha");
    names__.emplace_back("resids");
    names__.emplace_back("loadings");
    names__.emplace_back("sigma_loadings");
    names__.emplace_back("phi_sd");
    names__.emplace_back("res_sds");
    names__.emplace_back("phi_cor_01");
    names__.emplace_back("res_cor_01");
    names__.emplace_back("coefs");
    names__.emplace_back("sigma_coefs");
    names__.emplace_back("Sigma");
    names__.emplace_back("D_obs");
    names__.emplace_back("D_rep");
    names__.emplace_back("ppp");
    names__.emplace_back("rms_src");
    names__.emplace_back("Load_mat_u");
    names__.emplace_back("Coef_mat_u");
    names__.emplace_back("Load_mat");
    names__.emplace_back("Coef_mat");
    names__.emplace_back("phi_var");
    names__.emplace_back("r_square");
    names__.emplace_back("phi_cor");
    names__.emplace_back("res_var");
    names__.emplace_back("res_cor");
    names__.emplace_back("res_cov");
    names__.emplace_back("Resid");
    } // get_param_names() 
    
  inline void get_dims(std::vector<std::vector<size_t>>& dimss__) const {
    dimss__.clear();
    dimss__.emplace_back(std::vector<size_t>{static_cast<size_t>(N_rms)});
    
    dimss__.emplace_back(std::vector<size_t>{static_cast<size_t>(N_alpha)});
    
    dimss__.emplace_back(std::vector<size_t>{static_cast<size_t>(Nisqd2)});
    
    dimss__.emplace_back(std::vector<size_t>{
                                             static_cast<size_t>(loadings_1dim__)
                                             });
    
    dimss__.emplace_back(std::vector<size_t>{});
    
    dimss__.emplace_back(std::vector<size_t>{static_cast<size_t>(Nf)});
    
    dimss__.emplace_back(std::vector<size_t>{static_cast<size_t>(Ni)});
    
    dimss__.emplace_back(std::vector<size_t>{static_cast<size_t>(Nf_corr)});
    
    dimss__.emplace_back(std::vector<size_t>{static_cast<size_t>(Nce)});
    
    dimss__.emplace_back(std::vector<size_t>{static_cast<size_t>(coef_count)});
    
    dimss__.emplace_back(std::vector<size_t>{
                                             static_cast<size_t>(outcome_count)
                                             });
    
    dimss__.emplace_back(std::vector<size_t>{static_cast<size_t>(N_Sigma),
                                             static_cast<size_t>(N_Sigma)});
    
    dimss__.emplace_back(std::vector<size_t>{});
    
    dimss__.emplace_back(std::vector<size_t>{});
    
    dimss__.emplace_back(std::vector<size_t>{});
    
    dimss__.emplace_back(std::vector<size_t>{});
    
    dimss__.emplace_back(std::vector<size_t>{static_cast<size_t>(Ni),
                                             static_cast<size_t>(Nf)});
    
    dimss__.emplace_back(std::vector<size_t>{static_cast<size_t>(Nf),
                                             static_cast<size_t>(Nf)});
    
    dimss__.emplace_back(std::vector<size_t>{static_cast<size_t>(Ni),
                                             static_cast<size_t>(Nf)});
    
    dimss__.emplace_back(std::vector<size_t>{static_cast<size_t>(Nf),
                                             static_cast<size_t>(Nf)});
    
    dimss__.emplace_back(std::vector<size_t>{static_cast<size_t>(Nf)});
    
    dimss__.emplace_back(std::vector<size_t>{static_cast<size_t>(Nf)});
    
    dimss__.emplace_back(std::vector<size_t>{static_cast<size_t>(Nf_corr)});
    
    dimss__.emplace_back(std::vector<size_t>{static_cast<size_t>(Ni)});
    
    dimss__.emplace_back(std::vector<size_t>{static_cast<size_t>(Nce)});
    
    dimss__.emplace_back(std::vector<size_t>{static_cast<size_t>(Nce)});
    
    dimss__.emplace_back(std::vector<size_t>{static_cast<size_t>(Ni),
                                             static_cast<size_t>(Ni)});
    
    } // get_dims() 
    
  inline void constrained_param_names(
                                      std::vector<std::string>& param_names__,
                                      bool emit_transformed_parameters__ = true,
                                      bool emit_generated_quantities__ = true) const
    final {
    
    for (int sym1__ = 1; sym1__ <= N_rms; ++sym1__) {
      {
        param_names__.emplace_back(std::string() + "rms_src_p" + '.' + std::to_string(sym1__));
      }}
    for (int sym1__ = 1; sym1__ <= N_alpha; ++sym1__) {
      {
        param_names__.emplace_back(std::string() + "gdp_alpha" + '.' + std::to_string(sym1__));
      }}
    for (int sym1__ = 1; sym1__ <= Nisqd2; ++sym1__) {
      {
        param_names__.emplace_back(std::string() + "resids" + '.' + std::to_string(sym1__));
      }}
    for (int sym1__ = 1; sym1__ <= loadings_1dim__; ++sym1__) {
      {
        param_names__.emplace_back(std::string() + "loadings" + '.' + std::to_string(sym1__));
      }}
    param_names__.emplace_back(std::string() + "sigma_loadings");
    for (int sym1__ = 1; sym1__ <= Nf; ++sym1__) {
      {
        param_names__.emplace_back(std::string() + "phi_sd" + '.' + std::to_string(sym1__));
      }}
    for (int sym1__ = 1; sym1__ <= Ni; ++sym1__) {
      {
        param_names__.emplace_back(std::string() + "res_sds" + '.' + std::to_string(sym1__));
      }}
    for (int sym1__ = 1; sym1__ <= Nf_corr; ++sym1__) {
      {
        param_names__.emplace_back(std::string() + "phi_cor_01" + '.' + std::to_string(sym1__));
      }}
    for (int sym1__ = 1; sym1__ <= Nce; ++sym1__) {
      {
        param_names__.emplace_back(std::string() + "res_cor_01" + '.' + std::to_string(sym1__));
      }}
    for (int sym1__ = 1; sym1__ <= coef_count; ++sym1__) {
      {
        param_names__.emplace_back(std::string() + "coefs" + '.' + std::to_string(sym1__));
      }}
    for (int sym1__ = 1; sym1__ <= outcome_count; ++sym1__) {
      {
        param_names__.emplace_back(std::string() + "sigma_coefs" + '.' + std::to_string(sym1__));
      }}
    for (int sym1__ = 1; sym1__ <= N_Sigma; ++sym1__) {
      {
        for (int sym2__ = 1; sym2__ <= N_Sigma; ++sym2__) {
          {
            param_names__.emplace_back(std::string() + "Sigma" + '.' + std::to_string(sym2__) + '.' + std::to_string(sym1__));
          }}
      }}
    if (emit_transformed_parameters__) {
      
    }
    
    if (emit_generated_quantities__) {
      param_names__.emplace_back(std::string() + "D_obs");
      param_names__.emplace_back(std::string() + "D_rep");
      param_names__.emplace_back(std::string() + "ppp");
      param_names__.emplace_back(std::string() + "rms_src");
      for (int sym1__ = 1; sym1__ <= Nf; ++sym1__) {
        {
          for (int sym2__ = 1; sym2__ <= Ni; ++sym2__) {
            {
              param_names__.emplace_back(std::string() + "Load_mat_u" + '.' + std::to_string(sym2__) + '.' + std::to_string(sym1__));
            }}
        }}
      for (int sym1__ = 1; sym1__ <= Nf; ++sym1__) {
        {
          for (int sym2__ = 1; sym2__ <= Nf; ++sym2__) {
            {
              param_names__.emplace_back(std::string() + "Coef_mat_u" + '.' + std::to_string(sym2__) + '.' + std::to_string(sym1__));
            }}
        }}
      for (int sym1__ = 1; sym1__ <= Nf; ++sym1__) {
        {
          for (int sym2__ = 1; sym2__ <= Ni; ++sym2__) {
            {
              param_names__.emplace_back(std::string() + "Load_mat" + '.' + std::to_string(sym2__) + '.' + std::to_string(sym1__));
            }}
        }}
      for (int sym1__ = 1; sym1__ <= Nf; ++sym1__) {
        {
          for (int sym2__ = 1; sym2__ <= Nf; ++sym2__) {
            {
              param_names__.emplace_back(std::string() + "Coef_mat" + '.' + std::to_string(sym2__) + '.' + std::to_string(sym1__));
            }}
        }}
      for (int sym1__ = 1; sym1__ <= Nf; ++sym1__) {
        {
          param_names__.emplace_back(std::string() + "phi_var" + '.' + std::to_string(sym1__));
        }}
      for (int sym1__ = 1; sym1__ <= Nf; ++sym1__) {
        {
          param_names__.emplace_back(std::string() + "r_square" + '.' + std::to_string(sym1__));
        }}
      for (int sym1__ = 1; sym1__ <= Nf_corr; ++sym1__) {
        {
          param_names__.emplace_back(std::string() + "phi_cor" + '.' + std::to_string(sym1__));
        }}
      for (int sym1__ = 1; sym1__ <= Ni; ++sym1__) {
        {
          param_names__.emplace_back(std::string() + "res_var" + '.' + std::to_string(sym1__));
        }}
      for (int sym1__ = 1; sym1__ <= Nce; ++sym1__) {
        {
          param_names__.emplace_back(std::string() + "res_cor" + '.' + std::to_string(sym1__));
        }}
      for (int sym1__ = 1; sym1__ <= Nce; ++sym1__) {
        {
          param_names__.emplace_back(std::string() + "res_cov" + '.' + std::to_string(sym1__));
        }}
      for (int sym1__ = 1; sym1__ <= Ni; ++sym1__) {
        {
          for (int sym2__ = 1; sym2__ <= Ni; ++sym2__) {
            {
              param_names__.emplace_back(std::string() + "Resid" + '.' + std::to_string(sym2__) + '.' + std::to_string(sym1__));
            }}
        }}
    }
    
    } // constrained_param_names() 
    
  inline void unconstrained_param_names(
                                        std::vector<std::string>& param_names__,
                                        bool emit_transformed_parameters__ = true,
                                        bool emit_generated_quantities__ = true) const
    final {
    
    for (int sym1__ = 1; sym1__ <= N_rms; ++sym1__) {
      {
        param_names__.emplace_back(std::string() + "rms_src_p" + '.' + std::to_string(sym1__));
      }}
    for (int sym1__ = 1; sym1__ <= N_alpha; ++sym1__) {
      {
        param_names__.emplace_back(std::string() + "gdp_alpha" + '.' + std::to_string(sym1__));
      }}
    for (int sym1__ = 1; sym1__ <= Nisqd2; ++sym1__) {
      {
        param_names__.emplace_back(std::string() + "resids" + '.' + std::to_string(sym1__));
      }}
    for (int sym1__ = 1; sym1__ <= loadings_1dim__; ++sym1__) {
      {
        param_names__.emplace_back(std::string() + "loadings" + '.' + std::to_string(sym1__));
      }}
    param_names__.emplace_back(std::string() + "sigma_loadings");
    for (int sym1__ = 1; sym1__ <= Nf; ++sym1__) {
      {
        param_names__.emplace_back(std::string() + "phi_sd" + '.' + std::to_string(sym1__));
      }}
    for (int sym1__ = 1; sym1__ <= Ni; ++sym1__) {
      {
        param_names__.emplace_back(std::string() + "res_sds" + '.' + std::to_string(sym1__));
      }}
    for (int sym1__ = 1; sym1__ <= Nf_corr; ++sym1__) {
      {
        param_names__.emplace_back(std::string() + "phi_cor_01" + '.' + std::to_string(sym1__));
      }}
    for (int sym1__ = 1; sym1__ <= Nce; ++sym1__) {
      {
        param_names__.emplace_back(std::string() + "res_cor_01" + '.' + std::to_string(sym1__));
      }}
    for (int sym1__ = 1; sym1__ <= coef_count; ++sym1__) {
      {
        param_names__.emplace_back(std::string() + "coefs" + '.' + std::to_string(sym1__));
      }}
    for (int sym1__ = 1; sym1__ <= outcome_count; ++sym1__) {
      {
        param_names__.emplace_back(std::string() + "sigma_coefs" + '.' + std::to_string(sym1__));
      }}
    for (int sym1__ = 1;
         sym1__ <= (N_Sigma + ((N_Sigma * (N_Sigma - 1)) / 2)); ++sym1__) {
      {
        param_names__.emplace_back(std::string() + "Sigma" + '.' + std::to_string(sym1__));
      }}
    if (emit_transformed_parameters__) {
      
    }
    
    if (emit_generated_quantities__) {
      param_names__.emplace_back(std::string() + "D_obs");
      param_names__.emplace_back(std::string() + "D_rep");
      param_names__.emplace_back(std::string() + "ppp");
      param_names__.emplace_back(std::string() + "rms_src");
      for (int sym1__ = 1; sym1__ <= Nf; ++sym1__) {
        {
          for (int sym2__ = 1; sym2__ <= Ni; ++sym2__) {
            {
              param_names__.emplace_back(std::string() + "Load_mat_u" + '.' + std::to_string(sym2__) + '.' + std::to_string(sym1__));
            }}
        }}
      for (int sym1__ = 1; sym1__ <= Nf; ++sym1__) {
        {
          for (int sym2__ = 1; sym2__ <= Nf; ++sym2__) {
            {
              param_names__.emplace_back(std::string() + "Coef_mat_u" + '.' + std::to_string(sym2__) + '.' + std::to_string(sym1__));
            }}
        }}
      for (int sym1__ = 1; sym1__ <= Nf; ++sym1__) {
        {
          for (int sym2__ = 1; sym2__ <= Ni; ++sym2__) {
            {
              param_names__.emplace_back(std::string() + "Load_mat" + '.' + std::to_string(sym2__) + '.' + std::to_string(sym1__));
            }}
        }}
      for (int sym1__ = 1; sym1__ <= Nf; ++sym1__) {
        {
          for (int sym2__ = 1; sym2__ <= Nf; ++sym2__) {
            {
              param_names__.emplace_back(std::string() + "Coef_mat" + '.' + std::to_string(sym2__) + '.' + std::to_string(sym1__));
            }}
        }}
      for (int sym1__ = 1; sym1__ <= Nf; ++sym1__) {
        {
          param_names__.emplace_back(std::string() + "phi_var" + '.' + std::to_string(sym1__));
        }}
      for (int sym1__ = 1; sym1__ <= Nf; ++sym1__) {
        {
          param_names__.emplace_back(std::string() + "r_square" + '.' + std::to_string(sym1__));
        }}
      for (int sym1__ = 1; sym1__ <= Nf_corr; ++sym1__) {
        {
          param_names__.emplace_back(std::string() + "phi_cor" + '.' + std::to_string(sym1__));
        }}
      for (int sym1__ = 1; sym1__ <= Ni; ++sym1__) {
        {
          param_names__.emplace_back(std::string() + "res_var" + '.' + std::to_string(sym1__));
        }}
      for (int sym1__ = 1; sym1__ <= Nce; ++sym1__) {
        {
          param_names__.emplace_back(std::string() + "res_cor" + '.' + std::to_string(sym1__));
        }}
      for (int sym1__ = 1; sym1__ <= Nce; ++sym1__) {
        {
          param_names__.emplace_back(std::string() + "res_cov" + '.' + std::to_string(sym1__));
        }}
      for (int sym1__ = 1; sym1__ <= Ni; ++sym1__) {
        {
          for (int sym2__ = 1; sym2__ <= Ni; ++sym2__) {
            {
              param_names__.emplace_back(std::string() + "Resid" + '.' + std::to_string(sym2__) + '.' + std::to_string(sym1__));
            }}
        }}
    }
    
    } // unconstrained_param_names() 
    
  inline std::string get_constrained_sizedtypes() const {
    stringstream s__;
    s__ << "[{\"name\":\"rms_src_p\",\"type\":{\"name\":\"vector\",\"length\":" << N_rms << "},\"block\":\"parameters\"},{\"name\":\"gdp_alpha\",\"type\":{\"name\":\"vector\",\"length\":" << N_alpha << "},\"block\":\"parameters\"},{\"name\":\"resids\",\"type\":{\"name\":\"vector\",\"length\":" << Nisqd2 << "},\"block\":\"parameters\"},{\"name\":\"loadings\",\"type\":{\"name\":\"vector\",\"length\":" << loadings_1dim__ << "},\"block\":\"parameters\"},{\"name\":\"sigma_loadings\",\"type\":{\"name\":\"real\"},\"block\":\"parameters\"},{\"name\":\"phi_sd\",\"type\":{\"name\":\"vector\",\"length\":" << Nf << "},\"block\":\"parameters\"},{\"name\":\"res_sds\",\"type\":{\"name\":\"vector\",\"length\":" << Ni << "},\"block\":\"parameters\"},{\"name\":\"phi_cor_01\",\"type\":{\"name\":\"vector\",\"length\":" << Nf_corr << "},\"block\":\"parameters\"},{\"name\":\"res_cor_01\",\"type\":{\"name\":\"vector\",\"length\":" << Nce << "},\"block\":\"parameters\"},{\"name\":\"coefs\",\"type\":{\"name\":\"vector\",\"length\":" << coef_count << "},\"block\":\"parameters\"},{\"name\":\"sigma_coefs\",\"type\":{\"name\":\"vector\",\"length\":" << outcome_count << "},\"block\":\"parameters\"},{\"name\":\"Sigma\",\"type\":{\"name\":\"matrix\",\"rows\":" << N_Sigma << ",\"cols\":" << N_Sigma << "},\"block\":\"parameters\"},{\"name\":\"D_obs\",\"type\":{\"name\":\"real\"},\"block\":\"generated_quantities\"},{\"name\":\"D_rep\",\"type\":{\"name\":\"real\"},\"block\":\"generated_quantities\"},{\"name\":\"ppp\",\"type\":{\"name\":\"real\"},\"block\":\"generated_quantities\"},{\"name\":\"rms_src\",\"type\":{\"name\":\"real\"},\"block\":\"generated_quantities\"},{\"name\":\"Load_mat_u\",\"type\":{\"name\":\"matrix\",\"rows\":" << Ni << ",\"cols\":" << Nf << "},\"block\":\"generated_quantities\"},{\"name\":\"Coef_mat_u\",\"type\":{\"name\":\"matrix\",\"rows\":" << Nf << ",\"cols\":" << Nf << "},\"block\":\"generated_quantities\"},{\"name\":\"Load_mat\",\"type\":{\"name\":\"matrix\",\"rows\":" << Ni << ",\"cols\":" << Nf << "},\"block\":\"generated_quantities\"},{\"name\":\"Coef_mat\",\"type\":{\"name\":\"matrix\",\"rows\":" << Nf << ",\"cols\":" << Nf << "},\"block\":\"generated_quantities\"},{\"name\":\"phi_var\",\"type\":{\"name\":\"vector\",\"length\":" << Nf << "},\"block\":\"generated_quantities\"},{\"name\":\"r_square\",\"type\":{\"name\":\"vector\",\"length\":" << Nf << "},\"block\":\"generated_quantities\"},{\"name\":\"phi_cor\",\"type\":{\"name\":\"vector\",\"length\":" << Nf_corr << "},\"block\":\"generated_quantities\"},{\"name\":\"res_var\",\"type\":{\"name\":\"vector\",\"length\":" << Ni << "},\"block\":\"generated_quantities\"},{\"name\":\"res_cor\",\"type\":{\"name\":\"vector\",\"length\":" << Nce << "},\"block\":\"generated_quantities\"},{\"name\":\"res_cov\",\"type\":{\"name\":\"vector\",\"length\":" << Nce << "},\"block\":\"generated_quantities\"},{\"name\":\"Resid\",\"type\":{\"name\":\"matrix\",\"rows\":" << Ni << ",\"cols\":" << Ni << "},\"block\":\"generated_quantities\"}]";
    return s__.str();
    } // get_constrained_sizedtypes() 
    
  inline std::string get_unconstrained_sizedtypes() const {
    stringstream s__;
    s__ << "[{\"name\":\"rms_src_p\",\"type\":{\"name\":\"vector\",\"length\":" << N_rms << "},\"block\":\"parameters\"},{\"name\":\"gdp_alpha\",\"type\":{\"name\":\"vector\",\"length\":" << N_alpha << "},\"block\":\"parameters\"},{\"name\":\"resids\",\"type\":{\"name\":\"vector\",\"length\":" << Nisqd2 << "},\"block\":\"parameters\"},{\"name\":\"loadings\",\"type\":{\"name\":\"vector\",\"length\":" << loadings_1dim__ << "},\"block\":\"parameters\"},{\"name\":\"sigma_loadings\",\"type\":{\"name\":\"real\"},\"block\":\"parameters\"},{\"name\":\"phi_sd\",\"type\":{\"name\":\"vector\",\"length\":" << Nf << "},\"block\":\"parameters\"},{\"name\":\"res_sds\",\"type\":{\"name\":\"vector\",\"length\":" << Ni << "},\"block\":\"parameters\"},{\"name\":\"phi_cor_01\",\"type\":{\"name\":\"vector\",\"length\":" << Nf_corr << "},\"block\":\"parameters\"},{\"name\":\"res_cor_01\",\"type\":{\"name\":\"vector\",\"length\":" << Nce << "},\"block\":\"parameters\"},{\"name\":\"coefs\",\"type\":{\"name\":\"vector\",\"length\":" << coef_count << "},\"block\":\"parameters\"},{\"name\":\"sigma_coefs\",\"type\":{\"name\":\"vector\",\"length\":" << outcome_count << "},\"block\":\"parameters\"},{\"name\":\"Sigma\",\"type\":{\"name\":\"vector\",\"length\":" << (N_Sigma + ((N_Sigma * (N_Sigma - 1)) / 2)) << "},\"block\":\"parameters\"},{\"name\":\"D_obs\",\"type\":{\"name\":\"real\"},\"block\":\"generated_quantities\"},{\"name\":\"D_rep\",\"type\":{\"name\":\"real\"},\"block\":\"generated_quantities\"},{\"name\":\"ppp\",\"type\":{\"name\":\"real\"},\"block\":\"generated_quantities\"},{\"name\":\"rms_src\",\"type\":{\"name\":\"real\"},\"block\":\"generated_quantities\"},{\"name\":\"Load_mat_u\",\"type\":{\"name\":\"matrix\",\"rows\":" << Ni << ",\"cols\":" << Nf << "},\"block\":\"generated_quantities\"},{\"name\":\"Coef_mat_u\",\"type\":{\"name\":\"matrix\",\"rows\":" << Nf << ",\"cols\":" << Nf << "},\"block\":\"generated_quantities\"},{\"name\":\"Load_mat\",\"type\":{\"name\":\"matrix\",\"rows\":" << Ni << ",\"cols\":" << Nf << "},\"block\":\"generated_quantities\"},{\"name\":\"Coef_mat\",\"type\":{\"name\":\"matrix\",\"rows\":" << Nf << ",\"cols\":" << Nf << "},\"block\":\"generated_quantities\"},{\"name\":\"phi_var\",\"type\":{\"name\":\"vector\",\"length\":" << Nf << "},\"block\":\"generated_quantities\"},{\"name\":\"r_square\",\"type\":{\"name\":\"vector\",\"length\":" << Nf << "},\"block\":\"generated_quantities\"},{\"name\":\"phi_cor\",\"type\":{\"name\":\"vector\",\"length\":" << Nf_corr << "},\"block\":\"generated_quantities\"},{\"name\":\"res_var\",\"type\":{\"name\":\"vector\",\"length\":" << Ni << "},\"block\":\"generated_quantities\"},{\"name\":\"res_cor\",\"type\":{\"name\":\"vector\",\"length\":" << Nce << "},\"block\":\"generated_quantities\"},{\"name\":\"res_cov\",\"type\":{\"name\":\"vector\",\"length\":" << Nce << "},\"block\":\"generated_quantities\"},{\"name\":\"Resid\",\"type\":{\"name\":\"matrix\",\"rows\":" << Ni << ",\"cols\":" << Ni << "},\"block\":\"generated_quantities\"}]";
    return s__.str();
    } // get_unconstrained_sizedtypes() 
    
  
    // Begin method overload boilerplate
    template <typename RNG>
    inline void write_array(RNG& base_rng,
                            Eigen::Matrix<double,Eigen::Dynamic,1>& params_r,
                            Eigen::Matrix<double,Eigen::Dynamic,1>& vars,
                            const bool emit_transformed_parameters = true,
                            const bool emit_generated_quantities = true,
                            std::ostream* pstream = nullptr) const {
      std::vector<double> vars_vec(vars.size());
      std::vector<int> params_i;
      write_array_impl(base_rng, params_r, params_i, vars_vec,
          emit_transformed_parameters, emit_generated_quantities, pstream);
      vars.resize(vars_vec.size());
      for (int i = 0; i < vars.size(); ++i) {
        vars.coeffRef(i) = vars_vec[i];
      }
    }
    template <typename RNG>
    inline void write_array(RNG& base_rng, std::vector<double>& params_r,
                            std::vector<int>& params_i,
                            std::vector<double>& vars,
                            bool emit_transformed_parameters = true,
                            bool emit_generated_quantities = true,
                            std::ostream* pstream = nullptr) const {
      write_array_impl(base_rng, params_r, params_i, vars, emit_transformed_parameters, emit_generated_quantities, pstream);
    }
    template <bool propto__, bool jacobian__, typename T_>
    inline T_ log_prob(Eigen::Matrix<T_,Eigen::Dynamic,1>& params_r,
                       std::ostream* pstream = nullptr) const {
      Eigen::Matrix<int, -1, 1> params_i;
      return log_prob_impl<propto__, jacobian__>(params_r, params_i, pstream);
    }
    template <bool propto__, bool jacobian__, typename T__>
    inline T__ log_prob(std::vector<T__>& params_r,
                        std::vector<int>& params_i,
                        std::ostream* pstream = nullptr) const {
      return log_prob_impl<propto__, jacobian__>(params_r, params_i, pstream);
    }
  
    inline void transform_inits(const stan::io::var_context& context,
                         Eigen::Matrix<double, Eigen::Dynamic, 1>& params_r,
                         std::ostream* pstream = nullptr) const final {
      std::vector<double> params_r_vec(params_r.size());
      std::vector<int> params_i;
      transform_inits_impl(context, params_i, params_r_vec, pstream);
      params_r.resize(params_r_vec.size());
      for (int i = 0; i < params_r.size(); ++i) {
        params_r.coeffRef(i) = params_r_vec[i];
      }
    }
    inline void transform_inits(const stan::io::var_context& context,
                                std::vector<int>& params_i,
                                std::vector<double>& vars,
                                std::ostream* pstream = nullptr) const final {
      transform_inits_impl(context, params_i, vars, pstream);
    }        
};
}
using stan_model = model_sem_resid_rs_namespace::model_sem_resid_rs;
#ifndef USING_R
// Boilerplate
stan::model::model_base& new_model(
        stan::io::var_context& data_context,
        unsigned int seed,
        std::ostream* msg_stream) {
  stan_model* m = new stan_model(data_context, seed, msg_stream);
  return *m;
}
stan::math::profile_map& get_stan_profile_data() {
  return model_sem_resid_rs_namespace::profiles__;
}
#endif
#endif
